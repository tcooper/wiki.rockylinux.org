{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rocky Linux Wiki \u00b6 About \u00b6 Rocky Linux is a community enterprise Operating System designed to be 100% bug-for-bug compatible with Enterprise Linux. Contact \u00b6 Team Contact Channel Community community@rockylinux.org Design design@rockylinux.org Development development@rockylinux.org ~development Documentation ~documentation Infrastructure infrastructure@rockylinux.org ~infrastructure Security security@rockylinux.org ~Security Web web@rockylinux.org For all other questions: hello@rockylinux.org Alternatively, you can use our mail lists Contributing \u00b6 Thank you for your interest in contributing to the project. If you are a developer, architect, engineer, or otherwise looking to contribute your time and expertise, please consider joining our Mattermost server and jumping into the most relevant channel to your interests. If you are interested in donating or sponsoring the project, please email sponsor@rockylinux.org. NOTE : We do not currently have any official crowdsourcing established. Special Thanks \u00b6 We would like to thank the following groups for their support thus far on the project. Our sponsors can be found here .","title":"Welcome"},{"location":"#rocky-linux-wiki","text":"","title":"Rocky Linux Wiki"},{"location":"#about","text":"Rocky Linux is a community enterprise Operating System designed to be 100% bug-for-bug compatible with Enterprise Linux.","title":"About"},{"location":"#contact","text":"Team Contact Channel Community community@rockylinux.org Design design@rockylinux.org Development development@rockylinux.org ~development Documentation ~documentation Infrastructure infrastructure@rockylinux.org ~infrastructure Security security@rockylinux.org ~Security Web web@rockylinux.org For all other questions: hello@rockylinux.org Alternatively, you can use our mail lists","title":"Contact"},{"location":"#contributing","text":"Thank you for your interest in contributing to the project. If you are a developer, architect, engineer, or otherwise looking to contribute your time and expertise, please consider joining our Mattermost server and jumping into the most relevant channel to your interests. If you are interested in donating or sponsoring the project, please email sponsor@rockylinux.org. NOTE : We do not currently have any official crowdsourcing established.","title":"Contributing"},{"location":"#special-thanks","text":"We would like to thank the following groups for their support thus far on the project. Our sponsors can be found here .","title":"Special Thanks"},{"location":"links/","text":"Website System Status Forums Wiki Rocky Linux Account Services Mail List Cloud Offerings \u00b6 Amazon Web Services Google Cloud Platform Development \u00b6 GitLab Server RPM Sources Module Sources Rocky Customizations Image Kickstarts Repo Comps Distrobuild Builds List Koji Bugzilla GitHub Container Roots Docker Hub Quay.io Vagrant Social \u00b6 Mattermost IRC ( libera.chat ): IRC<-->Mattermost mappings Twitter LinkedIn Company Page User Group Reddit Twitch YouTube on other channels Other DistroWatch","title":"Link Directory"},{"location":"links/#cloud-offerings","text":"Amazon Web Services Google Cloud Platform","title":"Cloud Offerings"},{"location":"links/#development","text":"GitLab Server RPM Sources Module Sources Rocky Customizations Image Kickstarts Repo Comps Distrobuild Builds List Koji Bugzilla GitHub Container Roots Docker Hub Quay.io Vagrant","title":"Development"},{"location":"links/#social","text":"Mattermost IRC ( libera.chat ): IRC<-->Mattermost mappings Twitter LinkedIn Company Page User Group Reddit Twitch YouTube on other channels Other DistroWatch","title":"Social"},{"location":"archive/","text":"This section of the wiki is meant as an archive area of the original Rocky Linux wiki. This contains various documents considered \"legacy\" and meant for instructional and historical purposes only. This area will likely not be updated any further. If you find there are documents that should be here from the old wiki, please consider opening an issue here .","title":"Archives"},{"location":"archive/legacy/","text":"This section contains all documents considered as \"legacy\", as archived from the original wiki, regardless of the team involved. Use the navigation menu to your left to view the various pages in this section. Please note that this section is likely not to be updated. Retired documents per team/wiki section will have its own retired/legacy section.","title":"Legacy"},{"location":"archive/legacy/8_4_package_errors/","text":"This page tracks package fixes/progress for the upcoming 8.4 release. Packages are tracked in a table with package name, Koji build link, assignee, and notes. Packages that are fixed will be marked with a ~~strikethrough~~ to indicate they're done. Packages are considered fixed only after they have a successful build in Koji. Package Koji Link Assignee Notes ~~spirv-tools-2020.5-3.20201208~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8403~~ ~~N/A~~ ~~Neil: Last time we had to tag to an older release of spirv-headers - we likely need to update this.~~ ~~python-cryptography~~ https://kojidev.rockylinux.org/koji/buildinfo?buildID=8353 Skip Grube Relies on new python-cryptography-vectors c8s branch; Neil: Removed unnecessary patch from 8.3 dotnet3 /dotnet5 https://kojidev.rockylinux.org/koji/buildinfo?buildID=8326 Michael Young Import/patch issue? Also might be memory issues with building large SRPM on i686 ; 2021-05-27 - see comment below ~~rhel-system-roles~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8376~~ ~~N/A~~ ~~No matching package to install: 'python3dist(ruamel.yaml)'~~ ~~pandoc~~ https://kojidev.rockylinux.org/koji/buildinfo?buildID=8340 Neil Hanlon / ashman / others ~~Need to bootstrap + build \"hscolour and it should be fixed - Had to enable bootstrapping on ghc-rpm-macros (built as %{RELEASE}.1) and then build hscolour as well with a bootstrapping patch to not have a circular dependency on ghc-rpm-macros to hscolour.~~ ~~texlive~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8464~~ ~~Jordan Pisaniello~~ ~~Compiler error : ../../../texk/web2c/pdftexdir/pdftosrc.cc:91:25: error: 'unique_ptr' is not a member of 'std' (and others)~~ ~~xdp-tools~~ ~~https://kojidev.rockylinux.org/koji/taskinfo?taskID=80568~~ N/A ~~Compiler error libbpf support: FORCE_SYSTEM_LIBBPF is set, but no usable libbpf found~~ ~~libreoffice~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8315~~ ~~Skip Grube~~ Needs mdds-1.5 (c8s branch), then new liborcus, then can compile this ~~gupnp~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8213~~ ~~Skip Grube~~ ~~gupnp: need 'gssdp-devel >= 1.0.5' first (new hidden dependency?)~~ ~~libdazzle~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8265~~ N/A ~~libdazzle: aarch64 error: failed test \"test-recursive-monitor\" - see build.log for more info~~ ~~libuv~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8297~~ ~~N/A~~ ~~Several failed tests, but ONLY on i686~~ ~~libwacom~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8306~~ ~~Skip Grube~~ ~~libwacom: need to update meson: meson.build:1:0: ERROR: Meson version is 0.49.2 but project requires >= 0.50.0.~~ ~~libbpf~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8263~~ ~~N/A~~ ~~/usr/bin/strip:/builddir/build/BUILDROOT/libbpf-0.2.0-1.el8.x86_64/usr/lib64/st9U4xP0/libbpf-in.o[.gnu.build.attributes]: error: failed to copy merged notes into output: Bad value (???)~~ ~~bcc~~ ~~https://kojidev.rockylinux.org/koji/taskinfo?taskID=80556~~ N/A ~~Needs new kernel release~~ ~~gssdp~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8209~~ N/A ~~failing test \"test-functional\" ONLY on i686~~ ~~gnome-settings-daemon~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8204~~ ~~Skip Grube~ ~~Spec file is incorrectly configured or macro is being defined~~ ~~ghostscript~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8195~~ N/A ~~Compiler errors: from ./base/sjbig2.c:26:/usr/include/jbig2.h:93:11: note: expected 'Jbig2ErrorCallback' {aka 'int ( )(void , const char , enum , int)'} but argument is of type 'void ( )(void , const char , Jbig2Severity, int32_t)' {aka 'void ( )(void , const char *, enum , int)'} (and others)~~ ~~dnf~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8147~~ ~~Skip Grube~~ ~~No matching package to install: 'python3-hawkey >= 0.55.0-5' (new hidden dep?)~~ ~~dlm~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8137~~ ~~N/A~~ ~~compiler errors: member.c:113:86: error: parameter 2 ('ring_id') has incomplete type~~ ~~corosync~~ ~~https://kojidev.rockylinux.org/koji/buildinfo?buildID=8122~~ ~~Skip Grube~~ ~~No matching package to install: 'libknet1-devel >= 1.18' (hidden dep? or something not compiled yet?)~~ ~~bpftrace~~ ~~https://kojidev.rockylinux.org/koji/taskinfo?taskID=80558~~ N/A ~~Compiler error - likely fixed by new libbpf(?)~~ Annotations \u00b6 #### dotnet3.1 From Michael Young on 2021-05-27 Hey @Skip Grube I have been quiet all week because dotnet is kicking my butt. I thought it would be as simple as redoing the patch. I have been working with dotnet3.1. It doesn't seem to like the minor version that is now in os-release for rocky 8.4. When I redid the patch and built with just the major version, it builds... But with the major and minor, it fails. Wanted to put a note here since I am going to be away from a computer until Monday and don't want to leave everyone hanging... Not sure if there is a date in mind besides as soon as possible. If anyone wants to take a stab at it, be my guest. Otherwise, I will keep plugging away at it... I think I am close to getting it to use the runtime I'd of rocky-8.4","title":"Rocky Release 8.4 Package Errors"},{"location":"archive/legacy/8_4_package_errors/#annotations","text":"#### dotnet3.1 From Michael Young on 2021-05-27 Hey @Skip Grube I have been quiet all week because dotnet is kicking my butt. I thought it would be as simple as redoing the patch. I have been working with dotnet3.1. It doesn't seem to like the minor version that is now in os-release for rocky 8.4. When I redid the patch and built with just the major version, it builds... But with the major and minor, it fails. Wanted to put a note here since I am going to be away from a computer until Monday and don't want to leave everyone hanging... Not sure if there is a date in mind besides as soon as possible. If anyone wants to take a stab at it, be my guest. Otherwise, I will keep plugging away at it... I think I am close to getting it to use the runtime I'd of rocky-8.4","title":"Annotations"},{"location":"archive/legacy/bootstrap_i686/","text":"Koji, by default, does not build packages as multiarch, it expects a i686 repo/buildroot as that is what mock expects. It appears that it requires a 32 bit bootstrap to start off. However, Enterprise Linux 8 does not have a 32 bit repo. To get around this, packages have to be bootstrapped using at least Fedora 28 (and Fedora 29 for couple of instances). Setup \u00b6 Install Mock and Configuration \u00b6 Install mock... % yum install epel-release % yum install mock createrepo_c httpd -y % useradd rpmbuild % usermod -aG mock rpmbuild Add a proper mock configuration... % cat >> /etc/mock/rocky-8-i686.cfg << \"EOF\" # A lot of these values do not matter as they will be overridden later # with koji's mock settings config_opts['root'] = 'rocky-8-i686' config_opts['target_arch'] = 'i686' config_opts['legal_host_arches'] = ('i386', 'i486', 'i586', 'i686', 'x86_64',) config_opts['chroot_setup_cmd'] = 'install bash bzip2 coreutils cpio diffutils system-release findutils gawk gcc gcc-c++ grep gzip info make patch redhat-rpm-config rpm-build sed shadow-utils tar unzip util-linux which xz' config_opts['dist'] = 'el8' # only useful for --resultdir variable subst config_opts['macros']['%dist'] = \".el8\" config_opts['%centos_ver'] = \"8\" config_opts['macros']['%centos_ver'] = \"8\" config_opts['macros']['%rhel'] = \"8\" config_opts['macros']['%el8'] = \"1\" config_opts['macros']['%redhat'] = \"8\" config_opts['macros']['%_vendor'] = \"redhat\" config_opts['macros']['%_vendor_host'] = \"redhat\" config_opts['macros']['%_host'] = \"i686-redhat-linux-gnu\" config_opts['macros']['%vendor'] = \"Rocky Linux\" config_opts['macros']['%packager'] = \"Louis Abel <label@rockylinux.org>\" #config_opts['package_manager'] = 'yum' # no ccache in base repo #config_opts['plugin_conf']['ccache_enable'] = False #config_opts['plugin_conf']['yum_cache_enable'] = False config_opts['yum.conf'] = \"\"\" [main] cachedir=/var/cache/yum keepcache=1 debuglevel=2 reposdir=/dev/null logfile=/var/log/yum.log retries=20 obsoletes=1 gpgcheck=0 assumeyes=1 syslog_ident=mock syslog_device= exclude=*.x86_64 # We are using Fedora 28 or 29 as our bases. 28 is what we use mainly. There are # a few cases where I needed 29 instead, but they were far and few between. # In majority of builds now with the current bootstrap, Fedora is rarely used. # Even though this is the case, we still need to exclude specific packages as # they have epochs or dnf decides to use Fedora instead for whatever reason. [base_29] name=fedora 29 base baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/29/Everything/i386/os/ enabled=0 gpgcheck=0 cost=2000 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [updates_29] name=fedora 29 updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/29/Everything/i386/ enabled=0 gpgcheck=0 cost=2000 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [base_28] name=fedora 28 base baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/28/Everything/i386/os/ enabled=1 gpgcheck=0 cost=2000 priority=99 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [updates_28] name=fedora 28 updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/28/Everything/i386/ enabled=1 gpgcheck=0 cost=2000 priority=99 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* # These aren't ever used, but it doesn't hurt to have them here disabled. [modular] name=fedora 28 modular baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/28/Modular/i386/os/ enabled=0 gpgcheck=0 cost=2500 [modular_updates] name=fedora 28 modular updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/28/Modular/i386/ enabled=0 gpgcheck=0 cost=2500 # Sometimes I enable this, but usually I just copy what's there into /reqs and # createrepo. [i686] name=i686 only baseurl=file:///var/www/html/src/i686 enabled=0 gpgcheck=0 cost=1000 # Everything we're building into a single repo. This has higher priority. [recursive] name=recursive baseurl=file:///var/www/html/src/reqs enabled=1 gpgcheck=0 cost=1000 priority=1 module_hotfixes=0 \"\"\" Setup the recursive repo \u00b6 So we can create an empty repo so mock/dnf is ok with that. However, that won't cut everything. We need a couple RPM's first. We can pull the noarch packages that centos has right now to get us started. % mkdir -p /var/www/html/src/{reqs,logs,mirror,hidden} # Pull required RPM's % wget http://mirror.centos.org/centos/8.3.2011/AppStream/x86_64/os/Packages/redhat-rpm-config-123-1.el8.noarch.rpm # Generate repo data % createrepo /var/www/html/src/reqs Pull required hidden deps \u00b6 We still need some hidden dependencies. And a lot of these can be built without a problem after the above has been setup. Below is a list, which can be found on our temporary copr . You should download the source RPM's and build them. You won't find a rocky-logos or rocky-release in copr. However you may find them in our koji. Highly recommended downloading them from koji and building them. -rw-r--r-- 1 root root 569161 Apr 7 04:09 atf-0.20-11.el8.src.rpm -rw-r--r-- 1 root root 2198827 Apr 7 04:01 fonttools-3.28.0-2.el8.src.rpm -rw-r--r-- 1 root root 670398 Apr 7 04:34 kyua-0.13-1.el8.src.rpm -rw-r--r-- 1 root root 149325484 Mar 15 22:41 libabigail-1.4-2.el8.src.rpm -rw-r--r-- 1 root root 500728 Apr 7 04:19 lutok-0.4-10.el8.src.rpm -rw-r--r-- 1 root root 1107360 Aug 7 2020 nspr-4.25.0-2.el8_2.src.rpm -rw-r--r-- 1 root root 143424626 Apr 8 06:56 nss-3.53.1-17.el8.src.rpm -rw-r--r-- 1 root root 100839 Mar 14 22:38 pam_wrapper-1.0.7-1.el8.src.rpm -rw-r--r-- 1 root root 149272 Dec 21 03:56 polkit-gnome-0.106-0.2.20170423gita0763a2.el8.src.rpm -rw-r--r-- 1 root root 1507527 Mar 15 17:38 rocky-logos-83.0-1.el8.src.rpm -rw-r--r-- 1 root root 23678 Apr 9 04:04 rocky-release-8.3-5.el8.src.rpm -rw-r--r-- 1 root root 3527211 Apr 7 03:52 ttfautohint-1.8.1-3.el8.src.rpm Optional: Pull all the sources from the vault \u00b6 You may need to pull all the sources from the vault. I used httrack to do this. Note that the link may die and you may need to build it yourself. Another thing is, after I pulled down the sources, I deleted all the old stuff and moved all the module packages. % cd /var/www/html/src/mirror # -sN 0 helps ignore robots % httrack https://vault.centos.org/8.3.2011/BaseOS/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/AppStream/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/HighAvailability/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/PowerTools/Source/SPackages/ -sN 0 # Now we need to move some things % mv vault.centos.org/8.3.2011/BaseOS/Source/SPackages/ BaseOS % mv vault.centos.org/8.3.2011/AppStream/Source/SPackages/ AppStream % mv vault.centos.org/8.3.2011/HighAvailability/Source/SPackages/ HighAvailability % mv vault.centos.org/8.3.2011/PowerTools/Source/SPackages/ PowerTools % rm -rf vault.centos.org index.html # I don't want to build modules. I'm doing that in koji, so instead, I'm moving them away. % mkdir modules % find . -type f -regextype sed -regex '.*module.*\\.rpm' -exec mv {} modules/ \\; # Now I need to remove all the old stuff # You can use repomanage on directories that are not actual repos and it will operate properly. % for x in AppStream BaseOS HighAvailability PowerTools ; do rm $(repomanage --keep=1 ${x}) ; done Actually build \u00b6 I have a kind of hacky script that takes care of this for me. You can feed it one at a time. # ~/bin/build-a-rpm #!/bin/bash PACKAGE=$1 LOGDIR=/var/www/html/src/logs/${NAME//.src.rpm/} MOCKDIR=/var/lib/mock/rocky-8-i686 mock -r rocky-8-i386 $1 if [ $? -eq 0 ]; then rm ${MOCKDIR}/result/*.src.rpm cp ${MOCKDIR}/result/*.rpm /var/www/html/src/reqs createrepo /var/www/html/src/reqs echo $1 >> /tmp/DONE else mkdir ${LOGDIR} cp ${MOCKDIR}/result/*.log ${LOGDIR} echo $1 >> /tmp/FAIL fi % build-a-rpm /var/www/html/src/mirror/BaseOS/tar-1.30-5.el8.src.rpm","title":"Bootstrap i686"},{"location":"archive/legacy/bootstrap_i686/#setup","text":"","title":"Setup"},{"location":"archive/legacy/bootstrap_i686/#install-mock-and-configuration","text":"Install mock... % yum install epel-release % yum install mock createrepo_c httpd -y % useradd rpmbuild % usermod -aG mock rpmbuild Add a proper mock configuration... % cat >> /etc/mock/rocky-8-i686.cfg << \"EOF\" # A lot of these values do not matter as they will be overridden later # with koji's mock settings config_opts['root'] = 'rocky-8-i686' config_opts['target_arch'] = 'i686' config_opts['legal_host_arches'] = ('i386', 'i486', 'i586', 'i686', 'x86_64',) config_opts['chroot_setup_cmd'] = 'install bash bzip2 coreutils cpio diffutils system-release findutils gawk gcc gcc-c++ grep gzip info make patch redhat-rpm-config rpm-build sed shadow-utils tar unzip util-linux which xz' config_opts['dist'] = 'el8' # only useful for --resultdir variable subst config_opts['macros']['%dist'] = \".el8\" config_opts['%centos_ver'] = \"8\" config_opts['macros']['%centos_ver'] = \"8\" config_opts['macros']['%rhel'] = \"8\" config_opts['macros']['%el8'] = \"1\" config_opts['macros']['%redhat'] = \"8\" config_opts['macros']['%_vendor'] = \"redhat\" config_opts['macros']['%_vendor_host'] = \"redhat\" config_opts['macros']['%_host'] = \"i686-redhat-linux-gnu\" config_opts['macros']['%vendor'] = \"Rocky Linux\" config_opts['macros']['%packager'] = \"Louis Abel <label@rockylinux.org>\" #config_opts['package_manager'] = 'yum' # no ccache in base repo #config_opts['plugin_conf']['ccache_enable'] = False #config_opts['plugin_conf']['yum_cache_enable'] = False config_opts['yum.conf'] = \"\"\" [main] cachedir=/var/cache/yum keepcache=1 debuglevel=2 reposdir=/dev/null logfile=/var/log/yum.log retries=20 obsoletes=1 gpgcheck=0 assumeyes=1 syslog_ident=mock syslog_device= exclude=*.x86_64 # We are using Fedora 28 or 29 as our bases. 28 is what we use mainly. There are # a few cases where I needed 29 instead, but they were far and few between. # In majority of builds now with the current bootstrap, Fedora is rarely used. # Even though this is the case, we still need to exclude specific packages as # they have epochs or dnf decides to use Fedora instead for whatever reason. [base_29] name=fedora 29 base baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/29/Everything/i386/os/ enabled=0 gpgcheck=0 cost=2000 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [updates_29] name=fedora 29 updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/29/Everything/i386/ enabled=0 gpgcheck=0 cost=2000 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [base_28] name=fedora 28 base baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/28/Everything/i386/os/ enabled=1 gpgcheck=0 cost=2000 priority=99 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* [updates_28] name=fedora 28 updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/28/Everything/i386/ enabled=1 gpgcheck=0 cost=2000 priority=99 exclude=gcc*,fedora-release*,gdbm-devel,gdbm,gdbm-libs,python3-libs,unbound*,gnutls*,python*,generic-release,fedora-repos,fedora-gpg-keys,perl* # These aren't ever used, but it doesn't hurt to have them here disabled. [modular] name=fedora 28 modular baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/28/Modular/i386/os/ enabled=0 gpgcheck=0 cost=2500 [modular_updates] name=fedora 28 modular updates baseurl=https://archives.fedoraproject.org/pub/archive/fedora-secondary/updates/28/Modular/i386/ enabled=0 gpgcheck=0 cost=2500 # Sometimes I enable this, but usually I just copy what's there into /reqs and # createrepo. [i686] name=i686 only baseurl=file:///var/www/html/src/i686 enabled=0 gpgcheck=0 cost=1000 # Everything we're building into a single repo. This has higher priority. [recursive] name=recursive baseurl=file:///var/www/html/src/reqs enabled=1 gpgcheck=0 cost=1000 priority=1 module_hotfixes=0 \"\"\"","title":"Install Mock and Configuration"},{"location":"archive/legacy/bootstrap_i686/#setup-the-recursive-repo","text":"So we can create an empty repo so mock/dnf is ok with that. However, that won't cut everything. We need a couple RPM's first. We can pull the noarch packages that centos has right now to get us started. % mkdir -p /var/www/html/src/{reqs,logs,mirror,hidden} # Pull required RPM's % wget http://mirror.centos.org/centos/8.3.2011/AppStream/x86_64/os/Packages/redhat-rpm-config-123-1.el8.noarch.rpm # Generate repo data % createrepo /var/www/html/src/reqs","title":"Setup the recursive repo"},{"location":"archive/legacy/bootstrap_i686/#pull-required-hidden-deps","text":"We still need some hidden dependencies. And a lot of these can be built without a problem after the above has been setup. Below is a list, which can be found on our temporary copr . You should download the source RPM's and build them. You won't find a rocky-logos or rocky-release in copr. However you may find them in our koji. Highly recommended downloading them from koji and building them. -rw-r--r-- 1 root root 569161 Apr 7 04:09 atf-0.20-11.el8.src.rpm -rw-r--r-- 1 root root 2198827 Apr 7 04:01 fonttools-3.28.0-2.el8.src.rpm -rw-r--r-- 1 root root 670398 Apr 7 04:34 kyua-0.13-1.el8.src.rpm -rw-r--r-- 1 root root 149325484 Mar 15 22:41 libabigail-1.4-2.el8.src.rpm -rw-r--r-- 1 root root 500728 Apr 7 04:19 lutok-0.4-10.el8.src.rpm -rw-r--r-- 1 root root 1107360 Aug 7 2020 nspr-4.25.0-2.el8_2.src.rpm -rw-r--r-- 1 root root 143424626 Apr 8 06:56 nss-3.53.1-17.el8.src.rpm -rw-r--r-- 1 root root 100839 Mar 14 22:38 pam_wrapper-1.0.7-1.el8.src.rpm -rw-r--r-- 1 root root 149272 Dec 21 03:56 polkit-gnome-0.106-0.2.20170423gita0763a2.el8.src.rpm -rw-r--r-- 1 root root 1507527 Mar 15 17:38 rocky-logos-83.0-1.el8.src.rpm -rw-r--r-- 1 root root 23678 Apr 9 04:04 rocky-release-8.3-5.el8.src.rpm -rw-r--r-- 1 root root 3527211 Apr 7 03:52 ttfautohint-1.8.1-3.el8.src.rpm","title":"Pull required hidden deps"},{"location":"archive/legacy/bootstrap_i686/#optional-pull-all-the-sources-from-the-vault","text":"You may need to pull all the sources from the vault. I used httrack to do this. Note that the link may die and you may need to build it yourself. Another thing is, after I pulled down the sources, I deleted all the old stuff and moved all the module packages. % cd /var/www/html/src/mirror # -sN 0 helps ignore robots % httrack https://vault.centos.org/8.3.2011/BaseOS/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/AppStream/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/HighAvailability/Source/SPackages/ -sN 0 % httrack https://vault.centos.org/8.3.2011/PowerTools/Source/SPackages/ -sN 0 # Now we need to move some things % mv vault.centos.org/8.3.2011/BaseOS/Source/SPackages/ BaseOS % mv vault.centos.org/8.3.2011/AppStream/Source/SPackages/ AppStream % mv vault.centos.org/8.3.2011/HighAvailability/Source/SPackages/ HighAvailability % mv vault.centos.org/8.3.2011/PowerTools/Source/SPackages/ PowerTools % rm -rf vault.centos.org index.html # I don't want to build modules. I'm doing that in koji, so instead, I'm moving them away. % mkdir modules % find . -type f -regextype sed -regex '.*module.*\\.rpm' -exec mv {} modules/ \\; # Now I need to remove all the old stuff # You can use repomanage on directories that are not actual repos and it will operate properly. % for x in AppStream BaseOS HighAvailability PowerTools ; do rm $(repomanage --keep=1 ${x}) ; done","title":"Optional: Pull all the sources from the vault"},{"location":"archive/legacy/bootstrap_i686/#actually-build","text":"I have a kind of hacky script that takes care of this for me. You can feed it one at a time. # ~/bin/build-a-rpm #!/bin/bash PACKAGE=$1 LOGDIR=/var/www/html/src/logs/${NAME//.src.rpm/} MOCKDIR=/var/lib/mock/rocky-8-i686 mock -r rocky-8-i386 $1 if [ $? -eq 0 ]; then rm ${MOCKDIR}/result/*.src.rpm cp ${MOCKDIR}/result/*.rpm /var/www/html/src/reqs createrepo /var/www/html/src/reqs echo $1 >> /tmp/DONE else mkdir ${LOGDIR} cp ${MOCKDIR}/result/*.log ${LOGDIR} echo $1 >> /tmp/FAIL fi % build-a-rpm /var/www/html/src/mirror/BaseOS/tar-1.30-5.el8.src.rpm","title":"Actually build"},{"location":"archive/legacy/build_steps/","text":"UPDATE2: updated version of this document published 2021-01-04 , lots of conceptual work has been done, many more things finalized This is a simple document that explains going from RHEL sources to freshly (re)-built Rocky Linux packages. It's not intended to be overly technical or specific at all, just an introduction (and general plan) to someone interested in how the process will work. The Steps: Going from RHEL 8 Source to Rocky 8 Binary Package \u00b6 1: Obtain the RHEL sources via SRPM or CentOS Git 2-3: Import RHEL source into Rocky Linux Git, replace any protected trademarks / branding from the source 4: Produce a Rocky 8 Source RPM from the Rocky Linux Git repository for the package, likely using Koji/MBS/Mock RPM build tools 5: Compile the source RPM to a Rocky 8 binary RPM using the build tools 6: Sign and test the RPM in an automatic way 7: Deploy it to the Rocky Linux repository, and distribute to users Obviously, each of these steps has a lot more to it. This document will not get in-depth about ways and means of accomplishing each step. We prefer each of these to be as automated as possible. We'll take a (short) look at each one in turn, and the various options available to achieve them: Step 1: Obtain the Source \u00b6 This is fairly straightforward. If you want to re-build RHEL 8, you need the source to RHEL 8. There are 2 main ways to do this: Download source RPM files on a RHEL machine via yum/dnf Copy them from https://git.centos.org (which are identical to RHEL and have tagged versions) The packaging team has decided to go with option #2: copying from CentOS Git. This minimizes potential legal questions with RHEL subscription terms, and is a simple operation to perform. SRPM extraction can be used in the future in case of any issues with the CentOS Git site. Tools are now being developed to perform this step in an automated fashion. CentOS (and Fedora) use an MQ messaging solution to indicate when new commits are made to a repository. We intend to consume those published messages as well to get alerted when we should build a new package. We have news that https://git.centos.org will be the actual commit location for RHEL sources in the future, so we should be in good company! Future Doc: There will be another document explaining exactly what is in the CentOS Git branches, how to navigate, etc. Steps 2-3: Import source to Git, and replace branding \u00b6 This is a big technical question-mark, and will need to be carefully considered. Each package in RHEL should have a corresponding Rocky Linux Git repository dedicated to it. For example: Rocky Linux will have a bash repository, a python3 repository, a python3-gpg repository, etc. One git repo for each package. Yes, that is a lot of git repositories. The decision from our infrastructure team is to go with a (self-hosted) Gitlab instance. This section will outline some of the major technical hurdles being considered: Second git that's private? \u00b6 It is legally questionable to host raw RHEL material due to trademark issues. There are a couple of options: Host a second, private git that holds raw RHEL sources waiting to be de-branded De-brand sources via script or patch as they are imported, and place the result into the main, public git repos Tentative Answer: Applying de-brand patches at the same time as import seems viable. So no need for a separate private repo. Git package/binary strategy \u00b6 Packages are distributed as specfiles, patches, and the upstream/original source as a tarball (.tar.gz, tar.bz2, etc.). Text files are easy enough in git, but there are different strategies for storing these upstream tar files. Answer: The agreed-upon strategy is to use a lookaside caching mechanism, just like Fedora and CentOS proper. The one used is called dist-git, and involves a separate script that downloads a tarfile that matches to a checked out git branch. If this doesn't work out, git-lfs is also a popular option for binary storage. Files/Folders, Tags/Branches layout in Git: \u00b6 Should we stick to the folders/tags/branches layout in git.centos.org? Or something quite different? Should we place debranding metadata with the project, or somewhere else? How about automated/scripted test cases? There is a lot to consider here. Tentative Answer: Our Git layout will likely mirror certain branches of packages in git.centos.org, but with different names. Debranding metadata will be kept separate, as well as metadata related to modular package builds. Step 4: Produce a Rocky Linux source RPM \u00b6 Once in a Rocky repository, the contents of a package should correspond directly to its SRPM equivalent. The debranding should be complete by this point, so a build system (Koji) will be able to point to the repository, grab the source for it, and construct our Rocky SRPM using Mock and other RPM tools. Special attention will have to be paid to the \"modular/stream\" RPMs in RHEL 8. The Modular Build System (MBS) service that interacts with Koji needs to be set up properly to accomodate this. Particulars of the build config will depend on the answers to steps 2-3 above: What folder(s) will things be in, where will the binary tar file data be located, etc. Step 5: Produce a Rocky Linux Binary RPM \u00b6 This is pretty straightforward. Once we have a valid source RPM, we use our build system to extract, compile, and produce a valid binary RPM. Again, special consideration is needed for modular/stream packages, and dependencies. Note about dependencies: Not everything required to build the packages in RHEL is available in RHEL. Some packages require other packages to be built first, and their -devel packages produced before another package will compile properly. RHEL/CentOS do not maintain a public location for these \"extra\" dependencies, but Rocky Linux plans to. There will likely be another document later spelling this information out in more detail. Once complete, we're ready to test, sign, and send it off to the official repository (and mirrors!). Step 6: Sign and Test \u00b6 RPMs produced by us should be cryptographically signed with a Rocky Linux key, which guarantees to users that the package was indeed built by the Rocky Linux project. The package will also need to be put through some testing - preferably automated. The nature of the testing is yet to be determined, but we'll want to do some sanity checks at the bare minimum before unleashing it on the world. (Is this package installable? Did we accidentally miss any files? Does it cause dnf/yum dependency conflicts? etc.) Step 7: Deploy to Repository \u00b6 Once a package is complete and tested, it will be uploaded to the Rocky Linux repository, and picked up/cloned by a network of repository mirrors around the world. The Rocky 8 source RPM will of course be uploaded as well. Users of the distro will then see it when they dnf update or dnf install ! Closing Note: \u00b6 This is version \"3\" of this document. We are now about a month into the project, and have come a long way in our understanding! The technical folks examining this have learned much in a short time, and already have working proof-of-concept RPM pipelines(!) Come join in ~Dev/Packaging on Mattermost and we're happy to discuss package/release pipeline direction. There are still several questions to answer, particularly in regards to steps 2-3. Progress is being made, though. Spelling out what needs to be done is much easier than actually accomplishing it. This document remains a work-in-progress, as more technical information comes in. This document remains a rough draft, and is likely to go through more revision as we learn more. Thanks, -Skip Grube (Mattermost) (skip77 on IRC)","title":"Rocky Build Process Overview (Revised)"},{"location":"archive/legacy/build_steps/#the-steps-going-from-rhel-8-source-to-rocky-8-binary-package","text":"1: Obtain the RHEL sources via SRPM or CentOS Git 2-3: Import RHEL source into Rocky Linux Git, replace any protected trademarks / branding from the source 4: Produce a Rocky 8 Source RPM from the Rocky Linux Git repository for the package, likely using Koji/MBS/Mock RPM build tools 5: Compile the source RPM to a Rocky 8 binary RPM using the build tools 6: Sign and test the RPM in an automatic way 7: Deploy it to the Rocky Linux repository, and distribute to users Obviously, each of these steps has a lot more to it. This document will not get in-depth about ways and means of accomplishing each step. We prefer each of these to be as automated as possible. We'll take a (short) look at each one in turn, and the various options available to achieve them:","title":"The Steps: Going from RHEL 8 Source to Rocky 8 Binary Package"},{"location":"archive/legacy/build_steps/#step-1-obtain-the-source","text":"This is fairly straightforward. If you want to re-build RHEL 8, you need the source to RHEL 8. There are 2 main ways to do this: Download source RPM files on a RHEL machine via yum/dnf Copy them from https://git.centos.org (which are identical to RHEL and have tagged versions) The packaging team has decided to go with option #2: copying from CentOS Git. This minimizes potential legal questions with RHEL subscription terms, and is a simple operation to perform. SRPM extraction can be used in the future in case of any issues with the CentOS Git site. Tools are now being developed to perform this step in an automated fashion. CentOS (and Fedora) use an MQ messaging solution to indicate when new commits are made to a repository. We intend to consume those published messages as well to get alerted when we should build a new package. We have news that https://git.centos.org will be the actual commit location for RHEL sources in the future, so we should be in good company! Future Doc: There will be another document explaining exactly what is in the CentOS Git branches, how to navigate, etc.","title":"Step 1: Obtain the Source"},{"location":"archive/legacy/build_steps/#steps-2-3-import-source-to-git-and-replace-branding","text":"This is a big technical question-mark, and will need to be carefully considered. Each package in RHEL should have a corresponding Rocky Linux Git repository dedicated to it. For example: Rocky Linux will have a bash repository, a python3 repository, a python3-gpg repository, etc. One git repo for each package. Yes, that is a lot of git repositories. The decision from our infrastructure team is to go with a (self-hosted) Gitlab instance. This section will outline some of the major technical hurdles being considered:","title":"Steps 2-3: Import source to Git, and replace branding"},{"location":"archive/legacy/build_steps/#second-git-thats-private","text":"It is legally questionable to host raw RHEL material due to trademark issues. There are a couple of options: Host a second, private git that holds raw RHEL sources waiting to be de-branded De-brand sources via script or patch as they are imported, and place the result into the main, public git repos Tentative Answer: Applying de-brand patches at the same time as import seems viable. So no need for a separate private repo.","title":"Second git that's private?"},{"location":"archive/legacy/build_steps/#git-packagebinary-strategy","text":"Packages are distributed as specfiles, patches, and the upstream/original source as a tarball (.tar.gz, tar.bz2, etc.). Text files are easy enough in git, but there are different strategies for storing these upstream tar files. Answer: The agreed-upon strategy is to use a lookaside caching mechanism, just like Fedora and CentOS proper. The one used is called dist-git, and involves a separate script that downloads a tarfile that matches to a checked out git branch. If this doesn't work out, git-lfs is also a popular option for binary storage.","title":"Git package/binary strategy"},{"location":"archive/legacy/build_steps/#filesfolders-tagsbranches-layout-in-git","text":"Should we stick to the folders/tags/branches layout in git.centos.org? Or something quite different? Should we place debranding metadata with the project, or somewhere else? How about automated/scripted test cases? There is a lot to consider here. Tentative Answer: Our Git layout will likely mirror certain branches of packages in git.centos.org, but with different names. Debranding metadata will be kept separate, as well as metadata related to modular package builds.","title":"Files/Folders, Tags/Branches layout in Git:"},{"location":"archive/legacy/build_steps/#step-4-produce-a-rocky-linux-source-rpm","text":"Once in a Rocky repository, the contents of a package should correspond directly to its SRPM equivalent. The debranding should be complete by this point, so a build system (Koji) will be able to point to the repository, grab the source for it, and construct our Rocky SRPM using Mock and other RPM tools. Special attention will have to be paid to the \"modular/stream\" RPMs in RHEL 8. The Modular Build System (MBS) service that interacts with Koji needs to be set up properly to accomodate this. Particulars of the build config will depend on the answers to steps 2-3 above: What folder(s) will things be in, where will the binary tar file data be located, etc.","title":"Step 4: Produce a Rocky Linux source RPM"},{"location":"archive/legacy/build_steps/#step-5-produce-a-rocky-linux-binary-rpm","text":"This is pretty straightforward. Once we have a valid source RPM, we use our build system to extract, compile, and produce a valid binary RPM. Again, special consideration is needed for modular/stream packages, and dependencies. Note about dependencies: Not everything required to build the packages in RHEL is available in RHEL. Some packages require other packages to be built first, and their -devel packages produced before another package will compile properly. RHEL/CentOS do not maintain a public location for these \"extra\" dependencies, but Rocky Linux plans to. There will likely be another document later spelling this information out in more detail. Once complete, we're ready to test, sign, and send it off to the official repository (and mirrors!).","title":"Step 5: Produce a Rocky Linux Binary RPM"},{"location":"archive/legacy/build_steps/#step-6-sign-and-test","text":"RPMs produced by us should be cryptographically signed with a Rocky Linux key, which guarantees to users that the package was indeed built by the Rocky Linux project. The package will also need to be put through some testing - preferably automated. The nature of the testing is yet to be determined, but we'll want to do some sanity checks at the bare minimum before unleashing it on the world. (Is this package installable? Did we accidentally miss any files? Does it cause dnf/yum dependency conflicts? etc.)","title":"Step 6: Sign and Test"},{"location":"archive/legacy/build_steps/#step-7-deploy-to-repository","text":"Once a package is complete and tested, it will be uploaded to the Rocky Linux repository, and picked up/cloned by a network of repository mirrors around the world. The Rocky 8 source RPM will of course be uploaded as well. Users of the distro will then see it when they dnf update or dnf install !","title":"Step 7: Deploy to Repository"},{"location":"archive/legacy/build_steps/#closing-note","text":"This is version \"3\" of this document. We are now about a month into the project, and have come a long way in our understanding! The technical folks examining this have learned much in a short time, and already have working proof-of-concept RPM pipelines(!) Come join in ~Dev/Packaging on Mattermost and we're happy to discuss package/release pipeline direction. There are still several questions to answer, particularly in regards to steps 2-3. Progress is being made, though. Spelling out what needs to be done is much easier than actually accomplishing it. This document remains a work-in-progress, as more technical information comes in. This document remains a rough draft, and is likely to go through more revision as we learn more. Thanks, -Skip Grube (Mattermost) (skip77 on IRC)","title":"Closing Note:"},{"location":"archive/legacy/external_package_space/","text":"This is a staging area for current work on external dependencies. Once confirmed working, items from these lists will be removed and added to the \"official\" Hidden/External Dependencies Wiki page. Packages listed should use the default \"c8\" branch, unless otherwise noted in parentheses (Remember: all perl deps built without \"module_hotfix\" dnf option, we want to build w/ default Perl 5.26 stream) To add to External build list 100: \u00b6 # Build Deps 100: (empty, for now - moved to the official page) To add to the External build list 101: \u00b6 # Build Deps 101: (empty, for now - moved to the official page) To add to the External build list 102: \u00b6 # Build Deps 102: Still being figured out: \u00b6 ################ **** Notes for Tycho build **** apache-commons-codec namespace changed between 1.11 and 1.13 From koji build log for 1.11 (https://koji.mbox.centos.org/pkgs/packages/apache-commons-codec/1.11/3.module_el8.0.0+39+6a9b6e22/data/logs/noarch/build.log) \"Provides: apache-commons-codec = 1.11-3.module_el8.0.0+39+6a9b6e22 mvn(commons-codec:commons-codec) = 1.11 mvn(commons-codec:commons-codec:pom:) = 1.11 osgi(org.apache.commons.codec) = 1.11.0\" Notice that it says it provides osgi(org.apache.commons.codec) From koji bild log for 1.13 (https://koji.mbox.centos.org/pkgs/packages/apache-commons-codec/1.13/3.module_el8.3.0+568+0c23fd64/data/logs/noarch/build.log) \"Provides: apache-commons-codec = 1.13-3.module_el8.3.0+568+0c23fd64 mvn(commons-codec:commons-codec) = 1.13 mvn(commons-codec:commons-codec:pom:) = 1.13 osgi(org.apache.commons.commons-codec) = 1.13.0\" Notice that it says it provides osgi(org.apache.commons.commons-codec) The change from 'org.apache.commons.codec' to 'org.apache.commons.commons-codec' breaks the build of tycho Patching the files in the source file org.eclipse.tycho-tycho-1.4.0.tar.xz to refer to \"org.apache.commons.commons-codec\" resolved the build. Files touched inside source file: org.eclipse.tycho-tycho-1.4.0/tycho-bundles/tycho-bundles-external/tycho-bundles-external.product org.eclipse.tycho-tycho-1.4.0/tycho-bundles/tycho-standalone-p2-director/p2 Director.product Patched tycho-bootstrap.sh as well SKIPS NOTE: Potentially patch in tycho .spec file: find . -iname \"*.product\" -type f | xargs -n 1 -I {} sed -i 's/org\\.apache\\.commons\\.codec/org\\.apache\\.commons\\.commons\\-codec/g' \"{}\" find . -iname \"*.sh\" -type f | xargs -n 1 -I {} sed -i 's/org\\.apache\\.commons\\.codec/org\\.apache\\.commons\\.commons\\-codec/g' \"{}\" ######################### Maven issues - https://pagure.io/centos-infra/issue/210, https://bugzilla.redhat.com/show_bug.cgi?id=1897375 -------------------------------------------------------------------------------------------------- Attempt to install \"maven\" package as part of setting up mock environment, as mentioned in Bugzilla report results in packaging conflicts Error: Transaction test error: file /usr/share/java/maven-resolver/maven-resolver-api.jar from install of maven-resolver-api-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-api.pom from install of maven-resolver-api-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-util.jar from install of maven-resolver-util-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-util.pom from install of maven-resolver-util-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-spi.jar from install of maven-resolver-spi-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-spi.pom from install of maven-resolver-spi-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/org.eclipse.sisu.inject.jar from install of sisu-inject-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/org.eclipse.sisu.inject.pom from install of sisu-inject-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/org.eclipse.sisu.plexus.jar from install of sisu-plexus-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/org.eclipse.sisu.plexus.pom from install of sisu-plexus-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-impl.jar from install of maven-resolver-impl-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-impl.pom from install of maven-resolver-impl-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-wagon/provider-api.jar from install of maven-wagon-provider-api-0:3.1.0-1.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-wagon-3.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-wagon/provider-api.pom from install of maven-wagon-provider-api-0:3.1.0-1.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-wagon-3.3.4-2.module_el8.3.0+568+0c23fd64.noarch ---------------------------------------------------------------------------------------------------------- Trying to build new version of maven with fix to known bug in it: https://bugzilla.redhat.com/show_bug.cgi?id=1897375 maven - c8-stream-3.6 No matching package to install: 'mvn(org.codehaus.modello:modello-maven-plugin) >= 1.10.0' No matching package to install: 'mvn(org.mockito:mockito-core) >= 2' No matching package to install: 'mvn(org.xmlunit:xmlunit-core)' No matching package to install: 'mvn(org.xmlunit:xmlunit-matchers)' dependency - slf4j-sources - produced by 'slf4j' branch c8-stream-3.6 - depends on maven?? Dependencies that we need to find packages for: \u00b6 ## Dependencies I'm not sure about, and suggested(?) packages that might provide them: ## (need to investigate these, and when found, add their packages to the list above) ## Listed as dependency first, then possible package that it comes from after: eclipse-pde -> eclipse ?? hibernate-jpa-2.0-api ?? hsqldb -> hsqldb-lib ?? pkgconfig(wayland-eglstream) ???? pkgconfig(wayland-eglstream-protocols) ???? springframework-beans ???? qt5-qtbase-doc qt5-qbase (?) mvn(avalon-framework:avalon-framework-api) avalon-framework ?? mvn(avalon-framework:avalon-framework-impl) avalon-framework ?? mvn(ch.qos.logback:logback-classic) ???? mvn(com.fasterxml.jackson:jackson-base:pom:) jackson, or fasterxml-oss-partent ?? mvn(com.fasterxml.jackson:jackson-parent:pom:) jackson, or fasterxml-oss-partent ?? mvn(com.googlecode.json-simple:json-simple) ???? mvn(com.google.code.maven-replacer-plugin:replacer) replacer ?? mvn(com.jcraft:jsch.agentproxy.connector-factory) jsch ?? mvn(com.jcraft:jsch.agentproxy.jsch) jsch ?? mvn(dom4j:dom4j) -> dom4j mvn(io.prometheus:simpleclient) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_common) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_hotspot) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_httpserver) prometheus-simpleclient-java mvn(javax.ws.rs:javax.ws.rs-api) glassfish-jax-rs-api ?? mvn(logkit:logkit) avalon-logkit ?? mvn(net.sf.ehcache:ehcache-core) ???? mvn(net.spy:spymemcached) ???? mvn(org.apache.maven.scm:maven-scm-api) maven-scm ?? mvn(org.apache.maven.scm:maven-scm-manager-plexus) maven-scm ?? mvn(org.codehaus.modello:modello-maven-plugin) modello ?? mvn(org.mockito:mockito-core) mockito ?? mvn(org.xmlunit:xmlunit-core) xmlunit mvn(org.xmlunit:xmlunit-matchers) xmlunit mvn(org.yaml:snakeyaml) snakeyaml","title":"External Package Scratch Space"},{"location":"archive/legacy/external_package_space/#to-add-to-external-build-list-100","text":"# Build Deps 100: (empty, for now - moved to the official page)","title":"To add to External build list 100:"},{"location":"archive/legacy/external_package_space/#to-add-to-the-external-build-list-101","text":"# Build Deps 101: (empty, for now - moved to the official page)","title":"To add to the External build list 101:"},{"location":"archive/legacy/external_package_space/#to-add-to-the-external-build-list-102","text":"# Build Deps 102:","title":"To add to the External build list 102:"},{"location":"archive/legacy/external_package_space/#still-being-figured-out","text":"################ **** Notes for Tycho build **** apache-commons-codec namespace changed between 1.11 and 1.13 From koji build log for 1.11 (https://koji.mbox.centos.org/pkgs/packages/apache-commons-codec/1.11/3.module_el8.0.0+39+6a9b6e22/data/logs/noarch/build.log) \"Provides: apache-commons-codec = 1.11-3.module_el8.0.0+39+6a9b6e22 mvn(commons-codec:commons-codec) = 1.11 mvn(commons-codec:commons-codec:pom:) = 1.11 osgi(org.apache.commons.codec) = 1.11.0\" Notice that it says it provides osgi(org.apache.commons.codec) From koji bild log for 1.13 (https://koji.mbox.centos.org/pkgs/packages/apache-commons-codec/1.13/3.module_el8.3.0+568+0c23fd64/data/logs/noarch/build.log) \"Provides: apache-commons-codec = 1.13-3.module_el8.3.0+568+0c23fd64 mvn(commons-codec:commons-codec) = 1.13 mvn(commons-codec:commons-codec:pom:) = 1.13 osgi(org.apache.commons.commons-codec) = 1.13.0\" Notice that it says it provides osgi(org.apache.commons.commons-codec) The change from 'org.apache.commons.codec' to 'org.apache.commons.commons-codec' breaks the build of tycho Patching the files in the source file org.eclipse.tycho-tycho-1.4.0.tar.xz to refer to \"org.apache.commons.commons-codec\" resolved the build. Files touched inside source file: org.eclipse.tycho-tycho-1.4.0/tycho-bundles/tycho-bundles-external/tycho-bundles-external.product org.eclipse.tycho-tycho-1.4.0/tycho-bundles/tycho-standalone-p2-director/p2 Director.product Patched tycho-bootstrap.sh as well SKIPS NOTE: Potentially patch in tycho .spec file: find . -iname \"*.product\" -type f | xargs -n 1 -I {} sed -i 's/org\\.apache\\.commons\\.codec/org\\.apache\\.commons\\.commons\\-codec/g' \"{}\" find . -iname \"*.sh\" -type f | xargs -n 1 -I {} sed -i 's/org\\.apache\\.commons\\.codec/org\\.apache\\.commons\\.commons\\-codec/g' \"{}\" ######################### Maven issues - https://pagure.io/centos-infra/issue/210, https://bugzilla.redhat.com/show_bug.cgi?id=1897375 -------------------------------------------------------------------------------------------------- Attempt to install \"maven\" package as part of setting up mock environment, as mentioned in Bugzilla report results in packaging conflicts Error: Transaction test error: file /usr/share/java/maven-resolver/maven-resolver-api.jar from install of maven-resolver-api-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-api.pom from install of maven-resolver-api-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-util.jar from install of maven-resolver-util-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-util.pom from install of maven-resolver-util-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-spi.jar from install of maven-resolver-spi-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-spi.pom from install of maven-resolver-spi-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/org.eclipse.sisu.inject.jar from install of sisu-inject-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/org.eclipse.sisu.inject.pom from install of sisu-inject-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/org.eclipse.sisu.plexus.jar from install of sisu-plexus-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/org.eclipse.sisu.plexus.pom from install of sisu-plexus-1:0.3.3-6.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package sisu-0.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-resolver/maven-resolver-impl.jar from install of maven-resolver-impl-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-resolver/maven-resolver-impl.pom from install of maven-resolver-impl-1:1.1.1-2.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-resolver-1.4.1-3.module_el8.3.0+568+0c23fd64.noarch file /usr/share/java/maven-wagon/provider-api.jar from install of maven-wagon-provider-api-0:3.1.0-1.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-wagon-3.3.4-2.module_el8.3.0+568+0c23fd64.noarch file /usr/share/maven-poms/maven-wagon/provider-api.pom from install of maven-wagon-provider-api-0:3.1.0-1.module_el8.0.0+39+6a9b6e22.noarch conflicts with file from package maven-wagon-3.3.4-2.module_el8.3.0+568+0c23fd64.noarch ---------------------------------------------------------------------------------------------------------- Trying to build new version of maven with fix to known bug in it: https://bugzilla.redhat.com/show_bug.cgi?id=1897375 maven - c8-stream-3.6 No matching package to install: 'mvn(org.codehaus.modello:modello-maven-plugin) >= 1.10.0' No matching package to install: 'mvn(org.mockito:mockito-core) >= 2' No matching package to install: 'mvn(org.xmlunit:xmlunit-core)' No matching package to install: 'mvn(org.xmlunit:xmlunit-matchers)' dependency - slf4j-sources - produced by 'slf4j' branch c8-stream-3.6 - depends on maven??","title":"Still being figured out:"},{"location":"archive/legacy/external_package_space/#dependencies-that-we-need-to-find-packages-for","text":"## Dependencies I'm not sure about, and suggested(?) packages that might provide them: ## (need to investigate these, and when found, add their packages to the list above) ## Listed as dependency first, then possible package that it comes from after: eclipse-pde -> eclipse ?? hibernate-jpa-2.0-api ?? hsqldb -> hsqldb-lib ?? pkgconfig(wayland-eglstream) ???? pkgconfig(wayland-eglstream-protocols) ???? springframework-beans ???? qt5-qtbase-doc qt5-qbase (?) mvn(avalon-framework:avalon-framework-api) avalon-framework ?? mvn(avalon-framework:avalon-framework-impl) avalon-framework ?? mvn(ch.qos.logback:logback-classic) ???? mvn(com.fasterxml.jackson:jackson-base:pom:) jackson, or fasterxml-oss-partent ?? mvn(com.fasterxml.jackson:jackson-parent:pom:) jackson, or fasterxml-oss-partent ?? mvn(com.googlecode.json-simple:json-simple) ???? mvn(com.google.code.maven-replacer-plugin:replacer) replacer ?? mvn(com.jcraft:jsch.agentproxy.connector-factory) jsch ?? mvn(com.jcraft:jsch.agentproxy.jsch) jsch ?? mvn(dom4j:dom4j) -> dom4j mvn(io.prometheus:simpleclient) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_common) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_hotspot) prometheus-simpleclient-java mvn(io.prometheus:simpleclient_httpserver) prometheus-simpleclient-java mvn(javax.ws.rs:javax.ws.rs-api) glassfish-jax-rs-api ?? mvn(logkit:logkit) avalon-logkit ?? mvn(net.sf.ehcache:ehcache-core) ???? mvn(net.spy:spymemcached) ???? mvn(org.apache.maven.scm:maven-scm-api) maven-scm ?? mvn(org.apache.maven.scm:maven-scm-manager-plexus) maven-scm ?? mvn(org.codehaus.modello:modello-maven-plugin) modello ?? mvn(org.mockito:mockito-core) mockito ?? mvn(org.xmlunit:xmlunit-core) xmlunit mvn(org.xmlunit:xmlunit-matchers) xmlunit mvn(org.yaml:snakeyaml) snakeyaml","title":"Dependencies that we need to find packages for:"},{"location":"archive/legacy/faq/","text":"Hello! You were likely directed here as an answer to your question in our Mattermost, IRC channels, or forums. It is likely your question is asked frequently. Below, we have the most common questions we receive and their accompanying answers. What license is Rocky Linux released under? \u00b6 3-Clause BSD Where is the \"code\" and/or build instructions for your docker image? \u00b6 There is no \"code\" for the docker image we provide (as of Rocky Linux 8). A rootfs archive is created using imagefactory and extracted within a scratch container. The docker file is located here How is Rocky Linux made? \u00b6 Skip, a member of Release Engineering, has been spending time doing a write up of how Rocky Linux 8 is currently built, which includes information on the various tools (koji, pungi, MBS, git, et al) and how they all come together. You can view it here","title":"Frequently Asked Questions"},{"location":"archive/legacy/faq/#what-license-is-rocky-linux-released-under","text":"3-Clause BSD","title":"What license is Rocky Linux released under?"},{"location":"archive/legacy/faq/#where-is-the-code-andor-build-instructions-for-your-docker-image","text":"There is no \"code\" for the docker image we provide (as of Rocky Linux 8). A rootfs archive is created using imagefactory and extracted within a scratch container. The docker file is located here","title":"Where is the \"code\" and/or build instructions for your docker image?"},{"location":"archive/legacy/faq/#how-is-rocky-linux-made","text":"Skip, a member of Release Engineering, has been spending time doing a write up of how Rocky Linux 8 is currently built, which includes information on the various tools (koji, pungi, MBS, git, et al) and how they all come together. You can view it here","title":"How is Rocky Linux made?"},{"location":"archive/legacy/hidden_deps/","text":"This page lists all hidden dependencies required to build the repos and what order they should be built in. What is a Hidden Dependency? \u00b6 This is a general term for any package that is required, but not available in any CentOS repo. However, these packages are available from git.centos.org alongside \"normal\" packages found in the repos. A further complication: there are hidden dependencies that depend on other hidden dependencies. For example, the well-known package bind depends on kyua , which is not present in any CentOS/RHEL repository. Building kyua depends on having lutok , which in turn depends on having atf . None of these are present in a \"normal\" CentOS repo. (BaseOS/AppStream/PowerTools/Extras/HA/etc.) This can get extreme, with some packages requiring 5 (or more!) layers of these \"hidden\" deps. When should these be built? \u00b6 That's an open question. A safe time to build these would be starting after \"Build Pass 6\" (or possibly 7). A strategy might be to build these completely on their own, or insert them into the \"normal package\" passes and build them concurrently. Best way to do this is still an open question. Documenting \u00b6 In an effort to document this, we are compiling layered \"lists\" of these hidden dependencies. Very similar to the work being done under \"Build_Order\" to determine dependencies of the main repos. You can almost think of these dependencies as another repo, similar to BaseOS/AppStream/PowerTools/etc. These lists are numbered, and are in order of dependency. You need to build it smallest to largest. For example: In order to build the packages from list 98, you need the ones that were built in list 97. And list 97 depends on the products from list 96, etc. (The numbers are arbitrary and don't start at 1, so new layers don't require re-labeling of all the lists) The lists: \u00b6 External Build List #92 : | Package Name | CentOS git Branch | |:------------|-------------------------| | buildsys-macros | c8 | | centpkg-minimal | c8 | External Build List #93 : Package Name CentOS git Branch javapackages-tools c8-stream-201902 (note: bootstrap java tools. contains a bunch of pre-compiled RPMs to satisfy depdencies) 04/08/2021 - pulled out of repo. Causing conflicts. perl-File-Find-Object-Rule c8 External Build List #94 : Package Name CentOS git Branch perl-Test-TrailingSpace c8 perl-XML-Filter-BufferText c8 External Build List #95 : Package Name CentOS git Branch perl-XML-SAX-Writer c8 perl-XML-SemanticDiff c8 External Build List #96 : Package Name CentOS git Branch perl-Class-Accessor-Chained c8 perl-DateTime-Event-Recurrence c8 perl-Module-Install-GithubMeta c8 perl-Set-Infinite c8 perl-strictures c8 perl-Sub-Quote c8 perl-Test-XML c8 External Build List #97 : Package Name CentOS git Branch perl-Class-ReturnValue c8 perl-Data-ICal c8 perl-DateTime-Event-ICal c8 perl-DateTime-Set c8 perl-File-Find-Object-Rule c8 perl-Moo c8 perl-Text-vFile-asData c8 perl-Tie-DataUUID c8 perl-UNIVERSAL-require c8 perl-XML-Fast c8 perl-XML-Spice c8 External Build List #98 : Package Name CentOS git Branch atf c8 javapoet c8 perl-Class-Inner c8 perl-Convert-Base64 c8 perl-CPAN-Changes c8 perl-Data-ICal-TimeZone c8 perl-DateTime-Format-ICal c8 perl-File-LibMagic c8 perl-Net-DAVTalk c8 perl-Text-LevenshteinXS c8 perl-Text-VCardFast c8 rubygem-coderay c8 tesla-polyglot c8 --with jp_minimal External Build List #99 : Package Name CentOS git Branch auto c8 beakerlib c8 centos-bookmarks c8 console-setup c8 datefudge c8 docbook5-style-xsl c8 eclipse-license2 c8 fasterxml-oss-parent c8-stream-10.6 felix-gogo-parent c8 felix-gogo-runtime c8 fonttools c8 gcab c8 imaptest c8 javapackages-tools c8-stream-201902/javapackages-tools-5.3.1-7.module+el8.2.0+5555+73059ce4 latexmk c8 libabigail c8 lutok c8 objectweb-asm (7.2) c8-stream-201902 objectweb-asm (7.3) c8-stream-rhel8 --without junit5 (needed to build byte-buddy) opentest4j c8 pam_wrapper c8 perl-BSD-Resource c8 perl-Config-IniFiles c8 perl-Font-TTF c8 perl-Mail-IMAPTalk c8 perl-Mail-JMAPTalk c8 perl-Math-Int64 c8 perl-Net-CalDAVTalk c8 perl-NNTPClient c8 perl-PerlIO-gzip c8 perl-Test-Inter c8 perl-Test-Unit c8 perl-XML-Generator c8 polkit-gnome c8 psutils c8 python3-mallard-ducktype c8 python-blinker c8 python-cryptography-vectors c8 python-httpretty c8 python-pretend c8 rubygem-kramdown c8 sassc c8 shrinkwrap c8 ttembed c8 ttfautohint c8 tycho-extras c8 univocity-parsers c8 wordnet c8 xmlgraphics-commons c8-stream-rhel8 (requires workaround setting JAVA_HOME ) xpp3 c8 External Build List #100 : Package Name CentOS git Branch apache-commons-el c8 apiguardian c8 base64coder c8 batik c8-stream-rhel8-bootstrap byte-buddy c8-stream-201902 cbi-plugins c8 decentxml c8 ecj c8 eclipse-ecf c8 --with bootstrap eclipse-emf c8 --with bootstrap felix-gogo-command c8 felix-gogo-shell c8 felix-scr c8 golang-github-cpuguy83-go-md2man c8-stream-1.0 google-gson c8 hamcrest c8-stream-201902 icu4j c8-stream-rhel8 jackson-parent c8-stream-10.6 jboss-modules c8 jetty c8 --with jp_minimal junit5 c8 kyua c8 kxml c8 lucene c8 --with jp_minimal msv c8-stream-10.6 ocaml-fileutils c8 perl-File-MMagic c8 perl-List-Pairwise c8 perl-File-Slurp-Tiny c8-stream-5.26 perl-Module-Install-ExtraTests c8 sat4j c8 xml-maven-plugin c8 External Build List #101 : Package Name CentOS git Branch catch c8 catch1 c8 ceres-solver c8 classloader-leak-test-framework c8 eclipse c8 --with bootstrap glassfish-jax-rs-api c8-stream-10.6 glslang c8 jackson-bom c8-stream-10.6 jarjar c8 java-comment-preprocessor c8 jboss-logmanager c8 maven-verifier-plugin c8 mdds (1.3) c8 mdds (1.4) c8s (-b imports/c8s/mdds-1.4.3-1.el8) mingw-w64-tools c8 mingw-libxml2 c8 mingw-pdcurses c8 mockito (2) c8-stream-201902 ocaml-calendar c8 ocaml-csv c8 ocaml-curses c8 ocaml-gettext c8 ocaml-libvirt c8 ocaml-xml-light c8 passivetex c8 PEGTL c8 perl-B-Hooks-EndOfScope c8 perl-DateTime-Format-IBeat c8 perl-Devel-Hide c8 perl-Encode-IMAPUTF7 c8 perl-ExtUtils-Config c8 perl-ExtUtils-Helpers c8 perl-ExtUtils-InstallPaths c8 perl-File-ShareDir-Install c8 perl-Test-File-ShareDir c8 perl-IO-CaptureOutput c8 perl-Crypt-OpenSSL-Guess c8 perl-Module-Install c8 perl-Module-Install-AuthorRequires c8 perl-Module-Install-AutoLicense c8 perl-Module-Install-ManifestSkip c8 perl-Module-Build-Tiny c8 perl-Module-Package c8 perl-Module-Manifest-Skip c8 perl-Net-CardDAVTalk c8 perl-Net-DNS-Resolver-Mock c8 perl-Net-DNS-Resolver-Programmable c8 perl-Net-IDN-Encode c8 perl-Net-LibIDN c8 perl-Object-Deadly c8 perl-Test-FailWarnings c8 perl-Test-File-ShareDir c8 perl-Test-InDistDir c8 perl-Test-MockModule c8 perl-Test-Needs c8 perl-Test-RequiresInternet c8 perl-Test-Without-Module c8 perl-Test2-Plugin-NoWarnings c8 perl-XML-XPathEngine c8 prometheus-simpleclient-java c8 properties-maven-plugin c8 python-bottle c8 python-hs-dbus-signature c8 python-pluggy c8-stream-3.8 --without tests python-sphinx c8 qt5-doc c8 relaxngcc c8-stream-10.6 replacer c8 screen c8 SFML c8 snakeyaml c8s spirv-headers c8 tesseract c8 ucpp c8 unicode-emoji c8 python-docutils c8 rapidjson c8-stream-8.0 rubygem-thread_order c8 perl-Expect c8-stream-5.26 perl-Perl-Version c8-stream-5.26 perl-Sort-Versions c8-stream-5.26 perl-Test-Output c8-stream-5.26 tycho c8-stream-rhel8-bootstrap (required a spec patch to build )","title":"Hidden / External Dependencies"},{"location":"archive/legacy/hidden_deps/#what-is-a-hidden-dependency","text":"This is a general term for any package that is required, but not available in any CentOS repo. However, these packages are available from git.centos.org alongside \"normal\" packages found in the repos. A further complication: there are hidden dependencies that depend on other hidden dependencies. For example, the well-known package bind depends on kyua , which is not present in any CentOS/RHEL repository. Building kyua depends on having lutok , which in turn depends on having atf . None of these are present in a \"normal\" CentOS repo. (BaseOS/AppStream/PowerTools/Extras/HA/etc.) This can get extreme, with some packages requiring 5 (or more!) layers of these \"hidden\" deps.","title":"What is a Hidden Dependency?"},{"location":"archive/legacy/hidden_deps/#when-should-these-be-built","text":"That's an open question. A safe time to build these would be starting after \"Build Pass 6\" (or possibly 7). A strategy might be to build these completely on their own, or insert them into the \"normal package\" passes and build them concurrently. Best way to do this is still an open question.","title":"When should these be built?"},{"location":"archive/legacy/hidden_deps/#documenting","text":"In an effort to document this, we are compiling layered \"lists\" of these hidden dependencies. Very similar to the work being done under \"Build_Order\" to determine dependencies of the main repos. You can almost think of these dependencies as another repo, similar to BaseOS/AppStream/PowerTools/etc. These lists are numbered, and are in order of dependency. You need to build it smallest to largest. For example: In order to build the packages from list 98, you need the ones that were built in list 97. And list 97 depends on the products from list 96, etc. (The numbers are arbitrary and don't start at 1, so new layers don't require re-labeling of all the lists)","title":"Documenting"},{"location":"archive/legacy/hidden_deps/#the-lists","text":"External Build List #92 : | Package Name | CentOS git Branch | |:------------|-------------------------| | buildsys-macros | c8 | | centpkg-minimal | c8 | External Build List #93 : Package Name CentOS git Branch javapackages-tools c8-stream-201902 (note: bootstrap java tools. contains a bunch of pre-compiled RPMs to satisfy depdencies) 04/08/2021 - pulled out of repo. Causing conflicts. perl-File-Find-Object-Rule c8 External Build List #94 : Package Name CentOS git Branch perl-Test-TrailingSpace c8 perl-XML-Filter-BufferText c8 External Build List #95 : Package Name CentOS git Branch perl-XML-SAX-Writer c8 perl-XML-SemanticDiff c8 External Build List #96 : Package Name CentOS git Branch perl-Class-Accessor-Chained c8 perl-DateTime-Event-Recurrence c8 perl-Module-Install-GithubMeta c8 perl-Set-Infinite c8 perl-strictures c8 perl-Sub-Quote c8 perl-Test-XML c8 External Build List #97 : Package Name CentOS git Branch perl-Class-ReturnValue c8 perl-Data-ICal c8 perl-DateTime-Event-ICal c8 perl-DateTime-Set c8 perl-File-Find-Object-Rule c8 perl-Moo c8 perl-Text-vFile-asData c8 perl-Tie-DataUUID c8 perl-UNIVERSAL-require c8 perl-XML-Fast c8 perl-XML-Spice c8 External Build List #98 : Package Name CentOS git Branch atf c8 javapoet c8 perl-Class-Inner c8 perl-Convert-Base64 c8 perl-CPAN-Changes c8 perl-Data-ICal-TimeZone c8 perl-DateTime-Format-ICal c8 perl-File-LibMagic c8 perl-Net-DAVTalk c8 perl-Text-LevenshteinXS c8 perl-Text-VCardFast c8 rubygem-coderay c8 tesla-polyglot c8 --with jp_minimal External Build List #99 : Package Name CentOS git Branch auto c8 beakerlib c8 centos-bookmarks c8 console-setup c8 datefudge c8 docbook5-style-xsl c8 eclipse-license2 c8 fasterxml-oss-parent c8-stream-10.6 felix-gogo-parent c8 felix-gogo-runtime c8 fonttools c8 gcab c8 imaptest c8 javapackages-tools c8-stream-201902/javapackages-tools-5.3.1-7.module+el8.2.0+5555+73059ce4 latexmk c8 libabigail c8 lutok c8 objectweb-asm (7.2) c8-stream-201902 objectweb-asm (7.3) c8-stream-rhel8 --without junit5 (needed to build byte-buddy) opentest4j c8 pam_wrapper c8 perl-BSD-Resource c8 perl-Config-IniFiles c8 perl-Font-TTF c8 perl-Mail-IMAPTalk c8 perl-Mail-JMAPTalk c8 perl-Math-Int64 c8 perl-Net-CalDAVTalk c8 perl-NNTPClient c8 perl-PerlIO-gzip c8 perl-Test-Inter c8 perl-Test-Unit c8 perl-XML-Generator c8 polkit-gnome c8 psutils c8 python3-mallard-ducktype c8 python-blinker c8 python-cryptography-vectors c8 python-httpretty c8 python-pretend c8 rubygem-kramdown c8 sassc c8 shrinkwrap c8 ttembed c8 ttfautohint c8 tycho-extras c8 univocity-parsers c8 wordnet c8 xmlgraphics-commons c8-stream-rhel8 (requires workaround setting JAVA_HOME ) xpp3 c8 External Build List #100 : Package Name CentOS git Branch apache-commons-el c8 apiguardian c8 base64coder c8 batik c8-stream-rhel8-bootstrap byte-buddy c8-stream-201902 cbi-plugins c8 decentxml c8 ecj c8 eclipse-ecf c8 --with bootstrap eclipse-emf c8 --with bootstrap felix-gogo-command c8 felix-gogo-shell c8 felix-scr c8 golang-github-cpuguy83-go-md2man c8-stream-1.0 google-gson c8 hamcrest c8-stream-201902 icu4j c8-stream-rhel8 jackson-parent c8-stream-10.6 jboss-modules c8 jetty c8 --with jp_minimal junit5 c8 kyua c8 kxml c8 lucene c8 --with jp_minimal msv c8-stream-10.6 ocaml-fileutils c8 perl-File-MMagic c8 perl-List-Pairwise c8 perl-File-Slurp-Tiny c8-stream-5.26 perl-Module-Install-ExtraTests c8 sat4j c8 xml-maven-plugin c8 External Build List #101 : Package Name CentOS git Branch catch c8 catch1 c8 ceres-solver c8 classloader-leak-test-framework c8 eclipse c8 --with bootstrap glassfish-jax-rs-api c8-stream-10.6 glslang c8 jackson-bom c8-stream-10.6 jarjar c8 java-comment-preprocessor c8 jboss-logmanager c8 maven-verifier-plugin c8 mdds (1.3) c8 mdds (1.4) c8s (-b imports/c8s/mdds-1.4.3-1.el8) mingw-w64-tools c8 mingw-libxml2 c8 mingw-pdcurses c8 mockito (2) c8-stream-201902 ocaml-calendar c8 ocaml-csv c8 ocaml-curses c8 ocaml-gettext c8 ocaml-libvirt c8 ocaml-xml-light c8 passivetex c8 PEGTL c8 perl-B-Hooks-EndOfScope c8 perl-DateTime-Format-IBeat c8 perl-Devel-Hide c8 perl-Encode-IMAPUTF7 c8 perl-ExtUtils-Config c8 perl-ExtUtils-Helpers c8 perl-ExtUtils-InstallPaths c8 perl-File-ShareDir-Install c8 perl-Test-File-ShareDir c8 perl-IO-CaptureOutput c8 perl-Crypt-OpenSSL-Guess c8 perl-Module-Install c8 perl-Module-Install-AuthorRequires c8 perl-Module-Install-AutoLicense c8 perl-Module-Install-ManifestSkip c8 perl-Module-Build-Tiny c8 perl-Module-Package c8 perl-Module-Manifest-Skip c8 perl-Net-CardDAVTalk c8 perl-Net-DNS-Resolver-Mock c8 perl-Net-DNS-Resolver-Programmable c8 perl-Net-IDN-Encode c8 perl-Net-LibIDN c8 perl-Object-Deadly c8 perl-Test-FailWarnings c8 perl-Test-File-ShareDir c8 perl-Test-InDistDir c8 perl-Test-MockModule c8 perl-Test-Needs c8 perl-Test-RequiresInternet c8 perl-Test-Without-Module c8 perl-Test2-Plugin-NoWarnings c8 perl-XML-XPathEngine c8 prometheus-simpleclient-java c8 properties-maven-plugin c8 python-bottle c8 python-hs-dbus-signature c8 python-pluggy c8-stream-3.8 --without tests python-sphinx c8 qt5-doc c8 relaxngcc c8-stream-10.6 replacer c8 screen c8 SFML c8 snakeyaml c8s spirv-headers c8 tesseract c8 ucpp c8 unicode-emoji c8 python-docutils c8 rapidjson c8-stream-8.0 rubygem-thread_order c8 perl-Expect c8-stream-5.26 perl-Perl-Version c8-stream-5.26 perl-Sort-Versions c8-stream-5.26 perl-Test-Output c8-stream-5.26 tycho c8-stream-rhel8-bootstrap (required a spec patch to build )","title":"The lists:"},{"location":"archive/legacy/koji_bootstrap/","text":"Usually builds use the internal Koji repository to satisfy dependencies. To start with, there are no packages so we need to bootstrap (as some packages needs themselves to build themselves). Tags and build tags \u00b6 Create new tags that will be the new distribution. Let's call them rocky. koji add-tag dist-rocky8 koji add-tag --parent dist-rocky8 --arches=i686,x86_64,ppc64le,aarch64 -x mock.yum.module_hotfixes=1 dist-rocky8-build koji add-target dist-rocky8 dist-rocky8-build dist-rocky8 External repositories \u00b6 Repositories from Sherif: koji add-external-repo -m bare -t dist-rocky8-build centos-8-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-debuginfo-external http://debuginfo.centos.org/8/\\$arch/","title":"Koji Bootstrap (setup)"},{"location":"archive/legacy/koji_bootstrap/#tags-and-build-tags","text":"Create new tags that will be the new distribution. Let's call them rocky. koji add-tag dist-rocky8 koji add-tag --parent dist-rocky8 --arches=i686,x86_64,ppc64le,aarch64 -x mock.yum.module_hotfixes=1 dist-rocky8-build koji add-target dist-rocky8 dist-rocky8-build dist-rocky8","title":"Tags and build tags"},{"location":"archive/legacy/koji_bootstrap/#external-repositories","text":"Repositories from Sherif: koji add-external-repo -m bare -t dist-rocky8-build centos-8-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-debuginfo-external http://debuginfo.centos.org/8/\\$arch/","title":"External repositories"},{"location":"archive/legacy/koji_setup/","text":"Overview \u00b6 This how-to is WIP and based on https://docs.pagure.org/koji/ The setup is as follows: * CentOS-8 installed * Firewall allowing communication between the hosts * Public network for access and private network for koji and kerberos communication between hosts * koji.gnulab.org/10.10.10.2 hosts koji, kojiweb, koji-hub,kojira, kerberos server, kerberos workstation \"for testing\" * builder1.gnulab.org/10.10.10.3 hosts kojid building daemon and kerberos workstation \"for testing\" * Your location machine should have kerberos workstation as well and a browser configured to use kerberos * SSL is setup for web facing services using let's encrypt, you need to sort this one out Getting kerberos up and running \u00b6 !!!THIS IS A QUICK GUIDE FOR TESTING ONLY!!! You will need to install kerberos for this setup, however I assume IPA will be in place and will be used On the koji.gnulab.org machine do the following: * Install he needed packages: dnf install krb5-server.x86_64 krb5-workstation.x86_64 -y * Edit /etc/krb5.conf to look like that # To opt out of the system crypto-policies configuration of krb5, remove the # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated. includedir /etc/krb5.conf.d/ [logging] default = FILE:/var/log/krb5libs.log kdc = FILE:/var/log/krb5kdc.log admin_server = FILE:/var/log/kadmind.log [libdefaults] dns_lookup_realm = false ticket_lifetime = 24h renew_lifetime = 7d forwardable = true rdns = false pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt spake_preauth_groups = edwards25519 default_realm = GNULAB.ORG default_ccache_name = KEYRING:persistent:%{uid} [realms] GNULAB.ORG = { kdc = koji.gnulab.org admin_server = koji.gnulab.org } [domain_realm] .gnulab.org = GNULAB.ORG gnulab.org = GNULAB.ORG Where GNULAB.ORG is your realm * Create kerberos DB and create your super secrete password for the DB: kdb5_util create -s * Edit kerberos ACL /var/kerberos/krb5kdc/kadm5.acl to look as follows: */admin@GNULAB.ORG * * Create the local admin: kadmin.local -q \"addprinc admin/admin\" * Start you services: systemctl enable krb5kdc --now && systemctl enable kadmin --now The principles \u00b6 koji needs few principles in kerberos for authentication as follows: host/kojihub@GNULAB.ORG: Used by the koji-hub server when communicating with the koji client HTTP/kojiweb@GNULAB.ORG: Used by the koji-web server when performing a negotiated Kerberos authentication with a web browser. This is a service principal for Apache\u2019s mod_auth_gssapi. koji/kojiweb@GNULAB.ORG: Used by the koji-web server during communications with the koji-hub. This is a user principal that will authenticate koji-web to Kerberos as \u201ckoji/kojiweb@GNULAB.ORG\u201d. Koji-web will proxy the mod_auth_gssapi user information to koji-hub (the ProxyPrincipals koji-hub config option). koji/kojira@GNULAB.ORG: Used by the kojira server during communications with the koji-hub compile/builder1.gnulab.org@GNULAB.ORG: Used on builder1 to communicate with the koji-hub. This is a user principal that will authenticate koji-builder to Kerberos as \u201ccompile/builder1.gnulab.org@GNULAB.ORG\u201d. Each builder host will have its own unique Kerberos user principal to authenticate to the hub. snagy@GNULAB.ORG: for my testing and package owner HTTP/koji.gnulab.org@GNULAB.ORG: to allow the client to use HTTP \"I am not sure\" And we can start creating the needed principles: * run kadmin.local then the following: addprinc host/kojihub@GNULAB.ORG addprinc HTTP/kojiweb@GNULAB.ORG addprinc koji/kojiweb@GNULAB.ORG addprinc koji/kojira@GNULAB.ORG addprinc HTTP/koji.gnulab.org@GNULAB.ORG addprinc snagy@GNULAB.ORG addprinc kojiadmin@GNULAB.ORG Now we will need to create keytab, keytab is used for non-password auth, also I guess once you do that, you won't be able to use passwords, but that is okay since most of those are services principals, not that you can use multiple files if you need to, run kadmin.local and then: ktadd -k /etc/koji.keytab host/kojihub@GNULAB.ORG ktadd -k /etc/koji.keytab HTTP/kojiweb@GNULAB.ORG ktadd -k /etc/koji.keytab koji/kojira@GNULAB.ORG ktadd -k /etc/koji.keytab koji/kojiweb@GNULAB.ORG ktadd -k /etc/koji.keytab HTTP/koji.gnulab.org@GNULAB.ORG Validation done by running klist -k -t /etc/koji.keytab Run change permissions: chmod 644 /etc/koji.keytab root# klist -k -t /etc/koji.keytab Keytab name: FILE:/etc/koji.keytab KVNO Timestamp Principal ---- ------------------- ------------------------------------------------------ 2 12/19/2020 15:00:53 koji/kojira@GNULAB.ORG 2 12/19/2020 15:00:53 koji/kojira@GNULAB.ORG 2 12/19/2020 15:01:08 koji/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:08 koji/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:14 HTTP/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:14 HTTP/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:20 host/kojihub@GNULAB.ORG 2 12/19/2020 15:01:20 host/kojihub@GNULAB.ORG 2 12/19/2020 15:38:52 HTTP/koji.gnulab.org@GNULAB.ORG 2 12/19/2020 15:38:52 HTTP/koji.gnulab.org@GNULAB.ORG Setting up koji echosystem \u00b6 We will start by setting up the DB, koji-hub, kojiweb and then kojira The Database \u00b6 On the main server koji.gnulab.org, do the following: * We need to install postgreqsl: dnf install postgresql-server -y * Init postgresql db: postgresql-setup --initdb --unit postgresql * Start the service: systemctl enable postgresql --now * Adding Koji user: useradd koji passwd koji and set a random complex password * Lets create koji DB user: su - postgres createuser --no-superuser --no-createrole --no-createdb koji createdb -O koji koji psql -c \"alter user koji with encrypted password 'mysupercomplexpassword';\" * Let's setup koji: dnf install koji -y * load the DB into postgresql: su - koji psql koji koji < /usr/share/doc/koji*/docs/schema.sql * Postgresql permissions Since my koji server lives with the postgresql, I am using socket communication instead of TCP/IP * Edit /var/lib/pgsql/data/pg_hba.conf as follows \"Order is important\": # \"local\" is for Unix domain socket connections only local koji koji trust local all all peer * Reload postgresql: systemctl reload postgresql * Create koji authenticiation for kerberos: su - koji psql <<EOF with user_id as ( insert into users (name, status, usertype) values ('kojiadmin', 0, 0) returning id ) insert into user_krb_principals (user_id, krb_principal) values ( (select id from user_id), 'kojiadmin@GNULAB.ORG'); EOF * Give the user admin permissions: su - koji psql koji=> select * from users; koji=> insert into user_perms (user_id, perm_id, creator_id) values (\"id of user inserted above\", 1, \"id of user inserted above\"); /mnt/koji and NFS \u00b6 Create the koji file system skeleton: Setup NFS and apache : dnf install nfs-utils httpd -y cd /mnt mkdir koji cd koji mkdir {packages,repos,work,scratch,repos-dist} chown apache.apache * Start the service: systemctl enable --now nfs-server Edit /etc/exports as follows: /mnt/koji 10.10.10.3(ro,sync,no_all_squash,root_squash) Export the filesystem: exportfs -ra View current state: exportfs -v On the client install the NFS client packages: dnf install nfs-utils nfs4-acl-tools -y Create the local dir: mkdir /mnt/koji Mount the NFS: mount -t nfs 10.10.10.2:/mnt/koji /mnt/koji Kojihub \u00b6 Install kojihub dnf install koji-hub mod_ssl -y Enable postgresql sweep function: systemctl enable --now koji-sweep-db.timer Enable kerberos auth in /etc/httpd/conf.d/kojihub.conf by uncomment the section below as follows: # uncomment this to enable authentication via GSSAPI <Location /kojihub/ssllogin> AuthType GSSAPI AuthName \"GSSAPI Single Sign On Login\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user </Location> koji-hub configurations as follows in /etc/koji-hub/hub.conf : [hub] DBName = koji DBUser = koji KojiDir = /mnt/koji AuthPrincipal = host/kojihub@GNULAB.ORG AuthKeytab = /etc/koji.keytab ProxyPrincipals = koji/kojiweb@GNULAB.ORG HostPrincipalFormat = compile/%s@GNULAB.ORG LoginCreatesUser = On KojiWebURL = https://koji.gnulab.org/koji NotifyOnSuccess = True Install selinux policyutils: dnf install policycoreutils-python-utils -y Lets fix some selinux stuff: setsebool -P allow_httpd_anon_write=1 setsebool -P httpd_can_network_connect 1 setsebool -P httpd_use_nfs=1 semanage fcontext -a -t public_content_rw_t \"/mnt/koji(/.*)?\" restorecon -r -v /mnt/koji ``` ## Configure koji cli client * edit **/etc/koji.conf** as follows: [koji] server = https://koji.gnulab.org/kojihub weburl = https://koji.gnulab.org/koji topurl = https://koji.gnulab.org/ topdir = /mnt/koji authtype = kerberos krb_rdns = false plugins = runroot use_fast_upload = yes * restart httpd: ```systemctl restart httpd``` * Test by running the following on koji server: * kinit -p kojiadmin@GNULAB.ORG * koji moshimoshi [root@koji ~]# kinit -p kojiadmin@GNULAB.ORG Password for kojiadmin@GNULAB.ORG: [root@koji ~]# koji moshimoshi hyl\u00f4, kojiadmin! You are using the hub at https://koji.gnulab.org/kojihub Authenticated via GSSAPI ## Kojiweb * Install kojiweb: ```dnf install koji-web -y``` * Edit **/etc/httpd/conf.d/kojiweb.conf** to allow kerberos: uncomment this to enable authentication via Kerberos \u00b6 AuthType GSSAPI AuthName \"Koji Web UI\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user ErrorDocument 401 /koji-static/errors/unauthorized.html * Edit Kojiweb configuration **/etc/kojiweb/web.conf** [web] SiteName = koji KojiHubURL = https://koji.gnulab.org/kojihub KojiFilesURL = https://koji.gnulab.org/kojifiles WebPrincipal = koji/kojiweb@GNULAB.ORG WebKeytab = /etc/koji.keytab WebCCache = /var/tmp/kojiweb.ccache KrbService = koji.gnulab.org KrbServerRealm = GNULAB.ORG LoginTimeout = 72 Secret = asdasdf12313ewdasfq234f LibPath = /usr/share/koji-web/lib LiteralFooter = True * restart apache: ```systemctl reload httpd``` ## Setting up the builder / kojid / koji-builder This will configuration will be on the building node(s) * Install koji-builder: ```dnf install koji-builder -y``` * Edit **/etc/kojid/kojid.conf** as follows: [kojid] topdir=/mnt/koji workdir=/tmp/koji server=https://koji.gnulab.org/kojihub topurl=https://koji.gnulab.org/kojifiles ; those are for building package from git.c.o and Mustafa's git allowed_scms=git.centos.org:/ :off:get_sources.sh gitlab.rockylinux.bycrates.org:/ :off:/bin/sh,/usr/bin/srpmproc_wrapper host_principal_format=compile/%s@GNULAB.ORG On koji main server, run the following commands: * Add the new builder: ```koji add-host builder1.gnulab.org x86_64``` * Add the createrepo channel: ```koji add-host-to-channel builder1.gnulab.org createrepo``` * I did adjust the capacity since it is a small machine: ```koji edit-host --capacity=8 builder1.gnulab.org``` * Note, by default kojid uses DNS to talk to koji-hub, so you need to have SRV record in your DNS as follows: _kerberos._udp IN SRV 10 100 88 kerberos.GNULAB.ORG. * Kojid looks for **/etc/kojid/kojid.keytab** by default, so you need to create a file with compile principle as above and place it in the right location on builder node(s) kadmin.local addprinc compile/builder1.gnulab.org@GNULAB.ORG ktadd -k /tmp/kojid.keytab compile/builder1.gnulab.org@GNULAB.ORG On the builder node, restart kojid: ```systemctl enable kojid --now``` ## Kojira * Install koji-utils: ```dnf install koji-utils -y``` * Add kojira user and give it permission for repo koji add-user koji/kojira koji grant-permission repo koji/kojira * Edit **/etc/kojira/kojira.conf** as following: [kojira] server=https://koji.gnulab.org/kojihub topdir=/mnt/koji logfile=/var/log/kojira.log principal = koji/kojira@GNULAB.ORG keytab = /etc/koji.keytab * Start Kojira service: ```systemctl enable kojira --now``` # Koji bootstrapping I went with the external repo method to bootstrap the setup, so I added external repos and create the following tags and targets, this work is based on: https://docs.pagure.org/koji/external_repo_server_bootstrap/ On the main node, run the following: * Add your final dist tag: ```koji add-tag dist-rocky8``` * Create the build tag: ```koji add-tag --parent dist-rocky8 --arches \"x86_64\" -x mock.yum.module_hotfixes=1 dist-rocky8-build``` * Add the external repos, I hard coded the ARCH, but you can use \\$arch instaed of x86_64 in the repo URL: koji add-external-repo -m bare -t dist-rocky8-build centos-8-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t dist-rocky8-build centos-8-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ * I also created a small package for centospkg-minimal and srpmproc and create local repo, so adding that too: koji add-external-repo -m bare -t dist-rocky8-build centos-8-local-repo-external https://koji.gnulab.org/localrepo/\\$arch/ * Add the targets: ```koji add-target dist-rocky8 dist-rocky8-build dist-rocky8``` * Create the bootstrapping groups for build and srpm-build koji add-group dist-rocky8-build build koji add-group dist-rocky8-build srpm-build * Add the bootstrapping packages: koji add-group-pkg dist-rocky8-build build bash buildsys-macros-el8 bzip2 centos-release centpkg-minimal coreutils cpio diffutils findutils gawk gcc gcc-c++ grep gzip info make module-build-macros patch redhat-rpm-config rpm-build scl-utils-build sed shadow-utils tar unzip util-linux which xz git srpmproc koji add-group-pkg dist-rocky8-build srpm-build bash buildsys-macros-el8 centos-release centpkg-minimal git redhat-rpm-config rpm-build scl-utils-build shadow-utils system-release srpmproc * Regenerating the repos ```koji regen-repo dist-rocky8-build``` # Running a test I ran the following test to build package from git.centos.org: ```koji add-user snagy``` ```koji add-pkg --owner snagy dist-rocky8 python36``` \"need to check if this is needed\" koji build dist-rocky8 'git+https://git.centos.org/git/rpms/python36.git?#f900ab6403fbd9c22e59f5d463fee210b3278fb3' ``` * Results at: https://koji.gnulab.org/koji/taskinfo?taskID=321","title":"Koji setup"},{"location":"archive/legacy/koji_setup/#overview","text":"This how-to is WIP and based on https://docs.pagure.org/koji/ The setup is as follows: * CentOS-8 installed * Firewall allowing communication between the hosts * Public network for access and private network for koji and kerberos communication between hosts * koji.gnulab.org/10.10.10.2 hosts koji, kojiweb, koji-hub,kojira, kerberos server, kerberos workstation \"for testing\" * builder1.gnulab.org/10.10.10.3 hosts kojid building daemon and kerberos workstation \"for testing\" * Your location machine should have kerberos workstation as well and a browser configured to use kerberos * SSL is setup for web facing services using let's encrypt, you need to sort this one out","title":"Overview"},{"location":"archive/legacy/koji_setup/#getting-kerberos-up-and-running","text":"!!!THIS IS A QUICK GUIDE FOR TESTING ONLY!!! You will need to install kerberos for this setup, however I assume IPA will be in place and will be used On the koji.gnulab.org machine do the following: * Install he needed packages: dnf install krb5-server.x86_64 krb5-workstation.x86_64 -y * Edit /etc/krb5.conf to look like that # To opt out of the system crypto-policies configuration of krb5, remove the # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated. includedir /etc/krb5.conf.d/ [logging] default = FILE:/var/log/krb5libs.log kdc = FILE:/var/log/krb5kdc.log admin_server = FILE:/var/log/kadmind.log [libdefaults] dns_lookup_realm = false ticket_lifetime = 24h renew_lifetime = 7d forwardable = true rdns = false pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt spake_preauth_groups = edwards25519 default_realm = GNULAB.ORG default_ccache_name = KEYRING:persistent:%{uid} [realms] GNULAB.ORG = { kdc = koji.gnulab.org admin_server = koji.gnulab.org } [domain_realm] .gnulab.org = GNULAB.ORG gnulab.org = GNULAB.ORG Where GNULAB.ORG is your realm * Create kerberos DB and create your super secrete password for the DB: kdb5_util create -s * Edit kerberos ACL /var/kerberos/krb5kdc/kadm5.acl to look as follows: */admin@GNULAB.ORG * * Create the local admin: kadmin.local -q \"addprinc admin/admin\" * Start you services: systemctl enable krb5kdc --now && systemctl enable kadmin --now","title":"Getting kerberos up and running"},{"location":"archive/legacy/koji_setup/#the-principles","text":"koji needs few principles in kerberos for authentication as follows: host/kojihub@GNULAB.ORG: Used by the koji-hub server when communicating with the koji client HTTP/kojiweb@GNULAB.ORG: Used by the koji-web server when performing a negotiated Kerberos authentication with a web browser. This is a service principal for Apache\u2019s mod_auth_gssapi. koji/kojiweb@GNULAB.ORG: Used by the koji-web server during communications with the koji-hub. This is a user principal that will authenticate koji-web to Kerberos as \u201ckoji/kojiweb@GNULAB.ORG\u201d. Koji-web will proxy the mod_auth_gssapi user information to koji-hub (the ProxyPrincipals koji-hub config option). koji/kojira@GNULAB.ORG: Used by the kojira server during communications with the koji-hub compile/builder1.gnulab.org@GNULAB.ORG: Used on builder1 to communicate with the koji-hub. This is a user principal that will authenticate koji-builder to Kerberos as \u201ccompile/builder1.gnulab.org@GNULAB.ORG\u201d. Each builder host will have its own unique Kerberos user principal to authenticate to the hub. snagy@GNULAB.ORG: for my testing and package owner HTTP/koji.gnulab.org@GNULAB.ORG: to allow the client to use HTTP \"I am not sure\" And we can start creating the needed principles: * run kadmin.local then the following: addprinc host/kojihub@GNULAB.ORG addprinc HTTP/kojiweb@GNULAB.ORG addprinc koji/kojiweb@GNULAB.ORG addprinc koji/kojira@GNULAB.ORG addprinc HTTP/koji.gnulab.org@GNULAB.ORG addprinc snagy@GNULAB.ORG addprinc kojiadmin@GNULAB.ORG Now we will need to create keytab, keytab is used for non-password auth, also I guess once you do that, you won't be able to use passwords, but that is okay since most of those are services principals, not that you can use multiple files if you need to, run kadmin.local and then: ktadd -k /etc/koji.keytab host/kojihub@GNULAB.ORG ktadd -k /etc/koji.keytab HTTP/kojiweb@GNULAB.ORG ktadd -k /etc/koji.keytab koji/kojira@GNULAB.ORG ktadd -k /etc/koji.keytab koji/kojiweb@GNULAB.ORG ktadd -k /etc/koji.keytab HTTP/koji.gnulab.org@GNULAB.ORG Validation done by running klist -k -t /etc/koji.keytab Run change permissions: chmod 644 /etc/koji.keytab root# klist -k -t /etc/koji.keytab Keytab name: FILE:/etc/koji.keytab KVNO Timestamp Principal ---- ------------------- ------------------------------------------------------ 2 12/19/2020 15:00:53 koji/kojira@GNULAB.ORG 2 12/19/2020 15:00:53 koji/kojira@GNULAB.ORG 2 12/19/2020 15:01:08 koji/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:08 koji/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:14 HTTP/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:14 HTTP/kojiweb@GNULAB.ORG 2 12/19/2020 15:01:20 host/kojihub@GNULAB.ORG 2 12/19/2020 15:01:20 host/kojihub@GNULAB.ORG 2 12/19/2020 15:38:52 HTTP/koji.gnulab.org@GNULAB.ORG 2 12/19/2020 15:38:52 HTTP/koji.gnulab.org@GNULAB.ORG","title":"The principles"},{"location":"archive/legacy/koji_setup/#setting-up-koji-echosystem","text":"We will start by setting up the DB, koji-hub, kojiweb and then kojira","title":"Setting up koji echosystem"},{"location":"archive/legacy/koji_setup/#the-database","text":"On the main server koji.gnulab.org, do the following: * We need to install postgreqsl: dnf install postgresql-server -y * Init postgresql db: postgresql-setup --initdb --unit postgresql * Start the service: systemctl enable postgresql --now * Adding Koji user: useradd koji passwd koji and set a random complex password * Lets create koji DB user: su - postgres createuser --no-superuser --no-createrole --no-createdb koji createdb -O koji koji psql -c \"alter user koji with encrypted password 'mysupercomplexpassword';\" * Let's setup koji: dnf install koji -y * load the DB into postgresql: su - koji psql koji koji < /usr/share/doc/koji*/docs/schema.sql * Postgresql permissions Since my koji server lives with the postgresql, I am using socket communication instead of TCP/IP * Edit /var/lib/pgsql/data/pg_hba.conf as follows \"Order is important\": # \"local\" is for Unix domain socket connections only local koji koji trust local all all peer * Reload postgresql: systemctl reload postgresql * Create koji authenticiation for kerberos: su - koji psql <<EOF with user_id as ( insert into users (name, status, usertype) values ('kojiadmin', 0, 0) returning id ) insert into user_krb_principals (user_id, krb_principal) values ( (select id from user_id), 'kojiadmin@GNULAB.ORG'); EOF * Give the user admin permissions: su - koji psql koji=> select * from users; koji=> insert into user_perms (user_id, perm_id, creator_id) values (\"id of user inserted above\", 1, \"id of user inserted above\");","title":"The Database"},{"location":"archive/legacy/koji_setup/#mntkoji-and-nfs","text":"Create the koji file system skeleton: Setup NFS and apache : dnf install nfs-utils httpd -y cd /mnt mkdir koji cd koji mkdir {packages,repos,work,scratch,repos-dist} chown apache.apache * Start the service: systemctl enable --now nfs-server Edit /etc/exports as follows: /mnt/koji 10.10.10.3(ro,sync,no_all_squash,root_squash) Export the filesystem: exportfs -ra View current state: exportfs -v On the client install the NFS client packages: dnf install nfs-utils nfs4-acl-tools -y Create the local dir: mkdir /mnt/koji Mount the NFS: mount -t nfs 10.10.10.2:/mnt/koji /mnt/koji","title":"/mnt/koji and NFS"},{"location":"archive/legacy/koji_setup/#kojihub","text":"Install kojihub dnf install koji-hub mod_ssl -y Enable postgresql sweep function: systemctl enable --now koji-sweep-db.timer Enable kerberos auth in /etc/httpd/conf.d/kojihub.conf by uncomment the section below as follows: # uncomment this to enable authentication via GSSAPI <Location /kojihub/ssllogin> AuthType GSSAPI AuthName \"GSSAPI Single Sign On Login\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user </Location> koji-hub configurations as follows in /etc/koji-hub/hub.conf : [hub] DBName = koji DBUser = koji KojiDir = /mnt/koji AuthPrincipal = host/kojihub@GNULAB.ORG AuthKeytab = /etc/koji.keytab ProxyPrincipals = koji/kojiweb@GNULAB.ORG HostPrincipalFormat = compile/%s@GNULAB.ORG LoginCreatesUser = On KojiWebURL = https://koji.gnulab.org/koji NotifyOnSuccess = True Install selinux policyutils: dnf install policycoreutils-python-utils -y Lets fix some selinux stuff: setsebool -P allow_httpd_anon_write=1 setsebool -P httpd_can_network_connect 1 setsebool -P httpd_use_nfs=1 semanage fcontext -a -t public_content_rw_t \"/mnt/koji(/.*)?\" restorecon -r -v /mnt/koji ``` ## Configure koji cli client * edit **/etc/koji.conf** as follows: [koji] server = https://koji.gnulab.org/kojihub weburl = https://koji.gnulab.org/koji topurl = https://koji.gnulab.org/ topdir = /mnt/koji authtype = kerberos krb_rdns = false plugins = runroot use_fast_upload = yes * restart httpd: ```systemctl restart httpd``` * Test by running the following on koji server: * kinit -p kojiadmin@GNULAB.ORG * koji moshimoshi [root@koji ~]# kinit -p kojiadmin@GNULAB.ORG Password for kojiadmin@GNULAB.ORG: [root@koji ~]# koji moshimoshi hyl\u00f4, kojiadmin! You are using the hub at https://koji.gnulab.org/kojihub Authenticated via GSSAPI ## Kojiweb * Install kojiweb: ```dnf install koji-web -y``` * Edit **/etc/httpd/conf.d/kojiweb.conf** to allow kerberos:","title":"Kojihub"},{"location":"archive/legacy/koji_setup/#uncomment-this-to-enable-authentication-via-kerberos","text":"AuthType GSSAPI AuthName \"Koji Web UI\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user ErrorDocument 401 /koji-static/errors/unauthorized.html * Edit Kojiweb configuration **/etc/kojiweb/web.conf** [web] SiteName = koji KojiHubURL = https://koji.gnulab.org/kojihub KojiFilesURL = https://koji.gnulab.org/kojifiles WebPrincipal = koji/kojiweb@GNULAB.ORG WebKeytab = /etc/koji.keytab WebCCache = /var/tmp/kojiweb.ccache KrbService = koji.gnulab.org KrbServerRealm = GNULAB.ORG LoginTimeout = 72 Secret = asdasdf12313ewdasfq234f LibPath = /usr/share/koji-web/lib LiteralFooter = True * restart apache: ```systemctl reload httpd``` ## Setting up the builder / kojid / koji-builder This will configuration will be on the building node(s) * Install koji-builder: ```dnf install koji-builder -y``` * Edit **/etc/kojid/kojid.conf** as follows: [kojid] topdir=/mnt/koji workdir=/tmp/koji server=https://koji.gnulab.org/kojihub topurl=https://koji.gnulab.org/kojifiles ; those are for building package from git.c.o and Mustafa's git allowed_scms=git.centos.org:/ :off:get_sources.sh gitlab.rockylinux.bycrates.org:/ :off:/bin/sh,/usr/bin/srpmproc_wrapper host_principal_format=compile/%s@GNULAB.ORG On koji main server, run the following commands: * Add the new builder: ```koji add-host builder1.gnulab.org x86_64``` * Add the createrepo channel: ```koji add-host-to-channel builder1.gnulab.org createrepo``` * I did adjust the capacity since it is a small machine: ```koji edit-host --capacity=8 builder1.gnulab.org``` * Note, by default kojid uses DNS to talk to koji-hub, so you need to have SRV record in your DNS as follows: _kerberos._udp IN SRV 10 100 88 kerberos.GNULAB.ORG. * Kojid looks for **/etc/kojid/kojid.keytab** by default, so you need to create a file with compile principle as above and place it in the right location on builder node(s) kadmin.local addprinc compile/builder1.gnulab.org@GNULAB.ORG ktadd -k /tmp/kojid.keytab compile/builder1.gnulab.org@GNULAB.ORG On the builder node, restart kojid: ```systemctl enable kojid --now``` ## Kojira * Install koji-utils: ```dnf install koji-utils -y``` * Add kojira user and give it permission for repo koji add-user koji/kojira koji grant-permission repo koji/kojira * Edit **/etc/kojira/kojira.conf** as following: [kojira] server=https://koji.gnulab.org/kojihub topdir=/mnt/koji logfile=/var/log/kojira.log principal = koji/kojira@GNULAB.ORG keytab = /etc/koji.keytab * Start Kojira service: ```systemctl enable kojira --now``` # Koji bootstrapping I went with the external repo method to bootstrap the setup, so I added external repos and create the following tags and targets, this work is based on: https://docs.pagure.org/koji/external_repo_server_bootstrap/ On the main node, run the following: * Add your final dist tag: ```koji add-tag dist-rocky8``` * Create the build tag: ```koji add-tag --parent dist-rocky8 --arches \"x86_64\" -x mock.yum.module_hotfixes=1 dist-rocky8-build``` * Add the external repos, I hard coded the ARCH, but you can use \\$arch instaed of x86_64 in the repo URL: koji add-external-repo -m bare -t dist-rocky8-build centos-8-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t dist-rocky8-build centos-8-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t dist-rocky8-build centos-8-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ * I also created a small package for centospkg-minimal and srpmproc and create local repo, so adding that too: koji add-external-repo -m bare -t dist-rocky8-build centos-8-local-repo-external https://koji.gnulab.org/localrepo/\\$arch/ * Add the targets: ```koji add-target dist-rocky8 dist-rocky8-build dist-rocky8``` * Create the bootstrapping groups for build and srpm-build koji add-group dist-rocky8-build build koji add-group dist-rocky8-build srpm-build * Add the bootstrapping packages: koji add-group-pkg dist-rocky8-build build bash buildsys-macros-el8 bzip2 centos-release centpkg-minimal coreutils cpio diffutils findutils gawk gcc gcc-c++ grep gzip info make module-build-macros patch redhat-rpm-config rpm-build scl-utils-build sed shadow-utils tar unzip util-linux which xz git srpmproc koji add-group-pkg dist-rocky8-build srpm-build bash buildsys-macros-el8 centos-release centpkg-minimal git redhat-rpm-config rpm-build scl-utils-build shadow-utils system-release srpmproc * Regenerating the repos ```koji regen-repo dist-rocky8-build``` # Running a test I ran the following test to build package from git.centos.org: ```koji add-user snagy``` ```koji add-pkg --owner snagy dist-rocky8 python36``` \"need to check if this is needed\" koji build dist-rocky8 'git+https://git.centos.org/git/rpms/python36.git?#f900ab6403fbd9c22e59f5d463fee210b3278fb3' ``` * Results at: https://koji.gnulab.org/koji/taskinfo?taskID=321","title":"uncomment this to enable authentication via Kerberos"},{"location":"archive/legacy/mbs_installation/","text":"Overview \u00b6 This how-to is WIP and based on https://pagure.io/fm-orchestrator The setup is as follows: * Currently we are testing mbs 2.32 * CentOS-8 installed * Firewall allowing communication between the hosts * Public network for access and private network for koji, psql and kerberos communication between hosts * mbs.gnulab.org/10.10.10.4 hosts mbs and fedmsg * SSL is setup for web facing services using let's encrypt and there is a directory services setup, you need to sort this one out Installing mbs and fedmsg \u00b6 !!!THIS IS A QUICK GUIDE FOR TESTING ONLY!!! * Currently we are installing using pip from the source, however the latest version is available at: https://copr.fedorainfracloud.org/coprs/nalika/rockylinux-tools/packages/ * Enable the current temp rockylinux-tools repo by running dnf copr enable nalika/rockylinux-tools * Install the needed packages: dnf install epel-release -y && dnf install fedmsg python3-gssapi git httpd mod_ssl python3-mod_wsgi python3-solv python3-pungi python3-psycopg2 mod_auth_gssapi -y git clone https://pagure.io/fm-orchestrator.git cd fm-orchestrator git checkout v2.32.0 pip3 install . Starting fedmsg \u00b6 We need fedmsg-hub and fedmsg-relay to get things up and running \"as far as I can tell\" but I disable fedora's incoming messages and message signing * Edit /etc/fedmsg.d/endpoints.py and comment out \"tcp://hub.fedoraproject.org:9940\" * Edit /etc/fedmsg.d/module_build_service.py as following \"leave everything else as is\": # \"tcp://stg.fedoraproject.org:9940\" ] }, # Start of code signing configuration 'sign_messages': False, 'validate_signatures': False, * Edit /etc/fedmsg.d/ssl.py and make sure validate_signatures is set to false config = dict( sign_messages=False, validate_signatures=False, * Edit /etc/fedmsg.d/base.py and set the topic_prefix=\"org.gnulab\" and environment=\"prod\" * Start fedmsg-hub and fedmsg-relay service systemctl enable fedmsg-hub --now systemctl enable fedmsg-relay --now Apache configuration for mbs-frontend \u00b6 Create a new file /etc/httpd/conf.d/mbs.conf with the following: <IfModule mod_ssl.c> <VirtualHost *:443> ServerName mbs.gnulab.org WSGIDaemonProcess mbs user=mbs group=mbs threads=5 WSGIScriptAlias / /etc/module-build-service/mbs.wsgi WSGIPassAuthorization on <Directory /etc/module-build-service> WSGIProcessGroup mbs WSGIApplicationGroup %{GLOBAL} Require all granted </Directory> <Location /> AuthType GSSAPI AuthName \"GSSAPI Single Sign On Login\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user </Location> SSLCertificateFile /etc/letsencrypt/live/mbs.gnulab.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/mbs.gnulab.org/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf </VirtualHost> </IfModule> Create the wsgi file /etc/module-build-service/mbs.wsgi as follows: import logging logging.basicConfig(level=logging.DEBUG) from module_build_service import app as application Kerberos settings \u00b6 Make sure that /etc/krb5.conf as the correct realm and settings as following: # To opt out of the system crypto-policies configuration of krb5, remove the # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated. includedir /etc/krb5.conf.d/ [logging] default = FILE:/var/log/krb5libs.log kdc = FILE:/var/log/krb5kdc.log admin_server = FILE:/var/log/kadmind.log [libdefaults] dns_lookup_realm = false ticket_lifetime = 24h renew_lifetime = 7d forwardable = true rdns = false pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt spake_preauth_groups = edwards25519 default_realm = GNULAB.ORG default_ccache_name = KEYRING:persistent:%{uid} [realms] GNULAB.ORG = { kdc = koji.gnulab.org admin_server = koji.gnulab.org } [domain_realm] .gnulab.org = GNULAB.ORG gnulab.org = GNULAB.ORG General mbs's setup \u00b6 Create mbs user and set a password for it as following: useradd mbs passwd mbs Fix the permissions for /etc/module-build-service/ to mbs: chown -R mbs:mbs /etc/module-build-service/ Postgresql configuration \u00b6 I am using the same database server for koji which is hosted on koji.gnulab.org * Create the required access by editing /var/lib/pgsql/data/pg_hba.conf as the following: # IPv4 local connections: host mbs mbs 10.10.10.4/32 md5 host all all 127.0.0.1/32 ident * Edit /var/lib/pgsql/data/postgresql.conf to allow listening on network listen_addresses = 'localhost,10.10.10.2' * Create mbs pgsql user and database createuser --no-superuser --no-createrole --no-createdb mbs createdb -O mbs mbs psql -c \"alter user mbs with encrypted password 'mysupersecretepasswordmbs';\" * Restart pgsql systemctl restart postgresql mbs configuration \u00b6 Edit /etc/module-build-service/koji.conf as the follows: [koji] ;configuration for koji cli tool ;url of XMLRPC server server = https://koji.gnulab.org/kojihub ;url of web interface weburl = https://koji.gnulab.org/koji ;url of package download site topurl = https://koji.gnulab.org/ authtype = kerberos krb_rdns = false use_fast_upload = true [staging] server = https://koji.gnulab.org/kojihub weburl = https://koji.gnulab.org/koji topurl = https://koji.gnulab.org/ authtype = kerberos krb_rdns = false use_fast_upload = true Edit /etc/module-build-service/config.py as follows: # -*- coding: utf-8 -*- # SPDX-License-Identifier: MIT from os import environ, path # FIXME: workaround for this moment till confdir, dbdir (installdir etc.) are # declared properly somewhere/somehow confdir = path.abspath(path.dirname(__file__)) # use parent dir as dbdir else fallback to current dir dbdir = path.abspath(path.join(confdir, \"..\")) if confdir.endswith(\"conf\") else confdir class ProdConfiguration(object): DEBUG = True # Make this random (used to generate session keys) SECRET_KEY = \"74d9e9f9cd40e66fc6c4c2e9987dce48df3ce98542529126\" #SQLALCHEMY_DATABASE_URI = \"sqlite:///{0}\".format(path.join(dbdir, \"module_build_service.db\")) SQLALCHEMY_DATABASE_URI = 'postgresql://mbs:mysupersecretepasswordmbs@koji.gnulab.org/mbs' SQLALCHEMY_TRACK_MODIFICATIONS = True # Where we should run when running \"manage.py run\" directly. HOST = \"0.0.0.0\" PORT = 5000 # Global network-related values, in seconds NET_TIMEOUT = 120 NET_RETRY_INTERVAL = 30 #DISTGITS = {\"git+https://git.centos.org\": (\"git clone {repo_path}\", \"get_sources.sh\")} SYSTEM = \"koji\" MESSAGING = \"fedmsg\" # or amq MESSAGING_TOPIC_PREFIX = [\"org.gnulab.prod\"] KOJI_CONFIG = \"/etc/module-build-service/koji.conf\" KOJI_PROFILE = \"koji\" ARCHES = [\"x86_64\"] ALLOW_ARCH_OVERRIDE = False KOJI_REPOSITORY_URL = \"https://koji.gnulab.org/kojifiles/repos\" KOJI_TAG_PREFIXES = [\"module\", \"scrmod\"] KOJI_ENABLE_CONTENT_GENERATOR = True CHECK_FOR_EOL = False PDC_URL = \"https://pdc.fedoraproject.org/rest_api/v1\" PDC_INSECURE = False PDC_DEVELOP = True SCMURLS = [\"git+https://git.centos.org/\", \"https://git.centos.org/\"] YAML_SUBMIT_ALLOWED = False # How often should we resort to polling, in seconds # Set to zero to disable polling POLLING_INTERVAL = 600 # Determines how many builds that can be submitted to the builder # and be in the build state at a time. Set this to 0 for no restrictions NUM_CONCURRENT_BUILDS = 5 ALLOW_CUSTOM_SCMURLS = False RPMS_DEFAULT_REPOSITORY = \"git+https://git.centos.org/rpms/\" RPMS_ALLOW_REPOSITORY = False #RPMS_DEFAULT_CACHE = \"http://pkgs.fedoraproject.org/repo/pkgs/\" RPMS_ALLOW_CACHE = False MODULES_DEFAULT_REPOSITORY = \"git+https://git.centos.org/modules/\" MODULES_ALLOW_REPOSITORY = False MODULES_ALLOW_SCRATCH = True ALLOW_ONLY_COMPATIBLE_BASE_MODULES = True ALLOWED_GROUPS_TO_IMPORT_MODULE = set() # Available backends are: console and file LOG_BACKEND = \"file\" # Path to log file when LOG_BACKEND is set to \"file\". LOG_FILE = \"/tmp/module_build_service.log\" # Available log levels are: debug, info, warn, error. LOG_LEVEL = \"debug\" # Allow stream override ALLOW_STREAM_OVERRIDE_FROM_SCM = True # Settings for Kerberos KRB_KEYTAB = \"/etc/mbs.keytab\" KRB_PRINCIPAL = \"mbs@GNULAB.ORG\" # AMQ prefixed variables are required only while using 'amq' as messaging backend # Addresses to listen to AMQ_RECV_ADDRESSES = [ \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.koji\", \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.module_build_service\", ] # Address for sending messages AMQ_DEST_ADDRESS = \\ \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.module_build_service\" AMQ_CERT_FILE = \"/etc/module_build_service/msg-m8y-client.crt\" AMQ_PRIVATE_KEY_FILE = \"/etc/module_build_service/msg-m8y-client.key\" AMQ_TRUSTED_CERT_FILE = \"/etc/module_build_service/Root-CA.crt\" # Disable Client Authorization NO_AUTH = False AUTH_METHOD = \"kerberos\" LDAP_URI = \"ldap://koji.gnulab.org\" LDAP_GROUPS_DN = \"ou=group,dc=gnulab,dc=org\" ADMIN_GROUPS = {\"packageradmin\"} ALLOWED_GROUPS = {\"packager\"} KOJI_CG_DEVEL_MODULE = True KOJI_PROXYUSER = True REBUILD_STRATEGY = 'only-changed' REBUILD_STRATEGY_ALLOW_OVERRIDE = True KOJI_CG_BUILD_TAG_TEMPLATE = \"{}-modular-updates-candidate\" KOJI_CG_DEFAULT_BUILD_TAG = \"modular-updates-candidate\" # Extra options set for newly created Koji tags KOJI_TAG_EXTRA_OPTS = { \"mock.package_manager\": \"dnf\", # This is needed to include all the Koji builds (and therefore # all the packages) from all inherited tags into this tag. # See https://pagure.io/koji/issue/588 and # https://pagure.io/fm-orchestrator/issue/660 for background. \"repo_include_all\": True, # Has been requested by Fedora infra in # https://pagure.io/fedora-infrastructure/issue/7620. # Disables systemd-nspawn for chroot. \"mock.new_chroot\": 0, # Works around fail-safe mechanism added in DNF 4.2.7 # https://pagure.io/fedora-infrastructure/issue/8410 \"mock.yum.module_hotfixes\": 1, } # DEFAULT_DIST_TAG_PREFIX = 'module_' Create the logging file /tmp/module_build_service.log and set the correct permission: touch /tmp/module_build_service.log chown mbs:fedmsg /tmp/module_build_service.log chmod 664 /tmp/module_build_service.log Restart services : systemctl restart fedmsg-hub systemctl restart fedmsg-relay systemctl restart httpd Testing the module build service \u00b6 We will need to create a few tags for this to work, so on the koji admin machine, run the following commands: * Creating tags: koji add-tag module-centos-8.2.0-build koji add-tag module-centos-8.3.0-build * Adding the external mirrors for the build tags: koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-sheriflocalrepo-external https://koji.gnulab.org/localrepo/\\$arch/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-sheriflocalrepo-external https://koji.gnulab.org/localrepo/\\$arch/ * Add mbs user: koji add-user mbs * Fix the content generating for koji On Koji server, run the follwing commands koji call addBType module koji grant-cg-access mbs module-build-service --new Now, on mbs server, we will need to do the following: * Upgrade mbs db mbs-manager db upgrade`` * Download the platform modules git clone https://git.centos.org/modules/platform * Switch to the needed branche and loading it git branch -a git checkout c8-stream-el8.2.0 mbs-manager import_module platform.yaml git checkout c8-stream-el8.3.0 mbs-manager import_module platform.yaml * Create the module build json file, for example **redis.json** { \"scmurl\": \"https://git.centos.org/modules/redis.git?#f042b198bcbc0fe410be219f27cd041deea7bcc3\", \"branch\": \"c8-stream-5\" } * Generate your kerberos ticket kinit snagy * Submit the job curl -X POST -H \"Content-Type: application/json\" -u : --negotiate -d @redis.json https://mbs.gnulab.org/module-build-service/1/module-builds/``` * Check Tasks on koji","title":"Module-build-service \"mbs\" setup"},{"location":"archive/legacy/mbs_installation/#overview","text":"This how-to is WIP and based on https://pagure.io/fm-orchestrator The setup is as follows: * Currently we are testing mbs 2.32 * CentOS-8 installed * Firewall allowing communication between the hosts * Public network for access and private network for koji, psql and kerberos communication between hosts * mbs.gnulab.org/10.10.10.4 hosts mbs and fedmsg * SSL is setup for web facing services using let's encrypt and there is a directory services setup, you need to sort this one out","title":"Overview"},{"location":"archive/legacy/mbs_installation/#installing-mbs-and-fedmsg","text":"!!!THIS IS A QUICK GUIDE FOR TESTING ONLY!!! * Currently we are installing using pip from the source, however the latest version is available at: https://copr.fedorainfracloud.org/coprs/nalika/rockylinux-tools/packages/ * Enable the current temp rockylinux-tools repo by running dnf copr enable nalika/rockylinux-tools * Install the needed packages: dnf install epel-release -y && dnf install fedmsg python3-gssapi git httpd mod_ssl python3-mod_wsgi python3-solv python3-pungi python3-psycopg2 mod_auth_gssapi -y git clone https://pagure.io/fm-orchestrator.git cd fm-orchestrator git checkout v2.32.0 pip3 install .","title":"Installing mbs and fedmsg"},{"location":"archive/legacy/mbs_installation/#starting-fedmsg","text":"We need fedmsg-hub and fedmsg-relay to get things up and running \"as far as I can tell\" but I disable fedora's incoming messages and message signing * Edit /etc/fedmsg.d/endpoints.py and comment out \"tcp://hub.fedoraproject.org:9940\" * Edit /etc/fedmsg.d/module_build_service.py as following \"leave everything else as is\": # \"tcp://stg.fedoraproject.org:9940\" ] }, # Start of code signing configuration 'sign_messages': False, 'validate_signatures': False, * Edit /etc/fedmsg.d/ssl.py and make sure validate_signatures is set to false config = dict( sign_messages=False, validate_signatures=False, * Edit /etc/fedmsg.d/base.py and set the topic_prefix=\"org.gnulab\" and environment=\"prod\" * Start fedmsg-hub and fedmsg-relay service systemctl enable fedmsg-hub --now systemctl enable fedmsg-relay --now","title":"Starting fedmsg"},{"location":"archive/legacy/mbs_installation/#apache-configuration-for-mbs-frontend","text":"Create a new file /etc/httpd/conf.d/mbs.conf with the following: <IfModule mod_ssl.c> <VirtualHost *:443> ServerName mbs.gnulab.org WSGIDaemonProcess mbs user=mbs group=mbs threads=5 WSGIScriptAlias / /etc/module-build-service/mbs.wsgi WSGIPassAuthorization on <Directory /etc/module-build-service> WSGIProcessGroup mbs WSGIApplicationGroup %{GLOBAL} Require all granted </Directory> <Location /> AuthType GSSAPI AuthName \"GSSAPI Single Sign On Login\" GssapiCredStore keytab:/etc/koji.keytab Require valid-user </Location> SSLCertificateFile /etc/letsencrypt/live/mbs.gnulab.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/mbs.gnulab.org/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf </VirtualHost> </IfModule> Create the wsgi file /etc/module-build-service/mbs.wsgi as follows: import logging logging.basicConfig(level=logging.DEBUG) from module_build_service import app as application","title":"Apache configuration for mbs-frontend"},{"location":"archive/legacy/mbs_installation/#kerberos-settings","text":"Make sure that /etc/krb5.conf as the correct realm and settings as following: # To opt out of the system crypto-policies configuration of krb5, remove the # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated. includedir /etc/krb5.conf.d/ [logging] default = FILE:/var/log/krb5libs.log kdc = FILE:/var/log/krb5kdc.log admin_server = FILE:/var/log/kadmind.log [libdefaults] dns_lookup_realm = false ticket_lifetime = 24h renew_lifetime = 7d forwardable = true rdns = false pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt spake_preauth_groups = edwards25519 default_realm = GNULAB.ORG default_ccache_name = KEYRING:persistent:%{uid} [realms] GNULAB.ORG = { kdc = koji.gnulab.org admin_server = koji.gnulab.org } [domain_realm] .gnulab.org = GNULAB.ORG gnulab.org = GNULAB.ORG","title":"Kerberos settings"},{"location":"archive/legacy/mbs_installation/#general-mbss-setup","text":"Create mbs user and set a password for it as following: useradd mbs passwd mbs Fix the permissions for /etc/module-build-service/ to mbs: chown -R mbs:mbs /etc/module-build-service/","title":"General mbs's setup"},{"location":"archive/legacy/mbs_installation/#postgresql-configuration","text":"I am using the same database server for koji which is hosted on koji.gnulab.org * Create the required access by editing /var/lib/pgsql/data/pg_hba.conf as the following: # IPv4 local connections: host mbs mbs 10.10.10.4/32 md5 host all all 127.0.0.1/32 ident * Edit /var/lib/pgsql/data/postgresql.conf to allow listening on network listen_addresses = 'localhost,10.10.10.2' * Create mbs pgsql user and database createuser --no-superuser --no-createrole --no-createdb mbs createdb -O mbs mbs psql -c \"alter user mbs with encrypted password 'mysupersecretepasswordmbs';\" * Restart pgsql systemctl restart postgresql","title":"Postgresql configuration"},{"location":"archive/legacy/mbs_installation/#mbs-configuration","text":"Edit /etc/module-build-service/koji.conf as the follows: [koji] ;configuration for koji cli tool ;url of XMLRPC server server = https://koji.gnulab.org/kojihub ;url of web interface weburl = https://koji.gnulab.org/koji ;url of package download site topurl = https://koji.gnulab.org/ authtype = kerberos krb_rdns = false use_fast_upload = true [staging] server = https://koji.gnulab.org/kojihub weburl = https://koji.gnulab.org/koji topurl = https://koji.gnulab.org/ authtype = kerberos krb_rdns = false use_fast_upload = true Edit /etc/module-build-service/config.py as follows: # -*- coding: utf-8 -*- # SPDX-License-Identifier: MIT from os import environ, path # FIXME: workaround for this moment till confdir, dbdir (installdir etc.) are # declared properly somewhere/somehow confdir = path.abspath(path.dirname(__file__)) # use parent dir as dbdir else fallback to current dir dbdir = path.abspath(path.join(confdir, \"..\")) if confdir.endswith(\"conf\") else confdir class ProdConfiguration(object): DEBUG = True # Make this random (used to generate session keys) SECRET_KEY = \"74d9e9f9cd40e66fc6c4c2e9987dce48df3ce98542529126\" #SQLALCHEMY_DATABASE_URI = \"sqlite:///{0}\".format(path.join(dbdir, \"module_build_service.db\")) SQLALCHEMY_DATABASE_URI = 'postgresql://mbs:mysupersecretepasswordmbs@koji.gnulab.org/mbs' SQLALCHEMY_TRACK_MODIFICATIONS = True # Where we should run when running \"manage.py run\" directly. HOST = \"0.0.0.0\" PORT = 5000 # Global network-related values, in seconds NET_TIMEOUT = 120 NET_RETRY_INTERVAL = 30 #DISTGITS = {\"git+https://git.centos.org\": (\"git clone {repo_path}\", \"get_sources.sh\")} SYSTEM = \"koji\" MESSAGING = \"fedmsg\" # or amq MESSAGING_TOPIC_PREFIX = [\"org.gnulab.prod\"] KOJI_CONFIG = \"/etc/module-build-service/koji.conf\" KOJI_PROFILE = \"koji\" ARCHES = [\"x86_64\"] ALLOW_ARCH_OVERRIDE = False KOJI_REPOSITORY_URL = \"https://koji.gnulab.org/kojifiles/repos\" KOJI_TAG_PREFIXES = [\"module\", \"scrmod\"] KOJI_ENABLE_CONTENT_GENERATOR = True CHECK_FOR_EOL = False PDC_URL = \"https://pdc.fedoraproject.org/rest_api/v1\" PDC_INSECURE = False PDC_DEVELOP = True SCMURLS = [\"git+https://git.centos.org/\", \"https://git.centos.org/\"] YAML_SUBMIT_ALLOWED = False # How often should we resort to polling, in seconds # Set to zero to disable polling POLLING_INTERVAL = 600 # Determines how many builds that can be submitted to the builder # and be in the build state at a time. Set this to 0 for no restrictions NUM_CONCURRENT_BUILDS = 5 ALLOW_CUSTOM_SCMURLS = False RPMS_DEFAULT_REPOSITORY = \"git+https://git.centos.org/rpms/\" RPMS_ALLOW_REPOSITORY = False #RPMS_DEFAULT_CACHE = \"http://pkgs.fedoraproject.org/repo/pkgs/\" RPMS_ALLOW_CACHE = False MODULES_DEFAULT_REPOSITORY = \"git+https://git.centos.org/modules/\" MODULES_ALLOW_REPOSITORY = False MODULES_ALLOW_SCRATCH = True ALLOW_ONLY_COMPATIBLE_BASE_MODULES = True ALLOWED_GROUPS_TO_IMPORT_MODULE = set() # Available backends are: console and file LOG_BACKEND = \"file\" # Path to log file when LOG_BACKEND is set to \"file\". LOG_FILE = \"/tmp/module_build_service.log\" # Available log levels are: debug, info, warn, error. LOG_LEVEL = \"debug\" # Allow stream override ALLOW_STREAM_OVERRIDE_FROM_SCM = True # Settings for Kerberos KRB_KEYTAB = \"/etc/mbs.keytab\" KRB_PRINCIPAL = \"mbs@GNULAB.ORG\" # AMQ prefixed variables are required only while using 'amq' as messaging backend # Addresses to listen to AMQ_RECV_ADDRESSES = [ \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.koji\", \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.module_build_service\", ] # Address for sending messages AMQ_DEST_ADDRESS = \\ \"amqps://messaging.mydomain.com/Consumer.m8y.VirtualTopic.eng.module_build_service\" AMQ_CERT_FILE = \"/etc/module_build_service/msg-m8y-client.crt\" AMQ_PRIVATE_KEY_FILE = \"/etc/module_build_service/msg-m8y-client.key\" AMQ_TRUSTED_CERT_FILE = \"/etc/module_build_service/Root-CA.crt\" # Disable Client Authorization NO_AUTH = False AUTH_METHOD = \"kerberos\" LDAP_URI = \"ldap://koji.gnulab.org\" LDAP_GROUPS_DN = \"ou=group,dc=gnulab,dc=org\" ADMIN_GROUPS = {\"packageradmin\"} ALLOWED_GROUPS = {\"packager\"} KOJI_CG_DEVEL_MODULE = True KOJI_PROXYUSER = True REBUILD_STRATEGY = 'only-changed' REBUILD_STRATEGY_ALLOW_OVERRIDE = True KOJI_CG_BUILD_TAG_TEMPLATE = \"{}-modular-updates-candidate\" KOJI_CG_DEFAULT_BUILD_TAG = \"modular-updates-candidate\" # Extra options set for newly created Koji tags KOJI_TAG_EXTRA_OPTS = { \"mock.package_manager\": \"dnf\", # This is needed to include all the Koji builds (and therefore # all the packages) from all inherited tags into this tag. # See https://pagure.io/koji/issue/588 and # https://pagure.io/fm-orchestrator/issue/660 for background. \"repo_include_all\": True, # Has been requested by Fedora infra in # https://pagure.io/fedora-infrastructure/issue/7620. # Disables systemd-nspawn for chroot. \"mock.new_chroot\": 0, # Works around fail-safe mechanism added in DNF 4.2.7 # https://pagure.io/fedora-infrastructure/issue/8410 \"mock.yum.module_hotfixes\": 1, } # DEFAULT_DIST_TAG_PREFIX = 'module_' Create the logging file /tmp/module_build_service.log and set the correct permission: touch /tmp/module_build_service.log chown mbs:fedmsg /tmp/module_build_service.log chmod 664 /tmp/module_build_service.log Restart services : systemctl restart fedmsg-hub systemctl restart fedmsg-relay systemctl restart httpd","title":"mbs configuration"},{"location":"archive/legacy/mbs_installation/#testing-the-module-build-service","text":"We will need to create a few tags for this to work, so on the koji admin machine, run the following commands: * Creating tags: koji add-tag module-centos-8.2.0-build koji add-tag module-centos-8.3.0-build * Adding the external mirrors for the build tags: koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ koji add-external-repo -m bare -t module-centos-8.2.0-build module-cent-8.2-sheriflocalrepo-external https://koji.gnulab.org/localrepo/\\$arch/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-baseos-external http://mirror.centos.org/centos-8/8.3.2011/BaseOS/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-appstream-external http://mirror.centos.org/centos-8/8.3.2011/AppStream/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-devel-external http://mirror.centos.org/centos-8/8.3.2011/Devel/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-ha-external http://mirror.centos.org/centos-8/8.3.2011/HighAvailability/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-pt-external http://mirror.centos.org/centos-8/8.3.2011/PowerTools/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-cp-external http://mirror.centos.org/centos-8/8.3.2011/centosplus/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-cr-external http://mirror.centos.org/centos-8/8.3.2011/cr/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-extras-external http://mirror.centos.org/centos-8/8.3.2011/extras/\\$arch/os/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-fasttrack-external http://mirror.centos.org/centos-8/8.3.2011/fasttrack/\\$arch/os koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-debuginfo-external http://debuginfo.centos.org/8/\\$arch/ koji add-external-repo -m bare -t module-centos-8.3.0-build module-cent-8.3-sheriflocalrepo-external https://koji.gnulab.org/localrepo/\\$arch/ * Add mbs user: koji add-user mbs * Fix the content generating for koji On Koji server, run the follwing commands koji call addBType module koji grant-cg-access mbs module-build-service --new Now, on mbs server, we will need to do the following: * Upgrade mbs db mbs-manager db upgrade`` * Download the platform modules git clone https://git.centos.org/modules/platform * Switch to the needed branche and loading it git branch -a git checkout c8-stream-el8.2.0 mbs-manager import_module platform.yaml git checkout c8-stream-el8.3.0 mbs-manager import_module platform.yaml * Create the module build json file, for example **redis.json** { \"scmurl\": \"https://git.centos.org/modules/redis.git?#f042b198bcbc0fe410be219f27cd041deea7bcc3\", \"branch\": \"c8-stream-5\" } * Generate your kerberos ticket kinit snagy * Submit the job curl -X POST -H \"Content-Type: application/json\" -u : --negotiate -d @redis.json https://mbs.gnulab.org/module-build-service/1/module-builds/``` * Check Tasks on koji","title":"Testing the module build service"},{"location":"archive/legacy/mock_building_guide/","text":"If you're interested in helping with Rocky Linux packaging effort, we could use you! One of the critical things we need done is to figure out which order the packages need to be built, and determine any outside/external build dependencies. Read more to see what we mean: What Needs to be Done? \u00b6 Many source packages in RHEL/CentOS will not build properly by themselves. Often, you need some RPMs produced from other packages built first, and available as dependencies. Our Mission: is to help the release engineering team by identifying these chains of dependencies, and figuring out which order we need to build things in. Additionally, we need to identify any external dependencies that the package builds require. All of this information must be documented so we can build the initial version of Rocky Linux (Based on RHEL/CentOS 8.3). We are building a complete copy of CentOS 8.3 (from the CentOS repositories) and taking notes on it. Types of Package Dependencies/Failures \u00b6 1: Devel dependencies within the distro These dependencies (often in the form of \"-devel\" RPMs) are not available in the regular CentOS repositories (BaseOS, AppStream, PowerTools), but must be produced by first building other packages. For example, the package curl requires libmetalink-devel to build properly. The libmetalink-devel RPM is not available in the default repositories, you must produce it by taking the libmetalink source RPM and compiling it. 2: Dependencies outside the distro Some packages require packages at build-time which are not in the CentOS/RHEL repositories at all. These must be identified, compiled to RPMs, and made available to our build process. Fortunately, these \"external\" dependencies are all located at https://git.centos.org . They can be checked out with the proper branch and compiled to SRPMs and then RPMs. 3: Build time failures Some packages just fail to build for other reasons when using the default Mock build settings. We must investigate these failures and figure out workarounds. And most importantly, take notes on how we solved the issues. For example, some RPMs related to the Java maven tool will refuse to build without a /etc/maven.conf file present. We can set our Mock tool up to create a blank maven.conf and work around this requirement. We need to make a note of this, because it's something extra that needs to be done in order for the build to succeed. How do we do this? \u00b6 Building RPM packages in the modern era is done via the mock build tool. ( https://github.com/rpm-software-management/mock ) Mock creates a blank chroot and installs a minimal system inside it. It then builds the source RPMs via classic rpmbuild tool inside the chroot. This guarantees that only the packages that are actually required for the build process are present, and no extra dependencies accidentally creep in. Using and Installing Mock \u00b6 Mock is a simple tool written in Python, and is widely available. It's in the EPEL repo under CentOS/RHEL 8, and is even available in some Debian based distros. We are using Mock version 2.6 (default in EPEL 8) for our research builds here. Mock is easy to use: mock -r /etc/mock/myconfig.cfg --nocheck --resultdir=/path/to/results curl-7.61.1-14.el8.1.src.rpm The mock configuration lets you specify what gets put in your minimal chroot, and what repositories DNF will use when setting up the build. Fortunately, we have a standardized mock config you can download and use yourself (linked below), so you don't have to go through and set everything up yourself. Log files will be written to your results path during the build. If the build was successful, the resulting RPMs will also be present there. Reading Mock Output \u00b6 Mock produces log files with standard/consistent names during each build. The most important ones that we care about are: root.log and build.log . Root.log details the process that was used to set up the chroot environment. It shows what commands were issued, and especially what packages were installed. A missing dependency will usually show up here, when mock will attempt to dnf install a dependency and not find it. Build.log details the actual package build process. This includes the compilation step(s) for whatever langauge the packaged software was written in (C, C++, Java, Rust, etc.). It also includes any other steps/scripts outlined in the .spec file that get performed. Build failures that don't involve dependencies usually show up in here. Links and Next Steps (How to Start Helping!) \u00b6 We are tracking the results of this effort on the Wiki. If you click \"Browse\" in the top left, and navigate to Development -> Build_Order , you'll see many pages that refer to \"Build passes\". A build pass is very simple: Use mock to attempt to build all ~3000 packages in CentOS, using only the default BaseOS, AppStream, and PowerTools repositories. Record which packages passed, and which ones failed to build. As well as what RPM files were produced from doing the build pass. (this is what is in those wiki pages) Take the produced RPMs and add them to repositories, so the next build pass can use them as dependencies. DO IT AGAIN! (and again, and again...) Once we've built everything, we will use these pages as a reference. We now know what order we need to feed these Fortunately, Skip Grube has a server and is executing these build passes. We need help troubleshooting individual packages. Read on... Where we need help: \u00b6 We've done enough build passes now that we have most (but not all) of the dependencies lined up in order. We need to investigate the remaining failed packages and determine why they are failing. We must answer questions like: Is the package failing because it needs a dependency? Is it external, or will it be automatically produced in one of the build passes? Is it failing because of some other error? How you can help exactly (with links!): \u00b6 Step 0: Get familiar with the Mock build tool and its configuration. Learn how to build SRPMs, and how to check out branches from git.centos.org , turn them into SRPMs, and compile them with Mock. Step 1: The latest build pass (as of this document) is #10. So here are the build failures: https://wiki.rockylinux.org/en/team/development/Build_Order/Build_Pass_10_Failure Pick one to investigate, and make sure it's NOT on this list of packages we have already solved: https://wiki.rockylinux.org/en/team/development/Package_Error_Tracking Step 2: You can view the Mock build logs for that failed package under here: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ (sorted by repo and package name). Step 3: Once you've investigated the log(s), try to build the package yourself, in your own mock. Our exact Mock configurations are available here: https://rocky.lowend.ninja/RockyDevel/mock_configs/ (sorted by build pass number), and SRPMs are available from CentOS here: https://vault.centos.org/8.3.2011/ (sorted by repo) Step 4: This is the tricky part, and involves troubleshooting skills. Why exactly is the package failing? How do you get the build to succeed? This may involve hunting dependencies, fiddling with the .spec file in the SRPM, or playing with mock options. Step 5: If you solve one, please TELL US ABOUT IT! Hop over to chat.rockylinux.org . We hang out in the #Dev/Packaging channel, and are always listening! Ping @Skip Grube or @Michael Young and let us know how you fixed it! We'll add it to our knowledge base as soon as we can, and thanks!","title":"Mock building guide"},{"location":"archive/legacy/mock_building_guide/#what-needs-to-be-done","text":"Many source packages in RHEL/CentOS will not build properly by themselves. Often, you need some RPMs produced from other packages built first, and available as dependencies. Our Mission: is to help the release engineering team by identifying these chains of dependencies, and figuring out which order we need to build things in. Additionally, we need to identify any external dependencies that the package builds require. All of this information must be documented so we can build the initial version of Rocky Linux (Based on RHEL/CentOS 8.3). We are building a complete copy of CentOS 8.3 (from the CentOS repositories) and taking notes on it.","title":"What Needs to be Done?"},{"location":"archive/legacy/mock_building_guide/#types-of-package-dependenciesfailures","text":"1: Devel dependencies within the distro These dependencies (often in the form of \"-devel\" RPMs) are not available in the regular CentOS repositories (BaseOS, AppStream, PowerTools), but must be produced by first building other packages. For example, the package curl requires libmetalink-devel to build properly. The libmetalink-devel RPM is not available in the default repositories, you must produce it by taking the libmetalink source RPM and compiling it. 2: Dependencies outside the distro Some packages require packages at build-time which are not in the CentOS/RHEL repositories at all. These must be identified, compiled to RPMs, and made available to our build process. Fortunately, these \"external\" dependencies are all located at https://git.centos.org . They can be checked out with the proper branch and compiled to SRPMs and then RPMs. 3: Build time failures Some packages just fail to build for other reasons when using the default Mock build settings. We must investigate these failures and figure out workarounds. And most importantly, take notes on how we solved the issues. For example, some RPMs related to the Java maven tool will refuse to build without a /etc/maven.conf file present. We can set our Mock tool up to create a blank maven.conf and work around this requirement. We need to make a note of this, because it's something extra that needs to be done in order for the build to succeed.","title":"Types of Package Dependencies/Failures"},{"location":"archive/legacy/mock_building_guide/#how-do-we-do-this","text":"Building RPM packages in the modern era is done via the mock build tool. ( https://github.com/rpm-software-management/mock ) Mock creates a blank chroot and installs a minimal system inside it. It then builds the source RPMs via classic rpmbuild tool inside the chroot. This guarantees that only the packages that are actually required for the build process are present, and no extra dependencies accidentally creep in.","title":"How do we do this?"},{"location":"archive/legacy/mock_building_guide/#using-and-installing-mock","text":"Mock is a simple tool written in Python, and is widely available. It's in the EPEL repo under CentOS/RHEL 8, and is even available in some Debian based distros. We are using Mock version 2.6 (default in EPEL 8) for our research builds here. Mock is easy to use: mock -r /etc/mock/myconfig.cfg --nocheck --resultdir=/path/to/results curl-7.61.1-14.el8.1.src.rpm The mock configuration lets you specify what gets put in your minimal chroot, and what repositories DNF will use when setting up the build. Fortunately, we have a standardized mock config you can download and use yourself (linked below), so you don't have to go through and set everything up yourself. Log files will be written to your results path during the build. If the build was successful, the resulting RPMs will also be present there.","title":"Using and Installing Mock"},{"location":"archive/legacy/mock_building_guide/#reading-mock-output","text":"Mock produces log files with standard/consistent names during each build. The most important ones that we care about are: root.log and build.log . Root.log details the process that was used to set up the chroot environment. It shows what commands were issued, and especially what packages were installed. A missing dependency will usually show up here, when mock will attempt to dnf install a dependency and not find it. Build.log details the actual package build process. This includes the compilation step(s) for whatever langauge the packaged software was written in (C, C++, Java, Rust, etc.). It also includes any other steps/scripts outlined in the .spec file that get performed. Build failures that don't involve dependencies usually show up in here.","title":"Reading Mock Output"},{"location":"archive/legacy/mock_building_guide/#links-and-next-steps-how-to-start-helping","text":"We are tracking the results of this effort on the Wiki. If you click \"Browse\" in the top left, and navigate to Development -> Build_Order , you'll see many pages that refer to \"Build passes\". A build pass is very simple: Use mock to attempt to build all ~3000 packages in CentOS, using only the default BaseOS, AppStream, and PowerTools repositories. Record which packages passed, and which ones failed to build. As well as what RPM files were produced from doing the build pass. (this is what is in those wiki pages) Take the produced RPMs and add them to repositories, so the next build pass can use them as dependencies. DO IT AGAIN! (and again, and again...) Once we've built everything, we will use these pages as a reference. We now know what order we need to feed these Fortunately, Skip Grube has a server and is executing these build passes. We need help troubleshooting individual packages. Read on...","title":"Links and Next Steps (How to Start Helping!)"},{"location":"archive/legacy/mock_building_guide/#where-we-need-help","text":"We've done enough build passes now that we have most (but not all) of the dependencies lined up in order. We need to investigate the remaining failed packages and determine why they are failing. We must answer questions like: Is the package failing because it needs a dependency? Is it external, or will it be automatically produced in one of the build passes? Is it failing because of some other error?","title":"Where we need help:"},{"location":"archive/legacy/mock_building_guide/#how-you-can-help-exactly-with-links","text":"Step 0: Get familiar with the Mock build tool and its configuration. Learn how to build SRPMs, and how to check out branches from git.centos.org , turn them into SRPMs, and compile them with Mock. Step 1: The latest build pass (as of this document) is #10. So here are the build failures: https://wiki.rockylinux.org/en/team/development/Build_Order/Build_Pass_10_Failure Pick one to investigate, and make sure it's NOT on this list of packages we have already solved: https://wiki.rockylinux.org/en/team/development/Package_Error_Tracking Step 2: You can view the Mock build logs for that failed package under here: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ (sorted by repo and package name). Step 3: Once you've investigated the log(s), try to build the package yourself, in your own mock. Our exact Mock configurations are available here: https://rocky.lowend.ninja/RockyDevel/mock_configs/ (sorted by build pass number), and SRPMs are available from CentOS here: https://vault.centos.org/8.3.2011/ (sorted by repo) Step 4: This is the tricky part, and involves troubleshooting skills. Why exactly is the package failing? How do you get the build to succeed? This may involve hunting dependencies, fiddling with the .spec file in the SRPM, or playing with mock options. Step 5: If you solve one, please TELL US ABOUT IT! Hop over to chat.rockylinux.org . We hang out in the #Dev/Packaging channel, and are always listening! Ping @Skip Grube or @Michael Young and let us know how you fixed it! We'll add it to our knowledge base as soon as we can, and thanks!","title":"How you can help exactly (with links!):"},{"location":"archive/legacy/modularity/","text":"There are some packages that utilise a functionality called streams. Modularity makes it possible to have multiple versions of the same package in the same repository and enables version switching. To be able to build module packages, we are using something called Module Build Service , MBS for short. It is also called fm-orchestrator . Packages that have modular entries should not be built directly from their dist/ repository as that will not tag that package correctly as a stream. The correct {name}.yaml file is generated during import with srpmproc and is derived from SOURCES/modulemd.src.txt . Koji setup \u00b6 MBS should be able to use content generators so Koji can manage artifacts. To enable content generation run the following queries against the database: insert into content_generator (name) values ('module-build-service'); insert into btype (name) values ('module'); Grant the mbs user on koji cg-access with: koji grant-cg-access mbs module-build-service Also create a tag named modular-updates-candidate with: koji add-tag modular-updates-candidate Modular packages should be added to this tag. MBS \u00b6 Latest MBS version is required. Version 2.32 lacks the mock.yum.module_hotfixes=1 flag on the tags and DNF fail-safe mechanisms break the build. More info on Modularity here and how we utilise MBS","title":"Modularity"},{"location":"archive/legacy/modularity/#koji-setup","text":"MBS should be able to use content generators so Koji can manage artifacts. To enable content generation run the following queries against the database: insert into content_generator (name) values ('module-build-service'); insert into btype (name) values ('module'); Grant the mbs user on koji cg-access with: koji grant-cg-access mbs module-build-service Also create a tag named modular-updates-candidate with: koji add-tag modular-updates-candidate Modular packages should be added to this tag.","title":"Koji setup"},{"location":"archive/legacy/modularity/#mbs","text":"Latest MBS version is required. Version 2.32 lacks the mock.yum.module_hotfixes=1 flag on the tags and DNF fail-safe mechanisms break the build. More info on Modularity here and how we utilise MBS","title":"MBS"},{"location":"archive/legacy/module_build_order/","text":"Analysis of when to build the various modules: Modules consist of packages, some which require building non-modular packages (or even other modules) first. This is an attempt to group modules with a build order list, to ensure all the packages in a given stream will build. Methodology : This list is produced by comparing a list of raw packages in a module, and the lists of succeeding packages in the build order pass lists. When all the packages in a module complete their build, we take a note of the last/latest package to build, and which build pass that was. The module should be built with the packages in that build pass, as that is when all packages are guaranteed to complete. (all dependencies fulfilled) Module Build Order List \u00b6 (These modules have all their packages building successfully, and they will build properly in the listed build pass/batch) Build Pass 1: - 389-ds : 1 - freeradius : 1 - go-toolset : 1 - httpd : 1 - mailman : 1 - mercurial : 1 - perl-App-cpanminus : 1 - perl-DBD-MySQL : 1 - perl-DBD-Pg : 1 - perl-DBD-SQLite : 1 - perl-DBI : 1 - perl-FCGI : 1 - perl-YAML : 1 - php : 1 - python36 : 1 - redis : 1 - squid : 1 Build Pass 2: - inkscape : 2 - javapackages-runtime : 2 Build Pass 3: - gimp : 3 Build Pass 4: - ant : 4 - mod-auth-openidc : 4 - postgresql : 4 Build Pass 6: - mariadb : 6 Build Pass 9: - mysql : 9 - parfait : 9 - perl-IO-Socket-SSL : 9 - perl-libwww-perl : 9 Unsure Modules \u00b6 (These modules still have packages failing, so we are not 100% sure which build pass they should go in) container-tools : unsure idm : 6...? javapackages-tools : 9+ jmc : 9+ llvm-libs : 1, but i686 packages failed (should be ok w/ MBS?) maven : 9+ nginx : 2? (only 1 version not building) nodejs : almost nothing built yet perl : 10+ (most built by 9) pki-core : 8+ (just a few failing) pki-deps : 10+ (just a few failing) python27 : 4 (just a couple docs pkgs missing) python38-devel : 1 (1 pkg failing) python38 : 2 (1 pkg failing) rhncfg : ? ruby : ? satellite-5-client : ? scala : 10+ (1 pkg failing) swig : ? virt-devel : 10+ (1 pkg failing) Broken Modules \u00b6 (These modules have NO packages completing their build, or very few. They require more investigation) 389-directory-server : N/A (investigate?) avocado : N/A (?) cobbler : N/A dwm libselinux-python.txt libuv mariadb-devel (?) nextcloud rust-toolset subversion varnish zabbix","title":"Module Build Order"},{"location":"archive/legacy/module_build_order/#module-build-order-list","text":"(These modules have all their packages building successfully, and they will build properly in the listed build pass/batch) Build Pass 1: - 389-ds : 1 - freeradius : 1 - go-toolset : 1 - httpd : 1 - mailman : 1 - mercurial : 1 - perl-App-cpanminus : 1 - perl-DBD-MySQL : 1 - perl-DBD-Pg : 1 - perl-DBD-SQLite : 1 - perl-DBI : 1 - perl-FCGI : 1 - perl-YAML : 1 - php : 1 - python36 : 1 - redis : 1 - squid : 1 Build Pass 2: - inkscape : 2 - javapackages-runtime : 2 Build Pass 3: - gimp : 3 Build Pass 4: - ant : 4 - mod-auth-openidc : 4 - postgresql : 4 Build Pass 6: - mariadb : 6 Build Pass 9: - mysql : 9 - parfait : 9 - perl-IO-Socket-SSL : 9 - perl-libwww-perl : 9","title":"Module Build Order List"},{"location":"archive/legacy/module_build_order/#unsure-modules","text":"(These modules still have packages failing, so we are not 100% sure which build pass they should go in) container-tools : unsure idm : 6...? javapackages-tools : 9+ jmc : 9+ llvm-libs : 1, but i686 packages failed (should be ok w/ MBS?) maven : 9+ nginx : 2? (only 1 version not building) nodejs : almost nothing built yet perl : 10+ (most built by 9) pki-core : 8+ (just a few failing) pki-deps : 10+ (just a few failing) python27 : 4 (just a couple docs pkgs missing) python38-devel : 1 (1 pkg failing) python38 : 2 (1 pkg failing) rhncfg : ? ruby : ? satellite-5-client : ? scala : 10+ (1 pkg failing) swig : ? virt-devel : 10+ (1 pkg failing)","title":"Unsure Modules"},{"location":"archive/legacy/module_build_order/#broken-modules","text":"(These modules have NO packages completing their build, or very few. They require more investigation) 389-directory-server : N/A (investigate?) avocado : N/A (?) cobbler : N/A dwm libselinux-python.txt libuv mariadb-devel (?) nextcloud rust-toolset subversion varnish zabbix","title":"Broken Modules"},{"location":"archive/legacy/mqtt_bus/","text":"CentOS provides a message bus which can be used for subscribing to certain messages on their git repository. More information, and setup on subscribing to their message bus can be found at https://wiki.centos.org/Sources?highlight=%28mqtt%29#Message_Broker_.28MQTT.29 . Example message \u00b6 git.centos.org/git.receive { \"forced\": false, \"agent\": \"pgreco\", \"repo\": { \"custom_keys\": [], \"name\": \"kernel\", \"parent\": null, \"date_modified\": \"1553617543\", \"access_users\": { \"owner\": [ \"centosrcm\" ], \"admin\": [], \"ticket\": [], \"commit\": [] }, \"namespace\": \"rpms\", \"priorities\": {}, \"close_status\": [], \"access_groups\": { \"admin\": [], \"commit\": [], \"ticket\": [] }, \"milestones\": {}, \"user\": { \"fullname\": \"CentOS Sources\", \"name\": \"centosrcm\" }, \"date_created\": \"1553617543\", \"fullname\": \"rpms/kernel\", \"url_path\": \"rpms/kernel\", \"id\": 918, \"tags\": [], \"description\": \" The Linux kernel \" }, \"old_commit\": \"dbbb1cc79ab5878344c3e3df4b53b7ac7acdddfc\", \"branch\": \"c7-sig-altarch-lts-5-4\", \"authors\": [ \"Pablo Greco\" ], \"total_commits\": 1, \"start_commit\": \"b7d48e1265407b755f7827d0245547847cdba375\", \"end_commit\": \"b7d48e1265407b755f7827d0245547847cdba375\" }","title":"CentOS MQTT message bus"},{"location":"archive/legacy/mqtt_bus/#example-message","text":"git.centos.org/git.receive { \"forced\": false, \"agent\": \"pgreco\", \"repo\": { \"custom_keys\": [], \"name\": \"kernel\", \"parent\": null, \"date_modified\": \"1553617543\", \"access_users\": { \"owner\": [ \"centosrcm\" ], \"admin\": [], \"ticket\": [], \"commit\": [] }, \"namespace\": \"rpms\", \"priorities\": {}, \"close_status\": [], \"access_groups\": { \"admin\": [], \"commit\": [], \"ticket\": [] }, \"milestones\": {}, \"user\": { \"fullname\": \"CentOS Sources\", \"name\": \"centosrcm\" }, \"date_created\": \"1553617543\", \"fullname\": \"rpms/kernel\", \"url_path\": \"rpms/kernel\", \"id\": 918, \"tags\": [], \"description\": \" The Linux kernel \" }, \"old_commit\": \"dbbb1cc79ab5878344c3e3df4b53b7ac7acdddfc\", \"branch\": \"c7-sig-altarch-lts-5-4\", \"authors\": [ \"Pablo Greco\" ], \"total_commits\": 1, \"start_commit\": \"b7d48e1265407b755f7827d0245547847cdba375\", \"end_commit\": \"b7d48e1265407b755f7827d0245547847cdba375\" }","title":"Example message"},{"location":"archive/legacy/package_debugging/","text":"Intro - What needs to be done \u00b6 The area we need help the most right now, and the easiest way to contribute, is to help troubleshoot failing package builds. We're rebuilding CentOS 8.3 as \"practice\", so we can figure out any issues that crop up with our official Rocky build ahead of time. We are documenting any errors we find in the packages and how to fix them (to make it build). This documentation will help our release engineering team when it comes time to do official builds. Get Familiar with the mock build tool: \u00b6 Check out the wiki on mock 's GitHub repository for some starter information that links out to additional reading at the bottom . The biggest and most relevant technical/intro page for our package debugging effort can be found on our Mock Building Guide here on the wiki. We are using the mock program to perform our builds, just like the real Rocky infrastructure will. You should install it and get very used to it. Please use this guide to get started, and explain a bit about what we hope to achieve and why we have to build all these packages in a specific order. Please read those carefully, and maybe dip your toe in the water by feeding your mock an SRPM or 2 and compiling some things. Mock is really great, as it's an easy-to-call program that constructs an entire system inside a chroot to perform the build, then cleans it up afterwards. If you'd like a reference for Mock config files to look at or play with, there are some published here (that correspond with the \"Build Passes\" being done to test package builds). More information about the passes can be found here on the wiki at: /team/development/Build_Order/Build_Pass_{1..X}_{Artifacts,Failure,RPMs,Successful} ... (which will definitely be cleaned up later, we just want to avoid breaking any existing links at such a critical juncture). Once you're familiar with mock (and especially digging through its output logs), we have a list of failing packages that we need to investigate and come up with explanations and/or fixes for. Helping with the debug effort: \u00b6 Once you are familiar with Mock, and especially with debugging its output, you can begin looking at failing packages. Some of this information is also on the Mock Build Howto page. Find a failing package on the newest build pass failures page (currently Build Pass 10 ). Make sure the package hasn't already been looked at and/or fixed: https://wiki.rockylinux.org/en/team/development/Package_Error_Tracking Let other debuggers know what you're working on! We don't want to duplicate effort. Hop on the ~Dev/Packaging channel on mattermost! Set your mock program up with the most recent configs that we are using . You can use it to attempt the build in the same way as we do (with external dependencies, extra repos, etc.) Investigate the error(s): You can use your own mock, as well as the log files from when the build failed, located here: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ Figure out what's going on, and how to fix it. It may take the form of special mock settings, or a patch added to the program + specfile. Report your findings to the ~Dev/Packaging channel, and someone will record them on the Wiki Package_Error_Tracking page page. The idea is to shrink the Build Failures, and grow the Package_Error_Tracking page. If necessary, we will commit build fixes to our patch repo for the different packages.","title":"How to Help - Getting Started with Package Debugs"},{"location":"archive/legacy/package_debugging/#intro-what-needs-to-be-done","text":"The area we need help the most right now, and the easiest way to contribute, is to help troubleshoot failing package builds. We're rebuilding CentOS 8.3 as \"practice\", so we can figure out any issues that crop up with our official Rocky build ahead of time. We are documenting any errors we find in the packages and how to fix them (to make it build). This documentation will help our release engineering team when it comes time to do official builds.","title":"Intro - What needs to be done"},{"location":"archive/legacy/package_debugging/#get-familiar-with-the-mock-build-tool","text":"Check out the wiki on mock 's GitHub repository for some starter information that links out to additional reading at the bottom . The biggest and most relevant technical/intro page for our package debugging effort can be found on our Mock Building Guide here on the wiki. We are using the mock program to perform our builds, just like the real Rocky infrastructure will. You should install it and get very used to it. Please use this guide to get started, and explain a bit about what we hope to achieve and why we have to build all these packages in a specific order. Please read those carefully, and maybe dip your toe in the water by feeding your mock an SRPM or 2 and compiling some things. Mock is really great, as it's an easy-to-call program that constructs an entire system inside a chroot to perform the build, then cleans it up afterwards. If you'd like a reference for Mock config files to look at or play with, there are some published here (that correspond with the \"Build Passes\" being done to test package builds). More information about the passes can be found here on the wiki at: /team/development/Build_Order/Build_Pass_{1..X}_{Artifacts,Failure,RPMs,Successful} ... (which will definitely be cleaned up later, we just want to avoid breaking any existing links at such a critical juncture). Once you're familiar with mock (and especially digging through its output logs), we have a list of failing packages that we need to investigate and come up with explanations and/or fixes for.","title":"Get Familiar with the mock build tool:"},{"location":"archive/legacy/package_debugging/#helping-with-the-debug-effort","text":"Once you are familiar with Mock, and especially with debugging its output, you can begin looking at failing packages. Some of this information is also on the Mock Build Howto page. Find a failing package on the newest build pass failures page (currently Build Pass 10 ). Make sure the package hasn't already been looked at and/or fixed: https://wiki.rockylinux.org/en/team/development/Package_Error_Tracking Let other debuggers know what you're working on! We don't want to duplicate effort. Hop on the ~Dev/Packaging channel on mattermost! Set your mock program up with the most recent configs that we are using . You can use it to attempt the build in the same way as we do (with external dependencies, extra repos, etc.) Investigate the error(s): You can use your own mock, as well as the log files from when the build failed, located here: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ Figure out what's going on, and how to fix it. It may take the form of special mock settings, or a patch added to the program + specfile. Report your findings to the ~Dev/Packaging channel, and someone will record them on the Wiki Package_Error_Tracking page page. The idea is to shrink the Build Failures, and grow the Package_Error_Tracking page. If necessary, we will commit build fixes to our patch repo for the different packages.","title":"Helping with the debug effort:"},{"location":"archive/legacy/package_error_tracking/","text":"This page is for tracking packages that are failing in the Rocky Linux Koji build system (dev/staging): https://kojidev.rockylinux.org . There are 2 tables. The upper one is for packages currently under investigation. The lower table is for packages that have been \"solved\". A package must be successfully built in Koji before it can be moved to the \"solved\" table. This is to prevent confusion about potential fixes. Koji is the ultimate arbiter of whether a package has been fixed or not. Note: the old package error tracking page centered around Skip G.'s CentOS \"practice builds\" is still available if you need to look at its notes: https://wiki.rockylinux.org/en/team/development/Package_Error_Tracking_older Methodology \u00b6 The builds being done on kojidev are quite literally real-time progress as the Rocky Linux project races towards a beta release . To get there, we need to ensure that all of our packages build successfully. Koji has a list of builds that have failed here: https://kojidev.rockylinux.org/koji/builds?state=3&order=-build_id (You can also go to Koji, click on builds, and select \"State: Failed\" from the drop-down menu) You can select a package from the failing list that interests you, then click the \"task\" link that takes you to the failing details page, then click the failing part of the \"Descendants\" list. Now you can see the raw Mock build logs from the official build, and investigate. (root.log and build.log are usually the most interesting for debug purposes) See if you can get the build to work on your system with Mock, and take notes on how you did it (patch, needs a dependency or different version of dependency, etc.) When you have results, go back to the Dev/Packaging channel on chat.rockylinux.org , and report your findings. Someone will update this page with the findings. It goes without saying that the more you know about using the Mock build tool, and the RPM package compilation process in general, the better you'll be able to help. If you need more information about how to build/troubleshoot RPM packages for Rocky Linux, you'll probably want to start with our how to help guide (and read the other guides/material linked from there): https://wiki.rockylinux.org/en/team/development/Packaging_How_to_Help . Communication \u00b6 Most coordination of these efforts is done over the Mattermost packaging chat channel. (https://chat.rockylinux.org/rocky-linux/channels/dev-packaging , or if you prefer IRC: #rockylinux-devel-packaging on Freenode) If you're looking at a failing package, please tell everyone there! That way we can avoid duplication of effort. When you have a fix, or have discovered information that will help, someone with Wiki access will be happy to take your findings and publish them here. Packages Being Investigated: \u00b6 This is a list of failing builds from kojidev.rockylinux.org that have been looked at, and notes added. This list is not grouped according to repo. Package Notes bolt-0.9-1.el8 Using simple mock chroot ( isolation=simple ) solves permission issues, but there are still 2 tests that fail with signal 5 (SIGTRAP). Investigation still ongoing graphviz-2.40.1-40 Fixed if module_hotfixes=1 is turned off. It pulls in the latest Ruby 2.7 and not the default Ruby 2.5 stream, which breaks the build marisa Probably caused by module_hotfixes being on. (Succeeded locally for Leigh + tjyang. More investigation...?) python-requests Missing dependency 'python3-pytest-mock' (Succeeded locally for Leigh + tjyang. More investigation...?) python-psycopg2 Failed locally also. https://bugzilla.redhat.com/show_bug.cgi?id=1909674 Possible patch required? https://src.fedoraproject.org/rpms/python-psycopg2/c/89f4b65570783ea763c37311e974296d3ff40d90?branch=master scrub x86_64 passed , aarch64 failed on tests (Succeeded locally for Leigh + tjyang. More investigation...?) uglify-js Fixed if module_hotfixes=1 . Fails when \u2018module_hotfixes\u2019 is enabled. This is caused by newer versions of NodeJS. Found a patch that is in newer versions of uglify-js which fixes this for any version of NodeJS.(Succeeded locally for Leigh + tjyang. More investigation...?) Packages that have been fixed: \u00b6 These packages have been successfully built in Koji after investigation. They are cut/pasted down here from the upper list once they succeed in Koji. We are keeping their notes here intact in case of future issues. Package Notes","title":"Package Build Issues Tracking"},{"location":"archive/legacy/package_error_tracking/#methodology","text":"The builds being done on kojidev are quite literally real-time progress as the Rocky Linux project races towards a beta release . To get there, we need to ensure that all of our packages build successfully. Koji has a list of builds that have failed here: https://kojidev.rockylinux.org/koji/builds?state=3&order=-build_id (You can also go to Koji, click on builds, and select \"State: Failed\" from the drop-down menu) You can select a package from the failing list that interests you, then click the \"task\" link that takes you to the failing details page, then click the failing part of the \"Descendants\" list. Now you can see the raw Mock build logs from the official build, and investigate. (root.log and build.log are usually the most interesting for debug purposes) See if you can get the build to work on your system with Mock, and take notes on how you did it (patch, needs a dependency or different version of dependency, etc.) When you have results, go back to the Dev/Packaging channel on chat.rockylinux.org , and report your findings. Someone will update this page with the findings. It goes without saying that the more you know about using the Mock build tool, and the RPM package compilation process in general, the better you'll be able to help. If you need more information about how to build/troubleshoot RPM packages for Rocky Linux, you'll probably want to start with our how to help guide (and read the other guides/material linked from there): https://wiki.rockylinux.org/en/team/development/Packaging_How_to_Help .","title":"Methodology"},{"location":"archive/legacy/package_error_tracking/#communication","text":"Most coordination of these efforts is done over the Mattermost packaging chat channel. (https://chat.rockylinux.org/rocky-linux/channels/dev-packaging , or if you prefer IRC: #rockylinux-devel-packaging on Freenode) If you're looking at a failing package, please tell everyone there! That way we can avoid duplication of effort. When you have a fix, or have discovered information that will help, someone with Wiki access will be happy to take your findings and publish them here.","title":"Communication"},{"location":"archive/legacy/package_error_tracking/#packages-being-investigated","text":"This is a list of failing builds from kojidev.rockylinux.org that have been looked at, and notes added. This list is not grouped according to repo. Package Notes bolt-0.9-1.el8 Using simple mock chroot ( isolation=simple ) solves permission issues, but there are still 2 tests that fail with signal 5 (SIGTRAP). Investigation still ongoing graphviz-2.40.1-40 Fixed if module_hotfixes=1 is turned off. It pulls in the latest Ruby 2.7 and not the default Ruby 2.5 stream, which breaks the build marisa Probably caused by module_hotfixes being on. (Succeeded locally for Leigh + tjyang. More investigation...?) python-requests Missing dependency 'python3-pytest-mock' (Succeeded locally for Leigh + tjyang. More investigation...?) python-psycopg2 Failed locally also. https://bugzilla.redhat.com/show_bug.cgi?id=1909674 Possible patch required? https://src.fedoraproject.org/rpms/python-psycopg2/c/89f4b65570783ea763c37311e974296d3ff40d90?branch=master scrub x86_64 passed , aarch64 failed on tests (Succeeded locally for Leigh + tjyang. More investigation...?) uglify-js Fixed if module_hotfixes=1 . Fails when \u2018module_hotfixes\u2019 is enabled. This is caused by newer versions of NodeJS. Found a patch that is in newer versions of uglify-js which fixes this for any version of NodeJS.(Succeeded locally for Leigh + tjyang. More investigation...?)","title":"Packages Being Investigated:"},{"location":"archive/legacy/package_error_tracking/#packages-that-have-been-fixed","text":"These packages have been successfully built in Koji after investigation. They are cut/pasted down here from the upper list once they succeed in Koji. We are keeping their notes here intact in case of future issues. Package Notes","title":"Packages that have been fixed:"},{"location":"archive/legacy/package_error_tracking_older/","text":"NOTE: This page is deprecated, and refers to Skip's CentOS 8.3 \"practice\" build. It is being kept as a reference in case there are similar issues with the listed packages. The actual build is in progress, and Koji build errors are tracked on the main error tracking page: https://wiki.rockylinux.org/e/en/team/development/Package_Error_Tracking \u00b6 This page details packages that have failed to build, or which something \"special\" had to be done to achieve a build. For example, a package which fails when building with the newest version of a dependency, and requires the forced-downgrade to the older build dependency would go here. This page is NOT for dependency issues, or tracking which order to build dependent packages in. That information is being tracked under Development/Build_Order/ in this wiki. Repositories/Builds \u00b6 This page tracks build failures from these sources: CentOS BaseOS CentOS AppStream CentOS PowerTools External Dependencies \"External Dependencies\" means packages that are downloaded and built from git.centos.org , and don't belong in an official repository. Many packages from the official repositories depend on these external dependency packages. Methodology and Links \u00b6 Right now, build passes are done from CentOS 8.3 SRPMs and Skip's build server: ( https://rocky.lowend.ninja/RockyDevel/ ) Official Koji/MBS infrastructure is nearly complete and will of course be the official location for Rocky builds. This unofficial work is being done to gather information that will help the official build go smoothly. All build \"passes\" are done via Mock, and their results are added to a repository on the build server. These repositories are available to subsequent builds, so more packages get their dependencies and successfully build. Links: \u00b6 Build Result Repositories: https://rocky.lowend.ninja/RockyDevel/ {BaseOS_final, BaseOS_devel, AppStream_final, AppStream_devel, PowerTools_final, PowerTools_devel, External_Deps} (Repos are separated into what goes in the official repo, and other build artifacts produced from the build that aren't in the official repo) Mock Configurations: https://rocky.lowend.ninja/RockyDevel/mock_configs/ - The mock config files used for each Build Pass. Mock Build logs and RPMs: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ - Logs and result RPMs from the mock builds. Separated by repo and package name/version. Dig into here to find error logs and match them with build results listed in the wiki. Summarized build results: https://rocky.lowend.ninja/RockyDevel/deliverables/ - Results from each build pass. What new packages succeeded, which ones failed, and what RPM files were created as a result of the build. This information gets copied to the Wiki under Development/Build_Order/ for easy viewing, but is available in raw form here. A Note on Modularity \u00b6 The current method for package testing is very simplistic, and doesn't take into account modular-stream packages (new feature in RHEL 8). While we don't produce modular metadata with this method to create proper modules, it's still possible to compile modular packages and use modular dependencies. Our Mock config uses the option module_hotfixes=1 in the DNF repo config files, which causes DNF to consider all packages for build dependencies in Mock, even ones from modules that are not enabled. Package Build Tips Discovered so far: \u00b6 Perl: Build everything (especially external dependencies!) against the default Perl 5.26 stream, NOT the latest available 5.30 stream. Perl packages higher up the chain depend on 5.26. Maven: Create blank maven.conf file : config_opts['files']['/etc/java/maven.conf'] = \" \" by changing mock config. Maven-related packages have a script that checks for it and will fail if it's not present Various(SystemD) : SystemD changed its version string output from a simple \"239\" to a more complicated \"239 (239-41.el8_3.1)\" starting with the listed version. Breaks several package scripts. javapackages-tools: In order to produce \"maven-local-openjdk8\", you need a specific commit, more info under External Dependencies page. The New List \u00b6 This is a list of failing builds from kojidev.rockylinux.org that need help. We're now focusing development efforts on helping the real builds, and not doing \"practice\" builds of CentOS. This list is not grouped according to repo. Package Notes bolt-0.9-1.el8 Using simple mock chroot ( isolation=simple ) solves permission issues, but there are still 2 tests that fail with signal 5 (SIGTRAP). Investigation still ongoing graphviz-2.40.1-40 Fixed if module_hotfixes=1 is turned off. It pulls in the latest Ruby 2.7 and not the default Ruby 2.5 stream, which breaks the build marisa Succeeded locally for Leigh + tjyang. More investigation...? python-requests Succeeded locally for Leigh + tjyang. More investigation...? python-psycopg2 Failed locally also. Possible patch required? https://src.fedoraproject.org/rpms/python-psycopg2/c/89f4b65570783ea763c37311e974296d3ff40d90?branch=master scrub Succeeded locally for Leigh + tjyang. More investigation...? uglify-js Succeeded locally for Leigh + tjyang. More investigation...? The (old) List \u00b6 The following is a list of the packages we have investigated. Notes are kept about why they failed, and any workarounds used to build them successfully. Expect this to get updated as we gather more information! CentOS 8 BaseOS Repository : Package Notes ~~efibootmgr-16-1.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/efibootmgr~~ ~~fwupdate-11-3.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/fwupdate~~ ~~libkcapi-1.2.0-2.el8~~ ~~Will not build in the default Mock systemd-nspawn container. MUST use mock --isolation=simple option to build in traditional chroot~~ ~~libusbx-1.0.23-4.el8~~ ~~Patch: https://github.com/elguero/centos8-libusbx/commit/daaad4ad85e7306ad0f111558bb143a2e9700b6d (mock should already have git-core available~~ ~~python-cffi-1.11.5-5.el8~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~tpm2-abrmd-2.1.1-3.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/tpm2-abrmd~~ CentOS 8 AppStream Repository : Package Notes ~~abattis-cantarell-fonts-0.0.25-4.el8~~ ~~Patched fontforge to fix segfault issue. Builds fine using the patched fontforge in its BuildRequires~~ ~~apache-commons-logging-1.2-13.module_el8.0.0+39+6a9b6e22~~ ~~Needs to be built --without avalon ~~ ~~brltty-5.6-28.el8~~ ~~Needs patch to change location of asoundlib.h in newer version of alsa. https://github.com/sjpp/centos8-brltty/commit/388ddcf6493d50ce34542c8badb1a54a9f811950 (see https://bugzilla.redhat.com/show_bug.cgi?id=1716389, https://src.fedoraproject.org/rpms/brltty/c/897ad85a69cd7fb53cabcbac2fbc7c0ca1719da7?branch=master)~~ ~~ceph-12.2.7-9.el8~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~cobbler-2.0.7.1-6.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~cogl-1.22.2-10.el8~~ ~~Fix was committed to Rocky Git. Possible fix: https://github.com/elguero/centos8-cogl/commit/a8b47440f5c7290d96d0b8786f48f323a8a950f9. Got further in the build by force-including these packages in buildroot: libdrm-devel libXxf86vm-devel mesa-libGL-devel mesa-libEGL-devel xml-common mesa-khr-devel (matches centos koji build). Still fails though.~~ ~~cyrus-imapd-3.0.7-19.el8~~ ~~Hidden dependencies added to the list, perl-Encode-IMAPUTF7 . Will build once dependencies are satisfied.~~ ~~egl-wayland-1.1.4-1.el8~~ ~~We are unable to use the SRPM in vault.centos.org for egl-wayland due to a newer version of mesa-libEGL-devel being present (See https://github.com/NVIDIA/egl-wayland/commit/4a343a4b563e84c6258efbddf1d910f9dd6e0300). Building egl-wayland was resolved by checking out the latest code from git.centos.org (produces same version 1.1.4-1) that now contains a patch to fix this.~~ ~~gegl04-0.4.4-6.el8~~ ~~Need to patch SPEC file. Change BuildRequires: pkgconfig(exiv2) >= 0.25 to BuildRequires: compat-exiv2-026 .~~ ~~gcc-toolset-9-dyninst~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-9-build . Then define the scl macro as follows: --define 'scl gcc-toolset-9' ~~ ~~gcc-toolset-9-gcc~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-9-build . Then define the scl macro as follows: --define 'scl gcc-toolset-9' ~~ ~~gcc-toolset-10-dyninst~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~gcc-toolset-10-gcc~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~gcc-toolset-10-systemtap~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~google-guice-4.2.2-4.module_el8.~~ With javapackages-tool from branch c8-stream-201902 built without forcing anything into buildroot. ~~Hidden dependency (newer version): objectweb-asm-7 added to list 101. Built successfully by forcing plexus-utils-3.3.0-3.el8.noarch objectweb-asm-7.2-2.el8_3.noarch into buildroot, and setting the _without macros found in the maven modules.~~ ~~grafana~~ ~~Tries to download dependencies. No network available in mock (normally unless enabled). Crossing off list because latest version builds correctly.~~ ~~gstreamer1-plugins-base~~ ~~Dependency: egl-wayland-devel . Already fixed and should build during next pass~~ ~~HdrHistogram-2.1.11-2.module_el8.2.0+460+6583c1d0~~ ~~Hidden dependency: replacer . Already been added and should build in next pass.~~ httpcomponents-client-4.5.5-4.module_el8.0.0+39+6a9b6e22 Built using --without memcached and --without ehcache httpcomponents-client-4.5.10-* Successfully built. Needs mockito-3.1.2-2.el8_3 - Added to list 101 ( byte-buddy added to list 100, hamcrest added to list 100 and objectweb-asm-7 (v7.3) added to list 99) httpcomponents-core-4.4.12-* Successfully built. Needs mockito-3.1.2-2.el8_3 - Added to list 101 ( byte-buddy added to list 100, hamcrest added to list 100 and objectweb-asm-7 (v7.3) added to list 99) ~~istack-commons~~ ~~Dependency: dom4j - Need to get dom4j built. Also had to force plexus-utils-3.3.0-3.el8.noarch into build root (override version 3.1)~~ ~~jackson-annotations~~ ~~Hidden dependency: jackson-parent (added to list 101)~~ ~~jackson-core~~ ~~Hidden dependency: jackson-bom . (added to list 101)~~ ~~jackson-databind~~ ~~Hidden dependency: jackson-bom . (added to list 101)~~ ~~jackson-jaxrs-providers~~ ~~Hidden dependency: glassfish-jax-rs-api, jackson-bom . (added to list 101)~~ ~~jackson-module-jaxb-annotations~~ ~~Hidden dependency: jackson-parent (added to list 101)~~ ~~jline~~ ~~Needs to be built against jansi-1.17* . Completed build by forcing jansi-1.17 and plexus-utils-3.3.0-3 into the buildroot. Should be ok when the module is built, as it specifies these in modulemd src.~~ ~~jmc~~ ~~Hidden dependency: eclipse-pde , provided by building eclipse which has its long list of hidden dependencies. (added to list 101)~~ ~~jolokia-jvm-agent~~ ~~Hidden dependency: json-simple (added to list 101)~~ ~~jss~~ ~~Patch committed to staging: https://git.rockylinux.org/staging/patch/jss~~ ~~liborcus-0.14.1-1.el8~~ ~~Hidden dependency: mdds-1.4 is in branch c8s and is a specific tag, imports/c8s/mdds-1.4.3-1.el8 (added to list 101)~~ libreoffice-6.3.6.2-3.el8 Should build once liborcus-0.14-1-1.el8 is able to built. See above. ~~libucil~~ ~~Newer alsa-libs has moved the location of asoundlib.h . Patch: https://github.com/elguero/centos8-libucil/commit/cd15a416fc10456bab7a2ae67b2073d4a12a4b8c~~ ~~libvirt-python-4.5.0-2.module_el8.2.0+320+13f867d7~~ ~~Newer version is present.~~ ~~mariadb-java-client-2.2.5~~ ~~Hidden dependency: replacer (added to list 101)~~ ~~maven-3.5.4-5.module_el8.0.0+39+6a9b6e22~~ ~~Built --without logback . Also disabled module_hotfixes and enabled maven-3.5 module to build. Should be fine under MBS we think(?)~~ ~~maven-3.6.2-4.module_*~~ ~~Built javapackages-tools from c8-stream-201902 and was able to then build maven. ~~Hidden dependencies: slf4j-sources (artifact of building slf4j), modello , mockito-core (which has dependencies too, byte-buddy (needs objectweb-asm-7 ) and hamcrest-core ), xmlunit . Needed to disable module_hotfixes and enable maven:3.6 stream in mock, should build automatically using MBS~~ ~~maven-wagon-3.1.0-1.module_el8.0.0+39+6a9b6e22~~ ~~Built --without scm and --without ssh . Dependencies displayed in build pass 10 were not used in koji build which indicates that it was built without them by using these conditionals (https://koji.mbox.centos.org/pkgs/packages/maven-wagon/3.1.0/1.module_el8.0.0+39+6a9b6e22/data/logs/noarch/root.log)~~ ~~mesa-libGLU-9.0.0-15.el8~~ ~~Patch: https://github.com/elguero/centos8-mesa-libGLU/commit/87fc0e63afb3ac0eb65ff480ee6e616979f39927~~ ~~mod_wsgi~~ ~~Need to --define 'python3_pkgversion 38' macro (as specified in python38 module)~~ ~~mutter-3.32.2~~ Needed pkgconfig(wayland-eglstream) . Appears to work after that is satisfied. ~~numpy-1.14.2-*~~ ~~These are part of the python27 module, and must be built --with python2 and --without python3 . Should be fine when the module is built by MBS.~~ perl-File-HomeDir-1.00-14.module_el8.1.0+229+cd132df8 Missing BuildRequires: perl(Module::Install) (maybe ok when built as a module?) perl-JSON-2.97.001-2.el8 ~~Missing BuildRequires: perl-tests ~~ No longer able to reproduce error. ~~perl-Module-Build-0.42.29-4.module_el8.3.0+406+78614513~~ ~~Needs --define 'perl_bootstrap 1' to build without the need for dependencies that have been removed from RHEL8~~ ~~perl-URI-1.7~~ ~~Needs --define 'perl_bootstrap 1' to build without the need for dependencies that have been removed from RHEL8~~ ~~pesign~~ ~~https://github.com/elguero/centos8 pesign/commit/8e0b2ac48129cfe51dd1d53531e77dbc34317dc7~~ plexus-containers Built now that javapackages-tool from c8-stream-201902 is present. ~~ [ERROR] COMPILATION ERROR : [INFO] ------------------------------------------------------------- [ERROR] /builddir/build/BUILD/plexus-containers-plexus-containers-2.1.0/plexus-component-metadata/src/main/java/org/codehaus/plexus/metadata/ann/AnnReader.java:[38,18] cannot find symbol symbol: variable ASM7 location: interface org.objectweb.asm.Opcodes ~~ ~~plexus-build-api-0.0.7-20.module_el8.0.0+30+832da3a1~~ ~~Newer version in Git should build properly~~ ~~plexus-interpolation-1.26-3.module_el8.~~ ~~Needs JAVA_HOME set. config_opts['files']['/etc/profile.d/mystuff.sh'] = \"\"\" export JAVA_HOME=/ \"\"\" ~~ postgresql-jdbc-42.2.3-* Built fine localy ?? Maybe next build will pass. ~~prometheus-jmx-exporter-0.12.0-5.el8~~ ~~Hidden dependencies: prometheus-simpleclient-java and snakeyaml (added to list 101). snakeyaml depends on base64coder (added to list 100). Build is successful~~ ~~prometheus-jmx-exporter-0.12.0-5.el8~~ ~~One of the hidden dependencies is snakeyaml . This version depends on snakeyaml 1.26-2 which is in branch c8s .~~ ~~python-cups-1.9.72-21.el8.0.1~~ ~~Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~python-systemd~~ ~~Possible fix: https://github.com/elguero/centos8-python-systemd/commit/b015bd9c2673939465162cd8a03003222d00327e Affected by version string in new Systemd running longer (\"239\" vs. \"239 (239.4-rhel)\" Reference: https://github.com/systemd/python-systemd/issues/90~~ ~~pytz-2019.*~~ ~~Need to --define 'python3_pkgversion 38' - part of the python38 module, so should be fine in MBS~~ ~~qt5-qtdoc-5.12.5-1.el8~~ ~~Hidden dependency qt5-qtbase-doc . Build qt5-doc from git.centos.org to satisfy.~~ ~~qt5-qtwayland-5.12.5-1.el8~~ ~~Missing BuildRequires: libXext-devel . Fixed in git already.~~ ~~rhncfg-5.10.120-10.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~rust-1.41.1-1.module_el8.2.0+322+d7f93ccc~~ ~~Outdated SRPM - use rust-1.47 from CentOS repo (OK, removed from Skip's build server)~~ scipy-1.3.1-4* Need to --define 'python3_pkgversion 38' - otherwise it grabs python3 packages which does not satisfy dependency ~~SLOF~~ ~~Needs to be built for ppc64le . Spec requires that target arch.~~ ~~spacewalk-backend-2.8.48-4.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~spacewalk-usix-2.8.1-5.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~subversion-~~ ~~Needs to be build --without kwallet . CentOS Koji logs shows kwallet is not present.~~ ~~varnish-6.0{2-1, 6-2}.~~ ~~Needs to be built --with python3 and --without python2 ~~ ~~varnish-modules-0.15.0-~~ ~~Needs to be built --with python3 and --without python2 ~~ ~~velocity-1.7-24.module_*~~ ~~Needs to be built _without_hsqldb=1 , and point to jdk instead of jre in profile.d: export JAVA_HOME=/usr/lib/jvm/java/ . Both likely work when building the module.~~ ~~xdg-desktop-portal-gtk-1.6.0-1.el8~~ ~~It looks like it succeeded in build pass 10 (dependencies fulfilled)~~ ~~xorg-x11-docs-1.7.1-7.el8~~ ~~Hidden dependency: passivetex , built hidden dependency from branch c8. Dependecy satisfied and built.~~ ~~xorg-x11-server-1.20.{6-3, 8-6, 8-6.1}~~ ~~Dependency on egl-wayland , which is currently failing to build. We are unable to use the SRPM in vault.centos.org for egl-wayland due to a newer version of mesa-libEGL-devel being present (See https://github.com/NVIDIA/egl-wayland/commit/4a343a4b563e84c6258efbddf1d910f9dd6e0300). Building egl-wayland was resolved by checking out the latest code from git.centos.org (produces same version 1.1.4-1) that now contains a patch to fix this. Once egl-wayland was built, egl-wayland-devel is present to satisfy the dependency.~~ CentOS 8 PowerTools Repository : Package Notes apache-commons-logging Builds using --without avalon ~~apache-ivy~~ ~~Enabled javapackages-tools-201801 module, and turned on javapackages-tools-201801 macros. Should build fine with MBS.~~ assertj-core Builds using --without memoryfilesystem bsh Builds when using --without desktop ~~compat-guile18~~ ~~Incorrect syntax for Obsoletes in spec file. Patch: https://github.com/N3WWN/rocky-debranding/tree/master/compat-guile18/ROCKY/CFG~~ dejagnu Hidden dependency: screen (added to list 101) jaxen Built using --without dom4j Note: We have dom4j now in our externals repo and it builds fine with that as well. The original packge was built without dom4j. I would recommend building without dom4j if we want to match the package available from CentOS. maven-doxia Builds using --without itext , --without markdown and --without fop maven-doxia-sitetools Builds using --without markdown and --without fop maven-invoker-plugin Builds using --without groovy maven-plugin-testing Depends on maven-wagon from PowerTools. See below. Built successfully using maven-wagon in local repo with priority over RockyDevExternals maven-script-interpreter Builds using --without groovy maven-wagon Builds using --without scm and --without ssh ~~mingw-cairo~~ ~~Hidden dependencies: mingw-w64-tools , mingw-libxml2 ~~ ~~mingw-gstreamer1~~ ~~Hidden dependencies: mingw-w64-tools , mingw-libxml2 ~~ ~~mingw-harfbuzz~~ ~~Hidden dep: mingw-w64-tools ~~ ~~mingw-sqlite~~ ~~Hidden dependency: mingw-pdcurses ~~ pandoc Need to bootstrap Haskell compiler + dependencies (worked on...) ~~perl-B-Hooks-EndOfScope~~ ~~Hidden dependency: perl-Devel-Hide ~~ ~~perl-DateTime-Format-Builder~~ ~~Hidden dependency: perl-DateTime-Format-IBeat ~~ ~~perl-DateTime-Locale~~ ~~Hidden dependency: perl-File-ShareDir-Install , perl-Test-File-ShareDir ~~ ~~perl-Devel-CheckLib~~ ~~Hidden dependency: perl-IO-CaptureOutput ~~ ~~perl-JSON-XS~~ ~~Worked for me with above deps (gmk)~~ ~~perl-MIME-Charset~~ ~~Worked for me with above deps (gmk)~~ ~~perl-Module-Install-ReadmeFromPod~~ ~~Hidden dependency: perl-Module-Install , perl-Module-Install-AuthorRequires , perl-Module-Install-AutoLicense , perl-Test-InDistDir ~~ ~~perl-Params-ValidationCompiler~~ ~~Hidden dependency: perl-Test2-Plugin-NoWarnings , perl-Test-Without-Module ~~ ~~perl-Readonly~~ ~~Hidden dependency: perl-Module-Build-Tiny , perl-ExtUtils-Config , perl-ExtUtils-Helpers , perl-ExtUtils-InstallPaths ~~ ~~perl-Term-Size-Any~~ ~~Worked for me with above deps (gmk)~~ ~~perl-Unicode-EastAsianWidth~~ ~~Hidden dependency: perl-Module-Package , perl-Module-Install-ManifestSkip , perl-Module-Manifest-Skip ~~ ~~perl-XML-Twig~~ ~~Hidden dependency: perl-XML-XPathEngine ~~ perl-gettext Incorrect syntax for Obsoletes in spec file. Patch: https://github.com/N3WWN/rocky-debranding/tree/master/perl-gettext/ROCKY/CFG perl-DateTime-Locale Hidden dependency: perl-Test-File-ShareDir (added to list 101) perl-Module-Install-ReadmeFromPod Hidden dependency: perl-Module-Install-AuthorRequires and perl-Test-InDistDir (added to list 101) pytest Built by using --define 'python3_pkgversion 38' , Hidden dependency: python-pluggy >= 0.12 (added to list 101 along with build note) rubygem-rspec-core Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) rubygem-rspec-mocks Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) rubygem-rspec-support Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) testng Builds with --without groovy and --without snakeyaml xbean Built --without equinox , --without spring and --without groovy xmvn Built --without gradle External Dependencies : Package Notes dom4j Wacky package. It must be built using a jaxen package that is built with dom4j support, which is not present in CentOS. We had to bootstrap the dom4j build using jaxen from Fedora 29, which is compiled with dom4j support. perl-* Be SURE to build against Perl-5.26 (default stream), NOT Perl-5.30 (latest version available). Required disabling module_hotfixes=1 option to force default Perl. Maybe fixed by MBS...? maven-* Requires presence of an /etc/maven.conf , fails if not found. Added a blank one in mock: config_opts['files']['/etc/java/maven.conf'] = \" \" as a workaround Older SRPM Errors These failures were looked at, but are older versions of the packages, and likely not needed: Package Notes device-mapper-multipath-0.8.3-3.el8 Newest version of systemd gives extra information about version number - \"239 (239-41.el8_3.1)\" vs. the plain old \"239\". So a script fails. Will build against older versions of Systemd. We have a newer version of this package that works, it may be Ok to skip. device-mapper-multipath-0.8.3-3.el8_2.3 Newest version of systemd gives extra information about version number - \"239 (239-41.el8_3.1)\" vs. the plain old \"239\". So a script fails. Will build against older versions of Systemd. We have a newer version of this package that works, it may be Ok to skip. samba-4.11.2-13.el8 Requires python3-ldb version lower or equal to 2.0.999, however actual python3-ldb version is 2.1.3. We have a newer version of this package that works, it may be Ok to skip. (samba-4.12.3) sssd-2.2.3-20.el8 ERROR: sssd -> requires pam_wrapper rpm (https://git.centos.org/rpms/pam_wrapper.git) We have a newer version of this package that works, it may be Ok to skip. bcc-0.11.0-2.el8 Unable to find clang-libs even though the dependency that should satisfy this is installed. Only works with clang 9 or lower, but newer bcc with clang 10 seems ok. Probably fine to skip. tigervnc-1.9.0-15.el8_1 xorg-server 1.20.7+ requires the impelementation of a ddxInputThreadInit function. A patch that fixes this is in the latest version at git.centos.org and works with xorg-server 1.20.8-6 . This is what is currently in the repo. (https://git.centos.org/rpms/tigervnc/c/4a81f2fc8757bea7ff2c1d8b1fd881a2bed6803c?branch=c8) The version in vault.centos.org was built against xorg-server 1.20.3-11 . Suggest skipping this package. sbd-1.4.1-3.el8 Build error is being caused by a change in Pacemaker (https://bugzilla.redhat.com/show_bug.cgi?id=1850078). This has been fixed in newer versions. Suggest skipping. xorg-x11-drv-intel-2.99.917-38.20180618.el8 Missing in spec file BuildRequires: libXv-devel . Added it to chroot install. CentOS Koji logs show that this hidden dependency was installed for their build (https://koji.mbox.centos.org/pkgs/packages/xorg-x11-drv-intel/2.99.917/38.20180618.el8/data/logs/i686/root.log) webkit2gtk3-2.24.4-2.el8_1 Looks like a build error that is being caused by libglvnd being present. The original build used different subpackages which contained header files. These packages have been removed and appear to be in libglvnd. (See https://bugs.webkit.org/show_bug.cgi?id=204108) webkit2gtk3-2.24.4-2.el8_1 <--- This version was built against an older version of mesa and libglvnd. Newer versions have been rebased to webkit2gtk3 2.28 . I would recommend skipping this package since there is a newer one present which works with the latest libraries. ~~spirv-tools-2019.5-1.20200129.git97f1d48.el8~~ ~~The spirv headers have changed and this no longer builds against the latest version present. Suggest skipping since there are newer versions that build fine.~~ spice-gtk-0.37-1.el8 Missing BuildRequires: libdrm-devel in spec file. Is present in subsequent updates. Added libdrm-devel to chroot install and was built. vulkan-tools-1.2.131.1-1.el8 Looks like a lot of newer vulkan headers and dependencies, like spirv, have been updated. Building against newer headers and libraries results in a build failure. Found a Debian post where someone was trying to rebuild the same version that we are trying to rebuild and the resolution was that newer versions have fixed the build issue. Suggest skipping since newer version is present. vulkan-validation-layers-1.2.13{1, 5}.* Same issue as vulkan-tools. Newer vulkan headers and dependencies being present results in a build failure with this older version. Suggest skipping.","title":"Package Build Issues Tracking"},{"location":"archive/legacy/package_error_tracking_older/#_1","text":"This page details packages that have failed to build, or which something \"special\" had to be done to achieve a build. For example, a package which fails when building with the newest version of a dependency, and requires the forced-downgrade to the older build dependency would go here. This page is NOT for dependency issues, or tracking which order to build dependent packages in. That information is being tracked under Development/Build_Order/ in this wiki.","title":""},{"location":"archive/legacy/package_error_tracking_older/#repositoriesbuilds","text":"This page tracks build failures from these sources: CentOS BaseOS CentOS AppStream CentOS PowerTools External Dependencies \"External Dependencies\" means packages that are downloaded and built from git.centos.org , and don't belong in an official repository. Many packages from the official repositories depend on these external dependency packages.","title":"Repositories/Builds"},{"location":"archive/legacy/package_error_tracking_older/#methodology-and-links","text":"Right now, build passes are done from CentOS 8.3 SRPMs and Skip's build server: ( https://rocky.lowend.ninja/RockyDevel/ ) Official Koji/MBS infrastructure is nearly complete and will of course be the official location for Rocky builds. This unofficial work is being done to gather information that will help the official build go smoothly. All build \"passes\" are done via Mock, and their results are added to a repository on the build server. These repositories are available to subsequent builds, so more packages get their dependencies and successfully build.","title":"Methodology and Links"},{"location":"archive/legacy/package_error_tracking_older/#links","text":"Build Result Repositories: https://rocky.lowend.ninja/RockyDevel/ {BaseOS_final, BaseOS_devel, AppStream_final, AppStream_devel, PowerTools_final, PowerTools_devel, External_Deps} (Repos are separated into what goes in the official repo, and other build artifacts produced from the build that aren't in the official repo) Mock Configurations: https://rocky.lowend.ninja/RockyDevel/mock_configs/ - The mock config files used for each Build Pass. Mock Build logs and RPMs: https://rocky.lowend.ninja/RockyDevel/MOCK_RAW/ - Logs and result RPMs from the mock builds. Separated by repo and package name/version. Dig into here to find error logs and match them with build results listed in the wiki. Summarized build results: https://rocky.lowend.ninja/RockyDevel/deliverables/ - Results from each build pass. What new packages succeeded, which ones failed, and what RPM files were created as a result of the build. This information gets copied to the Wiki under Development/Build_Order/ for easy viewing, but is available in raw form here.","title":"Links:"},{"location":"archive/legacy/package_error_tracking_older/#a-note-on-modularity","text":"The current method for package testing is very simplistic, and doesn't take into account modular-stream packages (new feature in RHEL 8). While we don't produce modular metadata with this method to create proper modules, it's still possible to compile modular packages and use modular dependencies. Our Mock config uses the option module_hotfixes=1 in the DNF repo config files, which causes DNF to consider all packages for build dependencies in Mock, even ones from modules that are not enabled.","title":"A Note on Modularity"},{"location":"archive/legacy/package_error_tracking_older/#package-build-tips-discovered-so-far","text":"Perl: Build everything (especially external dependencies!) against the default Perl 5.26 stream, NOT the latest available 5.30 stream. Perl packages higher up the chain depend on 5.26. Maven: Create blank maven.conf file : config_opts['files']['/etc/java/maven.conf'] = \" \" by changing mock config. Maven-related packages have a script that checks for it and will fail if it's not present Various(SystemD) : SystemD changed its version string output from a simple \"239\" to a more complicated \"239 (239-41.el8_3.1)\" starting with the listed version. Breaks several package scripts. javapackages-tools: In order to produce \"maven-local-openjdk8\", you need a specific commit, more info under External Dependencies page.","title":"Package Build Tips Discovered so far:"},{"location":"archive/legacy/package_error_tracking_older/#the-new-list","text":"This is a list of failing builds from kojidev.rockylinux.org that need help. We're now focusing development efforts on helping the real builds, and not doing \"practice\" builds of CentOS. This list is not grouped according to repo. Package Notes bolt-0.9-1.el8 Using simple mock chroot ( isolation=simple ) solves permission issues, but there are still 2 tests that fail with signal 5 (SIGTRAP). Investigation still ongoing graphviz-2.40.1-40 Fixed if module_hotfixes=1 is turned off. It pulls in the latest Ruby 2.7 and not the default Ruby 2.5 stream, which breaks the build marisa Succeeded locally for Leigh + tjyang. More investigation...? python-requests Succeeded locally for Leigh + tjyang. More investigation...? python-psycopg2 Failed locally also. Possible patch required? https://src.fedoraproject.org/rpms/python-psycopg2/c/89f4b65570783ea763c37311e974296d3ff40d90?branch=master scrub Succeeded locally for Leigh + tjyang. More investigation...? uglify-js Succeeded locally for Leigh + tjyang. More investigation...?","title":"The New List"},{"location":"archive/legacy/package_error_tracking_older/#the-old-list","text":"The following is a list of the packages we have investigated. Notes are kept about why they failed, and any workarounds used to build them successfully. Expect this to get updated as we gather more information! CentOS 8 BaseOS Repository : Package Notes ~~efibootmgr-16-1.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/efibootmgr~~ ~~fwupdate-11-3.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/fwupdate~~ ~~libkcapi-1.2.0-2.el8~~ ~~Will not build in the default Mock systemd-nspawn container. MUST use mock --isolation=simple option to build in traditional chroot~~ ~~libusbx-1.0.23-4.el8~~ ~~Patch: https://github.com/elguero/centos8-libusbx/commit/daaad4ad85e7306ad0f111558bb143a2e9700b6d (mock should already have git-core available~~ ~~python-cffi-1.11.5-5.el8~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~tpm2-abrmd-2.1.1-3.el8~~ ~~Patch: https://git.rockylinux.org/staging/patch/tpm2-abrmd~~ CentOS 8 AppStream Repository : Package Notes ~~abattis-cantarell-fonts-0.0.25-4.el8~~ ~~Patched fontforge to fix segfault issue. Builds fine using the patched fontforge in its BuildRequires~~ ~~apache-commons-logging-1.2-13.module_el8.0.0+39+6a9b6e22~~ ~~Needs to be built --without avalon ~~ ~~brltty-5.6-28.el8~~ ~~Needs patch to change location of asoundlib.h in newer version of alsa. https://github.com/sjpp/centos8-brltty/commit/388ddcf6493d50ce34542c8badb1a54a9f811950 (see https://bugzilla.redhat.com/show_bug.cgi?id=1716389, https://src.fedoraproject.org/rpms/brltty/c/897ad85a69cd7fb53cabcbac2fbc7c0ca1719da7?branch=master)~~ ~~ceph-12.2.7-9.el8~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~cobbler-2.0.7.1-6.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~cogl-1.22.2-10.el8~~ ~~Fix was committed to Rocky Git. Possible fix: https://github.com/elguero/centos8-cogl/commit/a8b47440f5c7290d96d0b8786f48f323a8a950f9. Got further in the build by force-including these packages in buildroot: libdrm-devel libXxf86vm-devel mesa-libGL-devel mesa-libEGL-devel xml-common mesa-khr-devel (matches centos koji build). Still fails though.~~ ~~cyrus-imapd-3.0.7-19.el8~~ ~~Hidden dependencies added to the list, perl-Encode-IMAPUTF7 . Will build once dependencies are satisfied.~~ ~~egl-wayland-1.1.4-1.el8~~ ~~We are unable to use the SRPM in vault.centos.org for egl-wayland due to a newer version of mesa-libEGL-devel being present (See https://github.com/NVIDIA/egl-wayland/commit/4a343a4b563e84c6258efbddf1d910f9dd6e0300). Building egl-wayland was resolved by checking out the latest code from git.centos.org (produces same version 1.1.4-1) that now contains a patch to fix this.~~ ~~gegl04-0.4.4-6.el8~~ ~~Need to patch SPEC file. Change BuildRequires: pkgconfig(exiv2) >= 0.25 to BuildRequires: compat-exiv2-026 .~~ ~~gcc-toolset-9-dyninst~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-9-build . Then define the scl macro as follows: --define 'scl gcc-toolset-9' ~~ ~~gcc-toolset-9-gcc~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-9-build . Then define the scl macro as follows: --define 'scl gcc-toolset-9' ~~ ~~gcc-toolset-10-dyninst~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~gcc-toolset-10-gcc~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~gcc-toolset-10-systemtap~~ ~~This is a scl build. In chroot, add scl-utils-build and gcc-toolset-10-build . Then define the scl macro as follows: --define 'scl gcc-toolset-10' ~~ ~~google-guice-4.2.2-4.module_el8.~~ With javapackages-tool from branch c8-stream-201902 built without forcing anything into buildroot. ~~Hidden dependency (newer version): objectweb-asm-7 added to list 101. Built successfully by forcing plexus-utils-3.3.0-3.el8.noarch objectweb-asm-7.2-2.el8_3.noarch into buildroot, and setting the _without macros found in the maven modules.~~ ~~grafana~~ ~~Tries to download dependencies. No network available in mock (normally unless enabled). Crossing off list because latest version builds correctly.~~ ~~gstreamer1-plugins-base~~ ~~Dependency: egl-wayland-devel . Already fixed and should build during next pass~~ ~~HdrHistogram-2.1.11-2.module_el8.2.0+460+6583c1d0~~ ~~Hidden dependency: replacer . Already been added and should build in next pass.~~ httpcomponents-client-4.5.5-4.module_el8.0.0+39+6a9b6e22 Built using --without memcached and --without ehcache httpcomponents-client-4.5.10-* Successfully built. Needs mockito-3.1.2-2.el8_3 - Added to list 101 ( byte-buddy added to list 100, hamcrest added to list 100 and objectweb-asm-7 (v7.3) added to list 99) httpcomponents-core-4.4.12-* Successfully built. Needs mockito-3.1.2-2.el8_3 - Added to list 101 ( byte-buddy added to list 100, hamcrest added to list 100 and objectweb-asm-7 (v7.3) added to list 99) ~~istack-commons~~ ~~Dependency: dom4j - Need to get dom4j built. Also had to force plexus-utils-3.3.0-3.el8.noarch into build root (override version 3.1)~~ ~~jackson-annotations~~ ~~Hidden dependency: jackson-parent (added to list 101)~~ ~~jackson-core~~ ~~Hidden dependency: jackson-bom . (added to list 101)~~ ~~jackson-databind~~ ~~Hidden dependency: jackson-bom . (added to list 101)~~ ~~jackson-jaxrs-providers~~ ~~Hidden dependency: glassfish-jax-rs-api, jackson-bom . (added to list 101)~~ ~~jackson-module-jaxb-annotations~~ ~~Hidden dependency: jackson-parent (added to list 101)~~ ~~jline~~ ~~Needs to be built against jansi-1.17* . Completed build by forcing jansi-1.17 and plexus-utils-3.3.0-3 into the buildroot. Should be ok when the module is built, as it specifies these in modulemd src.~~ ~~jmc~~ ~~Hidden dependency: eclipse-pde , provided by building eclipse which has its long list of hidden dependencies. (added to list 101)~~ ~~jolokia-jvm-agent~~ ~~Hidden dependency: json-simple (added to list 101)~~ ~~jss~~ ~~Patch committed to staging: https://git.rockylinux.org/staging/patch/jss~~ ~~liborcus-0.14.1-1.el8~~ ~~Hidden dependency: mdds-1.4 is in branch c8s and is a specific tag, imports/c8s/mdds-1.4.3-1.el8 (added to list 101)~~ libreoffice-6.3.6.2-3.el8 Should build once liborcus-0.14-1-1.el8 is able to built. See above. ~~libucil~~ ~~Newer alsa-libs has moved the location of asoundlib.h . Patch: https://github.com/elguero/centos8-libucil/commit/cd15a416fc10456bab7a2ae67b2073d4a12a4b8c~~ ~~libvirt-python-4.5.0-2.module_el8.2.0+320+13f867d7~~ ~~Newer version is present.~~ ~~mariadb-java-client-2.2.5~~ ~~Hidden dependency: replacer (added to list 101)~~ ~~maven-3.5.4-5.module_el8.0.0+39+6a9b6e22~~ ~~Built --without logback . Also disabled module_hotfixes and enabled maven-3.5 module to build. Should be fine under MBS we think(?)~~ ~~maven-3.6.2-4.module_*~~ ~~Built javapackages-tools from c8-stream-201902 and was able to then build maven. ~~Hidden dependencies: slf4j-sources (artifact of building slf4j), modello , mockito-core (which has dependencies too, byte-buddy (needs objectweb-asm-7 ) and hamcrest-core ), xmlunit . Needed to disable module_hotfixes and enable maven:3.6 stream in mock, should build automatically using MBS~~ ~~maven-wagon-3.1.0-1.module_el8.0.0+39+6a9b6e22~~ ~~Built --without scm and --without ssh . Dependencies displayed in build pass 10 were not used in koji build which indicates that it was built without them by using these conditionals (https://koji.mbox.centos.org/pkgs/packages/maven-wagon/3.1.0/1.module_el8.0.0+39+6a9b6e22/data/logs/noarch/root.log)~~ ~~mesa-libGLU-9.0.0-15.el8~~ ~~Patch: https://github.com/elguero/centos8-mesa-libGLU/commit/87fc0e63afb3ac0eb65ff480ee6e616979f39927~~ ~~mod_wsgi~~ ~~Need to --define 'python3_pkgversion 38' macro (as specified in python38 module)~~ ~~mutter-3.32.2~~ Needed pkgconfig(wayland-eglstream) . Appears to work after that is satisfied. ~~numpy-1.14.2-*~~ ~~These are part of the python27 module, and must be built --with python2 and --without python3 . Should be fine when the module is built by MBS.~~ perl-File-HomeDir-1.00-14.module_el8.1.0+229+cd132df8 Missing BuildRequires: perl(Module::Install) (maybe ok when built as a module?) perl-JSON-2.97.001-2.el8 ~~Missing BuildRequires: perl-tests ~~ No longer able to reproduce error. ~~perl-Module-Build-0.42.29-4.module_el8.3.0+406+78614513~~ ~~Needs --define 'perl_bootstrap 1' to build without the need for dependencies that have been removed from RHEL8~~ ~~perl-URI-1.7~~ ~~Needs --define 'perl_bootstrap 1' to build without the need for dependencies that have been removed from RHEL8~~ ~~pesign~~ ~~https://github.com/elguero/centos8 pesign/commit/8e0b2ac48129cfe51dd1d53531e77dbc34317dc7~~ plexus-containers Built now that javapackages-tool from c8-stream-201902 is present. ~~ [ERROR] COMPILATION ERROR : [INFO] ------------------------------------------------------------- [ERROR] /builddir/build/BUILD/plexus-containers-plexus-containers-2.1.0/plexus-component-metadata/src/main/java/org/codehaus/plexus/metadata/ann/AnnReader.java:[38,18] cannot find symbol symbol: variable ASM7 location: interface org.objectweb.asm.Opcodes ~~ ~~plexus-build-api-0.0.7-20.module_el8.0.0+30+832da3a1~~ ~~Newer version in Git should build properly~~ ~~plexus-interpolation-1.26-3.module_el8.~~ ~~Needs JAVA_HOME set. config_opts['files']['/etc/profile.d/mystuff.sh'] = \"\"\" export JAVA_HOME=/ \"\"\" ~~ postgresql-jdbc-42.2.3-* Built fine localy ?? Maybe next build will pass. ~~prometheus-jmx-exporter-0.12.0-5.el8~~ ~~Hidden dependencies: prometheus-simpleclient-java and snakeyaml (added to list 101). snakeyaml depends on base64coder (added to list 100). Build is successful~~ ~~prometheus-jmx-exporter-0.12.0-5.el8~~ ~~One of the hidden dependencies is snakeyaml . This version depends on snakeyaml 1.26-2 which is in branch c8s .~~ ~~python-cups-1.9.72-21.el8.0.1~~ ~~Build with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~python-systemd~~ ~~Possible fix: https://github.com/elguero/centos8-python-systemd/commit/b015bd9c2673939465162cd8a03003222d00327e Affected by version string in new Systemd running longer (\"239\" vs. \"239 (239.4-rhel)\" Reference: https://github.com/systemd/python-systemd/issues/90~~ ~~pytz-2019.*~~ ~~Need to --define 'python3_pkgversion 38' - part of the python38 module, so should be fine in MBS~~ ~~qt5-qtdoc-5.12.5-1.el8~~ ~~Hidden dependency qt5-qtbase-doc . Build qt5-doc from git.centos.org to satisfy.~~ ~~qt5-qtwayland-5.12.5-1.el8~~ ~~Missing BuildRequires: libXext-devel . Fixed in git already.~~ ~~rhncfg-5.10.120-10.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~rust-1.41.1-1.module_el8.2.0+322+d7f93ccc~~ ~~Outdated SRPM - use rust-1.47 from CentOS repo (OK, removed from Skip's build server)~~ scipy-1.3.1-4* Need to --define 'python3_pkgversion 38' - otherwise it grabs python3 packages which does not satisfy dependency ~~SLOF~~ ~~Needs to be built for ppc64le . Spec requires that target arch.~~ ~~spacewalk-backend-2.8.48-4.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~spacewalk-usix-2.8.1-5.module_el8.1.0+210+a3d63f21~~ ~~Need to define %__python. Built with --define '__python %__python3' (see https://fedoraproject.org/wiki/Changes/PythonMacroError)~~ ~~subversion-~~ ~~Needs to be build --without kwallet . CentOS Koji logs shows kwallet is not present.~~ ~~varnish-6.0{2-1, 6-2}.~~ ~~Needs to be built --with python3 and --without python2 ~~ ~~varnish-modules-0.15.0-~~ ~~Needs to be built --with python3 and --without python2 ~~ ~~velocity-1.7-24.module_*~~ ~~Needs to be built _without_hsqldb=1 , and point to jdk instead of jre in profile.d: export JAVA_HOME=/usr/lib/jvm/java/ . Both likely work when building the module.~~ ~~xdg-desktop-portal-gtk-1.6.0-1.el8~~ ~~It looks like it succeeded in build pass 10 (dependencies fulfilled)~~ ~~xorg-x11-docs-1.7.1-7.el8~~ ~~Hidden dependency: passivetex , built hidden dependency from branch c8. Dependecy satisfied and built.~~ ~~xorg-x11-server-1.20.{6-3, 8-6, 8-6.1}~~ ~~Dependency on egl-wayland , which is currently failing to build. We are unable to use the SRPM in vault.centos.org for egl-wayland due to a newer version of mesa-libEGL-devel being present (See https://github.com/NVIDIA/egl-wayland/commit/4a343a4b563e84c6258efbddf1d910f9dd6e0300). Building egl-wayland was resolved by checking out the latest code from git.centos.org (produces same version 1.1.4-1) that now contains a patch to fix this. Once egl-wayland was built, egl-wayland-devel is present to satisfy the dependency.~~ CentOS 8 PowerTools Repository : Package Notes apache-commons-logging Builds using --without avalon ~~apache-ivy~~ ~~Enabled javapackages-tools-201801 module, and turned on javapackages-tools-201801 macros. Should build fine with MBS.~~ assertj-core Builds using --without memoryfilesystem bsh Builds when using --without desktop ~~compat-guile18~~ ~~Incorrect syntax for Obsoletes in spec file. Patch: https://github.com/N3WWN/rocky-debranding/tree/master/compat-guile18/ROCKY/CFG~~ dejagnu Hidden dependency: screen (added to list 101) jaxen Built using --without dom4j Note: We have dom4j now in our externals repo and it builds fine with that as well. The original packge was built without dom4j. I would recommend building without dom4j if we want to match the package available from CentOS. maven-doxia Builds using --without itext , --without markdown and --without fop maven-doxia-sitetools Builds using --without markdown and --without fop maven-invoker-plugin Builds using --without groovy maven-plugin-testing Depends on maven-wagon from PowerTools. See below. Built successfully using maven-wagon in local repo with priority over RockyDevExternals maven-script-interpreter Builds using --without groovy maven-wagon Builds using --without scm and --without ssh ~~mingw-cairo~~ ~~Hidden dependencies: mingw-w64-tools , mingw-libxml2 ~~ ~~mingw-gstreamer1~~ ~~Hidden dependencies: mingw-w64-tools , mingw-libxml2 ~~ ~~mingw-harfbuzz~~ ~~Hidden dep: mingw-w64-tools ~~ ~~mingw-sqlite~~ ~~Hidden dependency: mingw-pdcurses ~~ pandoc Need to bootstrap Haskell compiler + dependencies (worked on...) ~~perl-B-Hooks-EndOfScope~~ ~~Hidden dependency: perl-Devel-Hide ~~ ~~perl-DateTime-Format-Builder~~ ~~Hidden dependency: perl-DateTime-Format-IBeat ~~ ~~perl-DateTime-Locale~~ ~~Hidden dependency: perl-File-ShareDir-Install , perl-Test-File-ShareDir ~~ ~~perl-Devel-CheckLib~~ ~~Hidden dependency: perl-IO-CaptureOutput ~~ ~~perl-JSON-XS~~ ~~Worked for me with above deps (gmk)~~ ~~perl-MIME-Charset~~ ~~Worked for me with above deps (gmk)~~ ~~perl-Module-Install-ReadmeFromPod~~ ~~Hidden dependency: perl-Module-Install , perl-Module-Install-AuthorRequires , perl-Module-Install-AutoLicense , perl-Test-InDistDir ~~ ~~perl-Params-ValidationCompiler~~ ~~Hidden dependency: perl-Test2-Plugin-NoWarnings , perl-Test-Without-Module ~~ ~~perl-Readonly~~ ~~Hidden dependency: perl-Module-Build-Tiny , perl-ExtUtils-Config , perl-ExtUtils-Helpers , perl-ExtUtils-InstallPaths ~~ ~~perl-Term-Size-Any~~ ~~Worked for me with above deps (gmk)~~ ~~perl-Unicode-EastAsianWidth~~ ~~Hidden dependency: perl-Module-Package , perl-Module-Install-ManifestSkip , perl-Module-Manifest-Skip ~~ ~~perl-XML-Twig~~ ~~Hidden dependency: perl-XML-XPathEngine ~~ perl-gettext Incorrect syntax for Obsoletes in spec file. Patch: https://github.com/N3WWN/rocky-debranding/tree/master/perl-gettext/ROCKY/CFG perl-DateTime-Locale Hidden dependency: perl-Test-File-ShareDir (added to list 101) perl-Module-Install-ReadmeFromPod Hidden dependency: perl-Module-Install-AuthorRequires and perl-Test-InDistDir (added to list 101) pytest Built by using --define 'python3_pkgversion 38' , Hidden dependency: python-pluggy >= 0.12 (added to list 101 along with build note) rubygem-rspec-core Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) rubygem-rspec-mocks Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) rubygem-rspec-support Hidden dependency: rubygem-thread_order (Added to hidden dependency list 101). Needs to be built with module_hotfixes disabled so that it builds against rubygems-2.7.6.2 (https://pkgs.dyn.su/rocky-8/artifacts/) testng Builds with --without groovy and --without snakeyaml xbean Built --without equinox , --without spring and --without groovy xmvn Built --without gradle External Dependencies : Package Notes dom4j Wacky package. It must be built using a jaxen package that is built with dom4j support, which is not present in CentOS. We had to bootstrap the dom4j build using jaxen from Fedora 29, which is compiled with dom4j support. perl-* Be SURE to build against Perl-5.26 (default stream), NOT Perl-5.30 (latest version available). Required disabling module_hotfixes=1 option to force default Perl. Maybe fixed by MBS...? maven-* Requires presence of an /etc/maven.conf , fails if not found. Added a blank one in mock: config_opts['files']['/etc/java/maven.conf'] = \" \" as a workaround Older SRPM Errors These failures were looked at, but are older versions of the packages, and likely not needed: Package Notes device-mapper-multipath-0.8.3-3.el8 Newest version of systemd gives extra information about version number - \"239 (239-41.el8_3.1)\" vs. the plain old \"239\". So a script fails. Will build against older versions of Systemd. We have a newer version of this package that works, it may be Ok to skip. device-mapper-multipath-0.8.3-3.el8_2.3 Newest version of systemd gives extra information about version number - \"239 (239-41.el8_3.1)\" vs. the plain old \"239\". So a script fails. Will build against older versions of Systemd. We have a newer version of this package that works, it may be Ok to skip. samba-4.11.2-13.el8 Requires python3-ldb version lower or equal to 2.0.999, however actual python3-ldb version is 2.1.3. We have a newer version of this package that works, it may be Ok to skip. (samba-4.12.3) sssd-2.2.3-20.el8 ERROR: sssd -> requires pam_wrapper rpm (https://git.centos.org/rpms/pam_wrapper.git) We have a newer version of this package that works, it may be Ok to skip. bcc-0.11.0-2.el8 Unable to find clang-libs even though the dependency that should satisfy this is installed. Only works with clang 9 or lower, but newer bcc with clang 10 seems ok. Probably fine to skip. tigervnc-1.9.0-15.el8_1 xorg-server 1.20.7+ requires the impelementation of a ddxInputThreadInit function. A patch that fixes this is in the latest version at git.centos.org and works with xorg-server 1.20.8-6 . This is what is currently in the repo. (https://git.centos.org/rpms/tigervnc/c/4a81f2fc8757bea7ff2c1d8b1fd881a2bed6803c?branch=c8) The version in vault.centos.org was built against xorg-server 1.20.3-11 . Suggest skipping this package. sbd-1.4.1-3.el8 Build error is being caused by a change in Pacemaker (https://bugzilla.redhat.com/show_bug.cgi?id=1850078). This has been fixed in newer versions. Suggest skipping. xorg-x11-drv-intel-2.99.917-38.20180618.el8 Missing in spec file BuildRequires: libXv-devel . Added it to chroot install. CentOS Koji logs show that this hidden dependency was installed for their build (https://koji.mbox.centos.org/pkgs/packages/xorg-x11-drv-intel/2.99.917/38.20180618.el8/data/logs/i686/root.log) webkit2gtk3-2.24.4-2.el8_1 Looks like a build error that is being caused by libglvnd being present. The original build used different subpackages which contained header files. These packages have been removed and appear to be in libglvnd. (See https://bugs.webkit.org/show_bug.cgi?id=204108) webkit2gtk3-2.24.4-2.el8_1 <--- This version was built against an older version of mesa and libglvnd. Newer versions have been rebased to webkit2gtk3 2.28 . I would recommend skipping this package since there is a newer one present which works with the latest libraries. ~~spirv-tools-2019.5-1.20200129.git97f1d48.el8~~ ~~The spirv headers have changed and this no longer builds against the latest version present. Suggest skipping since there are newer versions that build fine.~~ spice-gtk-0.37-1.el8 Missing BuildRequires: libdrm-devel in spec file. Is present in subsequent updates. Added libdrm-devel to chroot install and was built. vulkan-tools-1.2.131.1-1.el8 Looks like a lot of newer vulkan headers and dependencies, like spirv, have been updated. Building against newer headers and libraries results in a build failure. Found a Debian post where someone was trying to rebuild the same version that we are trying to rebuild and the resolution was that newer versions have fixed the build issue. Suggest skipping since newer version is present. vulkan-validation-layers-1.2.13{1, 5}.* Same issue as vulkan-tools. Newer vulkan headers and dependencies being present results in a build failure with this older version. Suggest skipping.","title":"The (old) List"},{"location":"archive/legacy/packaging/","text":"This page details the packaging efforts for the Rocky Linux project. Git Branching \u00b6 Currently git.c.o has a very specific branch system for packages on the site. This is what we understand so far about it: Name Description c8 \"Stable Branch\" c8-stream \"Stable Modules\" c8s* Stream only With this in mind, our focus should be on the c8 and c8-stream branches. We are currently unsure of the plans for 2022 with RHEL 9's release on how the branches will look or if the git system will change entirely. But for now, this is what we are working with. Original Proposal \u00b6 The original idea was to pull directly from Red Hat. There may be a case where we should still be watching RHEL's releases and try to match them with what's going on with with git.c.o to make sure things are consistent. If they are, git.c.o may be the correct route. Repositories \u00b6 Below will likely be the base repositories for Rocky Linux Repo Name Usage Enabled by default Notes BaseOS Base packages Yes AppStream Modularity Yes Devel Devel packages No BuildRoot contexts + missing devel packages CodeReady PowerTools/CodeReady No extras Extras Yes isos ISO No RockyTools No Possibly mix into Devel Repositories that are likely SIG's that may be implemented. Repo Name HighAvailibility cloud configmanagement messaging nfv opstools storage virt desktop","title":"Packaging"},{"location":"archive/legacy/packaging/#git-branching","text":"Currently git.c.o has a very specific branch system for packages on the site. This is what we understand so far about it: Name Description c8 \"Stable Branch\" c8-stream \"Stable Modules\" c8s* Stream only With this in mind, our focus should be on the c8 and c8-stream branches. We are currently unsure of the plans for 2022 with RHEL 9's release on how the branches will look or if the git system will change entirely. But for now, this is what we are working with.","title":"Git Branching"},{"location":"archive/legacy/packaging/#original-proposal","text":"The original idea was to pull directly from Red Hat. There may be a case where we should still be watching RHEL's releases and try to match them with what's going on with with git.c.o to make sure things are consistent. If they are, git.c.o may be the correct route.","title":"Original Proposal"},{"location":"archive/legacy/packaging/#repositories","text":"Below will likely be the base repositories for Rocky Linux Repo Name Usage Enabled by default Notes BaseOS Base packages Yes AppStream Modularity Yes Devel Devel packages No BuildRoot contexts + missing devel packages CodeReady PowerTools/CodeReady No extras Extras Yes isos ISO No RockyTools No Possibly mix into Devel Repositories that are likely SIG's that may be implemented. Repo Name HighAvailibility cloud configmanagement messaging nfv opstools storage virt desktop","title":"Repositories"},{"location":"contributing/","text":"This section of the wiki contains various articles that detail how to contribute to Rocky, such as agreements and onboarding. The agreements here will also be in our RAS (Rocky Account Services) system that will require contributors to sign. Previously this page contained a link to a form that anyone could fill out to contribute. However, we feel that this section of the wiki can help more easily in that regard. Getting Started \u00b6 As with most online and/or open source communities, getting started usually begins at the \"joining\" phase and just participating in topics that interest you. Here's some basic things you can do to get you going: Join our mattermost and search for channels that interest you Check out our forums and reddit","title":"Contributing"},{"location":"contributing/#getting-started","text":"As with most online and/or open source communities, getting started usually begins at the \"joining\" phase and just participating in topics that interest you. Here's some basic things you can do to get you going: Join our mattermost and search for channels that interest you Check out our forums and reddit","title":"Getting Started"},{"location":"contributing/rosca/","text":"This Open Source Contributor Agreement (\"Agreement\") is between you (as defined below) and Rocky Enterprise Software Foundation (\"we\" or \"us\"). This Agreement applies to all Contributions (as defined below) submitted by you to a project owned or managed by us (each, a \"Project\"). By clicking submit on our applicable Project portal, you agree to the terms and conditions of this Agreement. Your assent to this Agreement is a prerequisite to contributing to any Project. Definitions. The terms \"you\" (or \"your\") shall mean the copyright owner or the individual or legal entity authorized by the copyright owner that is granting the licenses under this Agreement. For legal entities, the term \"you\" includes any entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity. \"Contribution\" means any work of authorship, including any software (in object code or source code), image, audiovisual work, or documentation, and any modifications or additions to an existing work, submitted by you in connection with any product or other item developed managed or maintained by a Project (collectively, such software and other items, \"Work\"). The term \"submitted\" means any act of sent to a Project or its representatives, including communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by or on behalf of a Project. uploading, submitting or distribution IP License. You hereby grant to the Rocky Enterprise Software Foundation (RESF) and those who receive or contribute software or other materials distributed or managed by a Project, a perpetual, worldwide, non-exclusive, royalty-free, irrevocable license under any applicable intellectual property rights in the Contributions, to reproduce, prepare derivative works of, publicly display, publicly perform, and distribute the Contributions and any derivative works thereof, including as part of the Work or any other software or materials arising out of or related to the Project to which your Contribution was submitted. Authority. You represent that you are legally entitled to grant the licenses specified above. If your employer or other entity that you are associated with has rights to intellectual property that you create which includes your Contributions, you represent that you have received authorization to make Contributions and grant the foregoing licenses on behalf of that employer or entity in accordance with this Agreement. Notification. You will notify us of any facts or circumstances of which you become aware that would make the foregoing representations inaccurate in any respect or would call into question the grants of rights hereunder. Miscellaneous. This Agreement is the exclusive agreement between the parties with respect to the subject matter hereof. We may freely assign this Agreement. This Agreement shall be governed by the laws of the state of California. Nothing in this Agreement shall be construed to create an employment or agency relationship between you and us or any other recipients or contributors of products or other items distributed or managed by a Project.","title":"Rocky Open Source Contributor Agreement"},{"location":"contributing/start/","text":"Contributing to Rocky Linux should be easy and straight forward for any user who wishes to participate or would like to contribute in any way. This could be through a Special Interest Group, or it could just be to the core Rocky Linux distribution. Purpose \u00b6 This page goes over the basic steps to signing up for an account with our Rocky Account Services and other basics with interacting with the Rocky ecosystem. Start Guide \u00b6 This section will go over the very basics of signing up for an account and filling in basic information in Rocky Account Services. Creating an Account \u00b6 Creating and managing your Rocky account starts at Rocky Account Services. Go to the Rocky Account Services page and click the register tab Fill in the necessary boxes presented, such as user name, first and last name, and email address, and click \"register\" You will receive an activation email. Activate your account. Login to your account on the Rocky Account Services page Profile Information \u00b6 When you login, you will be on your profile. Click \"Edit Profile\" below your email address to make changes to your profile. It is highly recommended that you fill out the following information on the \"Profile\" tab: Locale Timezone Chat nicknames (if applicable) Your github/gitlab username By default, if your email address has an account on libravatar , you will automatically have a profile picture assigned. If you do not, you can create one but clicking the \"Change Avatar\" button in the profile tab. It is highly recommended that you fill out the \"SSH & GPG Keys\" tab. Your ssh keys should sync to our git . It is highly recommended that you add an OTP to your account. Signing Agreements \u00b6 While editting your profile, there is an \"Agreements\" tab with all of the current agreements for Rocky. It is highly recommended that the following is reviewed and signed: Rocky Open Source Contributor Agreement Rocky Linux GitLab Contributor Agreement See the details section for more information. Requesting Access to Groups/SIGs \u00b6 In general, the baseline steps to requesting access comes down to this: Create your account in RAS Fill out your profile Sign the appropriate agreements Find the group or groups you wish to join and find the sponsors Contact the sponsor directly or send a message to appropriate channel for the group Each group/SIG will have different procedures for becoming part of the groups/SIGs within Rocky Account Services. Most groups will require agreement(s) to be signed, others may be on a request basis. Each group should have \"sponsors\" that can be contacted with information on joining the groups. They can be contacted in the mattermost . Some sponsors may have additional documents they'll send you from the main wiki or the SIG wiki that will detail the procedure they expect you to follow. Details \u00b6 This section will go over a more detailed overview of various aspects of the Rocky Account Services as well as pieces of infrastructure you may interact with. Agreements \u00b6 Agreements in Rocky Account Services are there to show that you understand and agree to the terms in how you are expected to use Rocky-related services. You will find 100% of the time, you will be required to sign at least one of the agreements, and that's the Rocky Open Source Contributor Agreement . If you plan on utilizing git.rockylinux.org or git.resf.org (as most contributors will), signing of the Rocky Git Contributor Agreement is a requirement. Before a sponsor or a team leader will add you to a group, they will have the ability to check your profile to verify that you have signed the appropriate agreements before proceeding. In the event your profile is set to private, this information may be requested from Core/RelEng. If you do not or cannot agree to the terms, you will not be able to contribute to Rocky within its own ecosystem. (Note that this does not stop you from contributing to github repositories.)","title":"Getting Started"},{"location":"contributing/start/#purpose","text":"This page goes over the basic steps to signing up for an account with our Rocky Account Services and other basics with interacting with the Rocky ecosystem.","title":"Purpose"},{"location":"contributing/start/#start-guide","text":"This section will go over the very basics of signing up for an account and filling in basic information in Rocky Account Services.","title":"Start Guide"},{"location":"contributing/start/#creating-an-account","text":"Creating and managing your Rocky account starts at Rocky Account Services. Go to the Rocky Account Services page and click the register tab Fill in the necessary boxes presented, such as user name, first and last name, and email address, and click \"register\" You will receive an activation email. Activate your account. Login to your account on the Rocky Account Services page","title":"Creating an Account"},{"location":"contributing/start/#profile-information","text":"When you login, you will be on your profile. Click \"Edit Profile\" below your email address to make changes to your profile. It is highly recommended that you fill out the following information on the \"Profile\" tab: Locale Timezone Chat nicknames (if applicable) Your github/gitlab username By default, if your email address has an account on libravatar , you will automatically have a profile picture assigned. If you do not, you can create one but clicking the \"Change Avatar\" button in the profile tab. It is highly recommended that you fill out the \"SSH & GPG Keys\" tab. Your ssh keys should sync to our git . It is highly recommended that you add an OTP to your account.","title":"Profile Information"},{"location":"contributing/start/#signing-agreements","text":"While editting your profile, there is an \"Agreements\" tab with all of the current agreements for Rocky. It is highly recommended that the following is reviewed and signed: Rocky Open Source Contributor Agreement Rocky Linux GitLab Contributor Agreement See the details section for more information.","title":"Signing Agreements"},{"location":"contributing/start/#requesting-access-to-groupssigs","text":"In general, the baseline steps to requesting access comes down to this: Create your account in RAS Fill out your profile Sign the appropriate agreements Find the group or groups you wish to join and find the sponsors Contact the sponsor directly or send a message to appropriate channel for the group Each group/SIG will have different procedures for becoming part of the groups/SIGs within Rocky Account Services. Most groups will require agreement(s) to be signed, others may be on a request basis. Each group should have \"sponsors\" that can be contacted with information on joining the groups. They can be contacted in the mattermost . Some sponsors may have additional documents they'll send you from the main wiki or the SIG wiki that will detail the procedure they expect you to follow.","title":"Requesting Access to Groups/SIGs"},{"location":"contributing/start/#details","text":"This section will go over a more detailed overview of various aspects of the Rocky Account Services as well as pieces of infrastructure you may interact with.","title":"Details"},{"location":"contributing/start/#agreements","text":"Agreements in Rocky Account Services are there to show that you understand and agree to the terms in how you are expected to use Rocky-related services. You will find 100% of the time, you will be required to sign at least one of the agreements, and that's the Rocky Open Source Contributor Agreement . If you plan on utilizing git.rockylinux.org or git.resf.org (as most contributors will), signing of the Rocky Git Contributor Agreement is a requirement. Before a sponsor or a team leader will add you to a group, they will have the ability to check your profile to verify that you have signed the appropriate agreements before proceeding. In the event your profile is set to private, this information may be requested from Core/RelEng. If you do not or cannot agree to the terms, you will not be able to contribute to Rocky within its own ecosystem. (Note that this does not stop you from contributing to github repositories.)","title":"Agreements"},{"location":"guidelines/bug_tracker_guidelines/","text":"These set of guidelines are what to expect using the Bug Tracker system. While we do not require contributors or bug reports to sign this as an agreement in account services nothing is stopping you from doing so to show confirmation that you have. Preface \u00b6 Bugzilla is a core part of the Rocky Linux distribution and Rocky Enterprise Software Foundation as a whole. Whether you're a bug reporter, a contributor, or perhaps on the Release Engineering team, the Bug Tracker is a utility for everyone to be able to read and engage with others to find solutions to issues affecting the software that is shipped and available in Rocky Linux. General Guidelines \u00b6 As a reporter, there are guidelines in which you (the user) and others must follow when reporting issues or bugs on the Bug Tracker. Below are some things to be aware of: Moderation is enforced - As is done in the Rocky Linux MatterMost chat, it is important to mind your language and word choice. Speak to others as you would want them to speak to you. The Bug Tracker is not a place for support - The Bug Tracker is meant for issues, bugs, and problems with the packages and software that is provided in Rocky Linux. Tickets opened that are asking for support on the operating system or software will be closed. You are encouraged to go to our subreddit, Freenode IRC channel (#rockylinux), mattermost, or our forums. Expectations \u00b6 As a reporter, there are expectations in which you (the user) and others should adhere to in order to keep the queues clean and consistent, as well as the the reports readable so that the responsible party can address the issue in a proper manner. Ensure your report goes to the correct project - There is a list of projects that accept bug reports or issues. The drop down is on the top right. Choose the one most appropriate to your issue. Ensure that you provide relevant information - When submitting a report that may be a bug or issue, ensure that you provide relevant logs and output that can help the responsible parties to address your issue. This includes: Logs from /var/log journalctl logs Console output in your shell/session An archive created by sosreport Patch files or workarounds Do not submit support questions - The Bug Tracker is not a support desk; as such the tickets will be closed if they are asking for assistance or support. You are recommended to go to our reddit, Freenode channel (#rockylinux), or our forum. Types of Tickets \u00b6 While reporting bugs and issues are common with bug trackers, the tracker also accepts other reports. Such as: Account Removal - If you are requesting your account be removed or disabled, this can be done in the Account Services section of the bug tracker. GitLab Request - There may be patch repos missing or something else may be requested that involves a group or even a SIG. Rocky Services - This could be the bug tracker itself, the wiki, or other pieces of infrastructure.","title":"Bug Tracker Guidelines"},{"location":"guidelines/bug_tracker_guidelines/#preface","text":"Bugzilla is a core part of the Rocky Linux distribution and Rocky Enterprise Software Foundation as a whole. Whether you're a bug reporter, a contributor, or perhaps on the Release Engineering team, the Bug Tracker is a utility for everyone to be able to read and engage with others to find solutions to issues affecting the software that is shipped and available in Rocky Linux.","title":"Preface"},{"location":"guidelines/bug_tracker_guidelines/#general-guidelines","text":"As a reporter, there are guidelines in which you (the user) and others must follow when reporting issues or bugs on the Bug Tracker. Below are some things to be aware of: Moderation is enforced - As is done in the Rocky Linux MatterMost chat, it is important to mind your language and word choice. Speak to others as you would want them to speak to you. The Bug Tracker is not a place for support - The Bug Tracker is meant for issues, bugs, and problems with the packages and software that is provided in Rocky Linux. Tickets opened that are asking for support on the operating system or software will be closed. You are encouraged to go to our subreddit, Freenode IRC channel (#rockylinux), mattermost, or our forums.","title":"General Guidelines"},{"location":"guidelines/bug_tracker_guidelines/#expectations","text":"As a reporter, there are expectations in which you (the user) and others should adhere to in order to keep the queues clean and consistent, as well as the the reports readable so that the responsible party can address the issue in a proper manner. Ensure your report goes to the correct project - There is a list of projects that accept bug reports or issues. The drop down is on the top right. Choose the one most appropriate to your issue. Ensure that you provide relevant information - When submitting a report that may be a bug or issue, ensure that you provide relevant logs and output that can help the responsible parties to address your issue. This includes: Logs from /var/log journalctl logs Console output in your shell/session An archive created by sosreport Patch files or workarounds Do not submit support questions - The Bug Tracker is not a support desk; as such the tickets will be closed if they are asking for assistance or support. You are recommended to go to our reddit, Freenode channel (#rockylinux), or our forum.","title":"Expectations"},{"location":"guidelines/bug_tracker_guidelines/#types-of-tickets","text":"While reporting bugs and issues are common with bug trackers, the tracker also accepts other reports. Such as: Account Removal - If you are requesting your account be removed or disabled, this can be done in the Account Services section of the bug tracker. GitLab Request - There may be patch repos missing or something else may be requested that involves a group or even a SIG. Rocky Services - This could be the bug tracker itself, the wiki, or other pieces of infrastructure.","title":"Types of Tickets"},{"location":"guidelines/git_guidelines/","text":"This document covers how the Rocky Enterprise Software Foundation (RESF) and Rocky Linux project handles the use of Git in the ecosystem. It contains information about how various teams and the community interact and work with Git, as well as expectations and requirements. Contact Information \u00b6 Owner Release Engineering Team Mattermost Contacts @label @mustafa @skip77 @sherif @pgreco Mattermost Channels ~Dev/Packaging ~Dev/General IRC Contacts Sokel General Information \u00b6 Git is a core component of the Rocky Linux build ecosystem, RESF projects, and thus a mode of the development process for the distribution and available software. GitLab is the software used for storing mostly RPM SPEC files, patches, configurations for debranding/modification to packages, and some scripts/utilities. It may contain some source code depending on the use case. Gitea is used for RESF, its projects, its code, and potentially other components that are not applicable for use in our GitLab instance. Expectations \u00b6 This section goes over the expectations of using the Git service. General Expectations \u00b6 Most of this information is covered in our Git Contributor Agreement . However, we are duplicating the information here for all readers. Moderation is enforced - As is done in the Rocky Linux Mattermost chat, it is important to mind your language and word choice whether in Git issues or the Bug Tracker. A valid GPG key must be uploaded and used to sign your commits - Signed commits, as a general rule are recommended. Expect that most projects will have unsigned commits disabled. Do not treat git as an issue tracker - All issues for Rocky Linux should be tracked at our Bug Tracker. As of this writing, automatic issues are opened for build issues. Do not perform your work or changes on a system that is owned by your employer. Do not create personal projects Ensure that your software or work are of a valid open source license (see related links above) Do's and Do not's \u00b6 Below are a list of do's and do not's as part of our Git, whether some are duplicated information above or below this subsection. They are placed here for further emphasis. DO: Fork repositories and create pull requests where needed Ensure software/source code brought into the Git services are of a valid open source license (see related links above) Upload a valid GPG key and sign your commits DON'T: Treat any Git service as a Rocky Linux issue tracker Create personal projects under your namespace (see exceptions) Perform your work or changes on a system that is owned by your employer Exceptions \u00b6 Exceptions to personal projects under your namespace would be for code that will be utilized in some way for the Rocky ecosystem, whether directly, indirectly (eg for people.rocky). Source Code (for SIGs or other software) \u00b6 To be populated. RPM System \u00b6 This section goes over the RPM system, such as importing, patching, and how it ultimately gets built into a binary RPM. Current RPM Structure \u00b6 The current RPM structure is designed to allow the orchestrator tool to import sources and then patch them accordingly if required. It also allows AppStream modules to be supported and manageable with their required YAML files. There are three primary groups: original : contains RPM spec data that are from Rocky, such as release and logos staging : contains RPM spec data for the staging channel, such as testing the tools in that they operate and function correctly, and to test the build process. release : contains RPM spec data for the release channel, which would be the actual release that users will consume. . \u251c\u2500\u2500 original \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 patch \u2502 \u2514\u2500\u2500 rpms \u251c\u2500\u2500 release \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 patch \u2502 \u2514\u2500\u2500 rpms \u2514\u2500\u2500 staging \u251c\u2500\u2500 modules \u251c\u2500\u2500 patch \u2514\u2500\u2500 rpms Each group has three subgroups: modules group is used to store repos that hold YAML files. The YAML files define the module that will exist in the AppStream repository. patch group is used to hold the configuration for distrobuild to pick up and patch or perform other tasks as it pertains to the RPM. rpms group is used as the final output/import of the RPM spec file and patches after it has been patched (if applicable) and is then used/picked up to build the SRPM and send to koji for build. Note that SIGs or projects that plan on using the build system should be following this methodology. RPM Patching Structure \u00b6 For the patch configuration, the layout must be followed strictly to ensure a SPEC file or its sources are modified accordingly. Here's an example below. . \u2514\u2500\u2500 ROCKY \u251c\u2500\u2500 CFG \u2502 \u2514\u2500\u2500 browser.cfg \u2514\u2500\u2500 _supporting \u251c\u2500\u2500 Bug-1238661---fix-mozillaSignalTrampoline-to-work-.patch \u251c\u2500\u2500 Bug-1526653---fix_user_vfp_armv7.patch \u2514\u2500\u2500 firefox-rocky-default-prefs.js At the top level, the ROCKY folder will hold two additional folders, CFG and _supporting . The CFG directory will contain files that end in .cfg that tell the orchestrator what to do to the imports coming in the form of an action. Action { file: \"OriginalFile\" with_file: \"ROCKY/_supporting/RockyReplaceFile\" } This goes into further detail at our Debrand HowTo page. Branch Strategy \u00b6 Typically when making a patch repo, the main branch is where everything should be. However, there are cases where this is not sufficient, especially in the case of major release version differences. Here's a general idea/example of how the branches will work: main is the universal branch that is always used during a patch r8 is the Rocky 8 branch, specific to patching the corresponding RPM specs/patches for 8 r9 would be for Rocky 9 etc... In practice when the patch process occurs, the main branch is parsed first and applied, and then if there is a corresponding r8 branch, it would apply that next. There are cases too where main can be empty and you'll just have a r8 branch. This is acceptable and will still work. Note that with this strategy, it is recommended to never merge branches. Try to keep them separated where as best as possible and where absolutely needed. Submitting a Potential Patch \u00b6 There are a few ways to submit a patch to fix build issues in the main distribution. This section will break down some examples of ways you can put in a fix request for review. Patch Repo Doesn't Exist \u00b6 If there is a package failing, or you are looking to submit a patch for example to allow something to compile correctly on another architecture (eg armv7 / armhfp ), or perhaps you found a piece of the base that was not debranded properly, generally a bug report should be opened at our Bug Tracker with relevant information and logs. Opening a project under your namespace can be done and can eventually be transferred in into staging after review. Patch Repo Exists \u00b6 If there is a package failing because of a failing current patch, or a new patch is required, perhaps debranding must occur, you generally: Fork the repo into your namespace Make the relevant changes Apply for a merge request/pull request An appropriate bug tracking ticket should be opened, if not opened already (or automatically) to ensure there is documentation for this change. SIG Groups + Projects \u00b6 This section covers SIG groups and projects that exist within the Rocky Linux git service. SIGs may have RPM specs, scripts, or even their own software. The sections below will cover the format and expectations of these groups and projects. General Overview \u00b6 A SIG is a S pecial I nterest G roup(s). SIGs are smaller groups within the Rocky community that focus on a small set of issues or exist solely for the awareness or focus on topics. This section does not cover the requirements of a SIG's existence. It is expected that a SIG may end up having repositories with packages that can add-on to a Rocky Linux system. However, some SIGs do not function in this manner. In the case that they do function in this manner, they will typically have a section in the git service under the SIG group. Structure \u00b6 Using the RPM Structure as a guide, the general idea is the same. A patch group may not be needed, but could be useful. An example of how a SIG could set up their group could be like this: . \u2514\u2500\u2500 SIG \u2514\u2500\u2500 messaging \u251c\u2500\u2500 modules \u251c\u2500\u2500 rpms \u2502 \u2514\u2500\u2500 somemq \u2514\u2500\u2500 somemq In this example, source code for the software somemq would be under the messaging subgroup under SIG . And then an RPM spec for that software, for that SIG, would sit under rpms as expected. However, you can further organize this further if you wish. . \u2514\u2500\u2500 SIG \u2514\u2500\u2500 messaging \u251c\u2500\u2500 modules \u251c\u2500\u2500 rpms \u2502 \u2514\u2500\u2500 somemq \u2514\u2500\u2500 sources \u2514\u2500\u2500 somemq This isn't a strict requirement, but could be good for organization purposes. Access to a SIG Group \u00b6 SIG group access is typically obtained by contacting a sponsor (as found in Account Services) and requesting access to be a part of the SIG. Once you have been added to the group, you will be able to do work within the SIG. Other Groups \u00b6 There are other groups in the Rocky GitLab, where they are generally not for RPM's. They could contain: A team's source code A team's set of tools or scripts Other miscellanous metadata The below are current groups and their current purpose. These groups are generally not for RPM's (this is not an all encompassing list). rocky -> This group is for Rocky scripts, tools, and metadata Release Engineering -> This group is specifically for the release engineering team Public -> Data and code that is deemed for public view Infrastructure -> This group is specifically for the infrastructure team. Public -> Data and code that is deemed for public view","title":"Git Guidelines"},{"location":"guidelines/git_guidelines/#contact-information","text":"Owner Release Engineering Team Mattermost Contacts @label @mustafa @skip77 @sherif @pgreco Mattermost Channels ~Dev/Packaging ~Dev/General IRC Contacts Sokel","title":"Contact Information"},{"location":"guidelines/git_guidelines/#general-information","text":"Git is a core component of the Rocky Linux build ecosystem, RESF projects, and thus a mode of the development process for the distribution and available software. GitLab is the software used for storing mostly RPM SPEC files, patches, configurations for debranding/modification to packages, and some scripts/utilities. It may contain some source code depending on the use case. Gitea is used for RESF, its projects, its code, and potentially other components that are not applicable for use in our GitLab instance.","title":"General Information"},{"location":"guidelines/git_guidelines/#expectations","text":"This section goes over the expectations of using the Git service.","title":"Expectations"},{"location":"guidelines/git_guidelines/#general-expectations","text":"Most of this information is covered in our Git Contributor Agreement . However, we are duplicating the information here for all readers. Moderation is enforced - As is done in the Rocky Linux Mattermost chat, it is important to mind your language and word choice whether in Git issues or the Bug Tracker. A valid GPG key must be uploaded and used to sign your commits - Signed commits, as a general rule are recommended. Expect that most projects will have unsigned commits disabled. Do not treat git as an issue tracker - All issues for Rocky Linux should be tracked at our Bug Tracker. As of this writing, automatic issues are opened for build issues. Do not perform your work or changes on a system that is owned by your employer. Do not create personal projects Ensure that your software or work are of a valid open source license (see related links above)","title":"General Expectations"},{"location":"guidelines/git_guidelines/#dos-and-do-nots","text":"Below are a list of do's and do not's as part of our Git, whether some are duplicated information above or below this subsection. They are placed here for further emphasis. DO: Fork repositories and create pull requests where needed Ensure software/source code brought into the Git services are of a valid open source license (see related links above) Upload a valid GPG key and sign your commits DON'T: Treat any Git service as a Rocky Linux issue tracker Create personal projects under your namespace (see exceptions) Perform your work or changes on a system that is owned by your employer","title":"Do's and Do not's"},{"location":"guidelines/git_guidelines/#exceptions","text":"Exceptions to personal projects under your namespace would be for code that will be utilized in some way for the Rocky ecosystem, whether directly, indirectly (eg for people.rocky).","title":"Exceptions"},{"location":"guidelines/git_guidelines/#source-code-for-sigs-or-other-software","text":"To be populated.","title":"Source Code (for SIGs or other software)"},{"location":"guidelines/git_guidelines/#rpm-system","text":"This section goes over the RPM system, such as importing, patching, and how it ultimately gets built into a binary RPM.","title":"RPM System"},{"location":"guidelines/git_guidelines/#current-rpm-structure","text":"The current RPM structure is designed to allow the orchestrator tool to import sources and then patch them accordingly if required. It also allows AppStream modules to be supported and manageable with their required YAML files. There are three primary groups: original : contains RPM spec data that are from Rocky, such as release and logos staging : contains RPM spec data for the staging channel, such as testing the tools in that they operate and function correctly, and to test the build process. release : contains RPM spec data for the release channel, which would be the actual release that users will consume. . \u251c\u2500\u2500 original \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 patch \u2502 \u2514\u2500\u2500 rpms \u251c\u2500\u2500 release \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 patch \u2502 \u2514\u2500\u2500 rpms \u2514\u2500\u2500 staging \u251c\u2500\u2500 modules \u251c\u2500\u2500 patch \u2514\u2500\u2500 rpms Each group has three subgroups: modules group is used to store repos that hold YAML files. The YAML files define the module that will exist in the AppStream repository. patch group is used to hold the configuration for distrobuild to pick up and patch or perform other tasks as it pertains to the RPM. rpms group is used as the final output/import of the RPM spec file and patches after it has been patched (if applicable) and is then used/picked up to build the SRPM and send to koji for build. Note that SIGs or projects that plan on using the build system should be following this methodology.","title":"Current RPM Structure"},{"location":"guidelines/git_guidelines/#rpm-patching-structure","text":"For the patch configuration, the layout must be followed strictly to ensure a SPEC file or its sources are modified accordingly. Here's an example below. . \u2514\u2500\u2500 ROCKY \u251c\u2500\u2500 CFG \u2502 \u2514\u2500\u2500 browser.cfg \u2514\u2500\u2500 _supporting \u251c\u2500\u2500 Bug-1238661---fix-mozillaSignalTrampoline-to-work-.patch \u251c\u2500\u2500 Bug-1526653---fix_user_vfp_armv7.patch \u2514\u2500\u2500 firefox-rocky-default-prefs.js At the top level, the ROCKY folder will hold two additional folders, CFG and _supporting . The CFG directory will contain files that end in .cfg that tell the orchestrator what to do to the imports coming in the form of an action. Action { file: \"OriginalFile\" with_file: \"ROCKY/_supporting/RockyReplaceFile\" } This goes into further detail at our Debrand HowTo page.","title":"RPM Patching Structure"},{"location":"guidelines/git_guidelines/#branch-strategy","text":"Typically when making a patch repo, the main branch is where everything should be. However, there are cases where this is not sufficient, especially in the case of major release version differences. Here's a general idea/example of how the branches will work: main is the universal branch that is always used during a patch r8 is the Rocky 8 branch, specific to patching the corresponding RPM specs/patches for 8 r9 would be for Rocky 9 etc... In practice when the patch process occurs, the main branch is parsed first and applied, and then if there is a corresponding r8 branch, it would apply that next. There are cases too where main can be empty and you'll just have a r8 branch. This is acceptable and will still work. Note that with this strategy, it is recommended to never merge branches. Try to keep them separated where as best as possible and where absolutely needed.","title":"Branch Strategy"},{"location":"guidelines/git_guidelines/#submitting-a-potential-patch","text":"There are a few ways to submit a patch to fix build issues in the main distribution. This section will break down some examples of ways you can put in a fix request for review.","title":"Submitting a Potential Patch"},{"location":"guidelines/git_guidelines/#patch-repo-doesnt-exist","text":"If there is a package failing, or you are looking to submit a patch for example to allow something to compile correctly on another architecture (eg armv7 / armhfp ), or perhaps you found a piece of the base that was not debranded properly, generally a bug report should be opened at our Bug Tracker with relevant information and logs. Opening a project under your namespace can be done and can eventually be transferred in into staging after review.","title":"Patch Repo Doesn't Exist"},{"location":"guidelines/git_guidelines/#patch-repo-exists","text":"If there is a package failing because of a failing current patch, or a new patch is required, perhaps debranding must occur, you generally: Fork the repo into your namespace Make the relevant changes Apply for a merge request/pull request An appropriate bug tracking ticket should be opened, if not opened already (or automatically) to ensure there is documentation for this change.","title":"Patch Repo Exists"},{"location":"guidelines/git_guidelines/#sig-groups-projects","text":"This section covers SIG groups and projects that exist within the Rocky Linux git service. SIGs may have RPM specs, scripts, or even their own software. The sections below will cover the format and expectations of these groups and projects.","title":"SIG Groups + Projects"},{"location":"guidelines/git_guidelines/#general-overview","text":"A SIG is a S pecial I nterest G roup(s). SIGs are smaller groups within the Rocky community that focus on a small set of issues or exist solely for the awareness or focus on topics. This section does not cover the requirements of a SIG's existence. It is expected that a SIG may end up having repositories with packages that can add-on to a Rocky Linux system. However, some SIGs do not function in this manner. In the case that they do function in this manner, they will typically have a section in the git service under the SIG group.","title":"General Overview"},{"location":"guidelines/git_guidelines/#structure","text":"Using the RPM Structure as a guide, the general idea is the same. A patch group may not be needed, but could be useful. An example of how a SIG could set up their group could be like this: . \u2514\u2500\u2500 SIG \u2514\u2500\u2500 messaging \u251c\u2500\u2500 modules \u251c\u2500\u2500 rpms \u2502 \u2514\u2500\u2500 somemq \u2514\u2500\u2500 somemq In this example, source code for the software somemq would be under the messaging subgroup under SIG . And then an RPM spec for that software, for that SIG, would sit under rpms as expected. However, you can further organize this further if you wish. . \u2514\u2500\u2500 SIG \u2514\u2500\u2500 messaging \u251c\u2500\u2500 modules \u251c\u2500\u2500 rpms \u2502 \u2514\u2500\u2500 somemq \u2514\u2500\u2500 sources \u2514\u2500\u2500 somemq This isn't a strict requirement, but could be good for organization purposes.","title":"Structure"},{"location":"guidelines/git_guidelines/#access-to-a-sig-group","text":"SIG group access is typically obtained by contacting a sponsor (as found in Account Services) and requesting access to be a part of the SIG. Once you have been added to the group, you will be able to do work within the SIG.","title":"Access to a SIG Group"},{"location":"guidelines/git_guidelines/#other-groups","text":"There are other groups in the Rocky GitLab, where they are generally not for RPM's. They could contain: A team's source code A team's set of tools or scripts Other miscellanous metadata The below are current groups and their current purpose. These groups are generally not for RPM's (this is not an all encompassing list). rocky -> This group is for Rocky scripts, tools, and metadata Release Engineering -> This group is specifically for the release engineering team Public -> Data and code that is deemed for public view Infrastructure -> This group is specifically for the infrastructure team. Public -> Data and code that is deemed for public view","title":"Other Groups"},{"location":"guidelines/maillist_guidelines/","text":"Before Posting to a list \u00b6 There are a number of ways you can find help within your system. If you don't find the answer there, try to look into the list archives before posting a question. This is a high volume list and chances are that someone has already had the same problem you are now trying to fix. See Useful Resources below for a list of places to try. Refer to this presentation on mail etiquette that you should follow. Still stuck? \u00b6 If you cannot find an answer after searching the archives or by using the resources described below, then writing to the list is a good idea. The guidelines below were written and adapted to make sure your message gets the attention it needs to be read and answered. Keep in mind that while there may be many users on the lists, your post may go unanswered, even when following these guidelines. (See section below re: nudging ) Posting to the list should not be considered a guaranteed method of receiving support. Posting Guidelines \u00b6 Be Courteous \u00b6 Be courteous and polite to fellow members in the list. Never swear or be rude to anyone. When you interact with people on any of the RESF mailing lists (or indeed on any communication platform), you are expected to act in accordance with our Community Charter and its values. Keep it Short \u00b6 Most RESF Lists maintain a maximum message length of 40 kilobytes. Remember that your message will be copied potentially thousands of times when being delivered into people's mailboxes. It is wise to keep your messages as short as possible. Avoid including log output (select only the most relevant lines, or place the log on a website or in a pastebin instead) or excessively quoting previous messages in the thread (trim the quoted text down to the most recent/relevant messages only). No attachments \u00b6 Attachments to email make the messages much bigger. They create an enormous amount of extra Internet traffic when a mailing list sends the message and attachments to thousands of people worldwide. They also can create problems for the recipients, who may be limited to low-bandwidth connections. A reader may not know they are downloading an email with a very large attachment until it is too late, and they might be blocked from getting other mail until they finish that download, which makes them frustrated. Don't use attachments to your email. Instead, post a file in a pastebin , or elsewhere on the web, and include a URL to that file in your email, not the file itself. Lastly, we have to store the attachments. We don't want to store too many :-) Starting a New Subject \u00b6 When you send in a new topic, do not start by replying to an existing message, but rather, start a new message to \"rocky@lists.resf.org\". This keeps messages organized by thread, for people who like to use threads (on high-volume mailing lists like this one, threads can be a great convenience). Furthermore, please do not recycle messages. Recycling messages is replying to an existing thread by changing the thread name. This creates confusion and diverts the number of people replying to the topic. For details see https://web.archive.org/web/20070219193422/http://mm.bbspals.org/message-recycling/ Write a Good Subject Line \u00b6 Make a subject line that clearly tells us what you need. This is a point that can't be overemphasized. Try \"Crash after setting up disks in Rocky 8.5\" instead of \"Can't install!!\" Why? So that people with certain skills, looking for someone to help, will notice your message. That helps you get help from the right people quickly. On a high volume lists, many people just skim through the subject lines and only read the messages that catch their interest. So, by creating a good subject line, you increase the chances that your message is actually going to be read and eventually answered. If You Are Replying to a Message \u00b6 Make sure we can tell what you are replying to. Place each part of your reply after the text it addresses (i.e., NO Top-Posting, please see \" Wikipedia - Top Posting \" and links therein for more on this). Most mail readers automatically put a '>' character in front of each replied-to line. It gives a conversational flow to the text, and people know what you're replying to. Trim irrelevant material. It makes it easier to read your reply and helps the reader to stay on subject. Using bottom, interleaved posting is recommended as it is more organised. The fact that you're sending the email from a smart-phone or similar device doesn't invalidate those guidelines. Please consider sending the reply at a later time when you have access to your regular email system or send a private reply instead. Replying to Digests \u00b6 In a some high volume lists, you may choose to receive mails in digested mode. However when replying to such messages, please avoid just hitting the reply button. This creates meaningless messages like \"Re: Rocky-Mirror Digest, Vol 7, Issue 193\" which does not reflect what you are talking about. Please do the following: edit the subject to reflect what topic you are talking about snip out all the irrelevant parts of the digest other than the post to which you are directly replying Let Us Know When Your Question is Answered \u00b6 When you get a solution to your question (or find it yourself after posting to the list), reply to your original e-mail describing what solved your problem, adding a [SOLVED] to the end of the subject line. This will let people know that you don't need help any more with this and can look for other posts to help. Also, it makes a search in the archives easier when someone has a related problem in the future. Commercial messages \u00b6 Commercial messages, including job postings, are not currently allowed on the RESF mailing lists. Behavioral guidelines \u00b6 If a mail has offended you personally, please send a private message to the person expressing how you feel, instead of sending it to the mailing list. Please remember that we have members from all genders and nationalities. No gender abuse is allowed on the list, and do not include any gender specific slang in your posts. Also do not indulge in racial or regional criticism. This is a very serious violation. Be careful when using sarcasm and humour. Without face to face communications your joke may be viewed as criticism. When being humourous, use emoticons (smileys) to express humour. (tilt your head to the left to see the emoticon smile) :-) = happy face for humour. Behave in a professional manner in the mailing lists. Any mistake could put you under the scanner and at the receiving end of much rebuke. While uncommon, list moderators and administrators do monitor the lists and will take action on users found to be in violation of these guidelines. Do not Cross Post \u00b6 Avoid posting to multiple lists simultaneously. Pick a mailing list that is most suitable for your post and just use that. CC'ing multiple lists should be avoided. Post to the the mailing list that is most suited to your purpose and then just copy the link to that page or mailing list and paste to all the other mailing lists you want to post to. This will reduce the amount of data duplicated - only one copy will be accessed by all who read it. http://en.wikipedia.org/wiki/Crossposting Stay on-topic \u00b6 Make sure your topic is relevant to the chosen mailing list. For example, sending a political petition not related to the purpose of the list. In turn, replying on list to an off-topic post tends to magnify the problem. Unsubscribing \u00b6 To unsubscribe from the list you can visit the web page for the list at https://lists.resf.org or by sending an email to $listname-leave@lists.resf.org Use the common language \u00b6 Unless you are a RESF mailing list that is dedicated to users speaking that particular language, communicate in English. Other languages might be ignored merely because the users in these lists might only know English or use it as their common language. Refer to the Communicating and getting help page for more information on other mailing lists. Use standard language and not colloquial or regionally accepted abbreviations. Visit http://www.jargon.org for more such acronyms. Use the universally accepted standard English. Always do a spell check before mailing to the list. Grammar doesn't matter as long as one is understood. Do not use SMS language. Do not use dots(\".....\") to conclude the sentences as is common across social networks. Avoid long signatures and disclaimers \u00b6 We find value in your main content rather than signatures. One or two lines would be optimal to convey messages that must be included in your signature and avoid huge disclaimers describing how your mail is private and confidential while sending things to the mailing list. No chain letters \u00b6 Never send chain letters to the mailing list. A mail simultaneously sent to more than 10 users will not reach the list. This is to eliminate possible spammers/bulk mailers to reach the list. Do not use ALL CAPITALS \u00b6 Using capital letters in your sentences is considered shouting. It is considered as being rude. If you want to emphasize on something use this or this . Avoid repetitive posting \u00b6 Often people helping on the mailing lists are volunteers who, just like you, have busy lives. If you do not get a response within a few minutes or hours, avoid re-posting the same question repeatedly. Give a minimum of 24-48 hours for an answer, and if you don't have one by then, give a \"nudge\" to the list by replying to (not re-posting) your original message. Please read all your mails before replying to a mail. Someone may have already answered it. Useful resources \u00b6 Getting Help From Your System \u00b6 There are many ways to get information from your system. Get a terminal window by right clicking on the desktop. In the window type one of the following (without the '$', and substitute application-name with the name of the application you are having trouble with). $ man application-name $ info application-name name $ locate stuff-you-want-to-know-about $ rpm -qd packagename Documentation \u00b6 The Rocky Linux Documentation Team is working hard to provide excellent documentation for the project. You can see their efforts in: Rocky Linux Documentation Index Rocky Linux Release Notes Rocky Linux Installation Guide Rocky Linux Migration Guide Rocky Linux is also based on Red Hat Enterprise Linux, so RHEL documentation should be helpful for users of EL distributions like Rocky. Red Hat Documentation Index Red Hat Enterprise Linux Manuals List Archives \u00b6 Mailing list archives can be browsed using Hyperkitty at the link below: Lists.resf.org Archives Mailing List \u00b6 If you encounter any issues or problems regarding a mailing list setup or its operation, please contact the list administrators rather than posting to the list about the problem. For lists on resf.org, you may reach the list owners at $listname-owner@lists.resf.org. There is a link to the -owner address at the bottom of the listinfo page for each list. Search It! \u00b6 https://duckduckgo.com https://google.com Try to narrow down search terms using a list name (e.g. rocky users ) or by including site:lists.resf.org in your search query, which would search all the archives. Acknowledgements \u00b6 This document includes (in part or in whole) content adapted from Fedora's Mailing List Guidelines . We thank them for their continued work on these guidelines and commitment to nettiquite. Please see their own acknowledgements for more information","title":"RESF Mailing List Guidelines"},{"location":"guidelines/maillist_guidelines/#before-posting-to-a-list","text":"There are a number of ways you can find help within your system. If you don't find the answer there, try to look into the list archives before posting a question. This is a high volume list and chances are that someone has already had the same problem you are now trying to fix. See Useful Resources below for a list of places to try. Refer to this presentation on mail etiquette that you should follow.","title":"Before Posting to a list"},{"location":"guidelines/maillist_guidelines/#still-stuck","text":"If you cannot find an answer after searching the archives or by using the resources described below, then writing to the list is a good idea. The guidelines below were written and adapted to make sure your message gets the attention it needs to be read and answered. Keep in mind that while there may be many users on the lists, your post may go unanswered, even when following these guidelines. (See section below re: nudging ) Posting to the list should not be considered a guaranteed method of receiving support.","title":"Still stuck?"},{"location":"guidelines/maillist_guidelines/#posting-guidelines","text":"","title":"Posting Guidelines"},{"location":"guidelines/maillist_guidelines/#be-courteous","text":"Be courteous and polite to fellow members in the list. Never swear or be rude to anyone. When you interact with people on any of the RESF mailing lists (or indeed on any communication platform), you are expected to act in accordance with our Community Charter and its values.","title":"Be Courteous"},{"location":"guidelines/maillist_guidelines/#keep-it-short","text":"Most RESF Lists maintain a maximum message length of 40 kilobytes. Remember that your message will be copied potentially thousands of times when being delivered into people's mailboxes. It is wise to keep your messages as short as possible. Avoid including log output (select only the most relevant lines, or place the log on a website or in a pastebin instead) or excessively quoting previous messages in the thread (trim the quoted text down to the most recent/relevant messages only).","title":"Keep it Short"},{"location":"guidelines/maillist_guidelines/#no-attachments","text":"Attachments to email make the messages much bigger. They create an enormous amount of extra Internet traffic when a mailing list sends the message and attachments to thousands of people worldwide. They also can create problems for the recipients, who may be limited to low-bandwidth connections. A reader may not know they are downloading an email with a very large attachment until it is too late, and they might be blocked from getting other mail until they finish that download, which makes them frustrated. Don't use attachments to your email. Instead, post a file in a pastebin , or elsewhere on the web, and include a URL to that file in your email, not the file itself. Lastly, we have to store the attachments. We don't want to store too many :-)","title":"No attachments"},{"location":"guidelines/maillist_guidelines/#starting-a-new-subject","text":"When you send in a new topic, do not start by replying to an existing message, but rather, start a new message to \"rocky@lists.resf.org\". This keeps messages organized by thread, for people who like to use threads (on high-volume mailing lists like this one, threads can be a great convenience). Furthermore, please do not recycle messages. Recycling messages is replying to an existing thread by changing the thread name. This creates confusion and diverts the number of people replying to the topic. For details see https://web.archive.org/web/20070219193422/http://mm.bbspals.org/message-recycling/","title":"Starting a New Subject"},{"location":"guidelines/maillist_guidelines/#write-a-good-subject-line","text":"Make a subject line that clearly tells us what you need. This is a point that can't be overemphasized. Try \"Crash after setting up disks in Rocky 8.5\" instead of \"Can't install!!\" Why? So that people with certain skills, looking for someone to help, will notice your message. That helps you get help from the right people quickly. On a high volume lists, many people just skim through the subject lines and only read the messages that catch their interest. So, by creating a good subject line, you increase the chances that your message is actually going to be read and eventually answered.","title":"Write a Good Subject Line"},{"location":"guidelines/maillist_guidelines/#if-you-are-replying-to-a-message","text":"Make sure we can tell what you are replying to. Place each part of your reply after the text it addresses (i.e., NO Top-Posting, please see \" Wikipedia - Top Posting \" and links therein for more on this). Most mail readers automatically put a '>' character in front of each replied-to line. It gives a conversational flow to the text, and people know what you're replying to. Trim irrelevant material. It makes it easier to read your reply and helps the reader to stay on subject. Using bottom, interleaved posting is recommended as it is more organised. The fact that you're sending the email from a smart-phone or similar device doesn't invalidate those guidelines. Please consider sending the reply at a later time when you have access to your regular email system or send a private reply instead.","title":"If You Are Replying to a Message"},{"location":"guidelines/maillist_guidelines/#replying-to-digests","text":"In a some high volume lists, you may choose to receive mails in digested mode. However when replying to such messages, please avoid just hitting the reply button. This creates meaningless messages like \"Re: Rocky-Mirror Digest, Vol 7, Issue 193\" which does not reflect what you are talking about. Please do the following: edit the subject to reflect what topic you are talking about snip out all the irrelevant parts of the digest other than the post to which you are directly replying","title":"Replying to Digests"},{"location":"guidelines/maillist_guidelines/#let-us-know-when-your-question-is-answered","text":"When you get a solution to your question (or find it yourself after posting to the list), reply to your original e-mail describing what solved your problem, adding a [SOLVED] to the end of the subject line. This will let people know that you don't need help any more with this and can look for other posts to help. Also, it makes a search in the archives easier when someone has a related problem in the future.","title":"Let Us Know When Your Question is Answered"},{"location":"guidelines/maillist_guidelines/#commercial-messages","text":"Commercial messages, including job postings, are not currently allowed on the RESF mailing lists.","title":"Commercial messages"},{"location":"guidelines/maillist_guidelines/#behavioral-guidelines","text":"If a mail has offended you personally, please send a private message to the person expressing how you feel, instead of sending it to the mailing list. Please remember that we have members from all genders and nationalities. No gender abuse is allowed on the list, and do not include any gender specific slang in your posts. Also do not indulge in racial or regional criticism. This is a very serious violation. Be careful when using sarcasm and humour. Without face to face communications your joke may be viewed as criticism. When being humourous, use emoticons (smileys) to express humour. (tilt your head to the left to see the emoticon smile) :-) = happy face for humour. Behave in a professional manner in the mailing lists. Any mistake could put you under the scanner and at the receiving end of much rebuke. While uncommon, list moderators and administrators do monitor the lists and will take action on users found to be in violation of these guidelines.","title":"Behavioral guidelines"},{"location":"guidelines/maillist_guidelines/#do-not-cross-post","text":"Avoid posting to multiple lists simultaneously. Pick a mailing list that is most suitable for your post and just use that. CC'ing multiple lists should be avoided. Post to the the mailing list that is most suited to your purpose and then just copy the link to that page or mailing list and paste to all the other mailing lists you want to post to. This will reduce the amount of data duplicated - only one copy will be accessed by all who read it. http://en.wikipedia.org/wiki/Crossposting","title":"Do not Cross Post"},{"location":"guidelines/maillist_guidelines/#stay-on-topic","text":"Make sure your topic is relevant to the chosen mailing list. For example, sending a political petition not related to the purpose of the list. In turn, replying on list to an off-topic post tends to magnify the problem.","title":"Stay on-topic"},{"location":"guidelines/maillist_guidelines/#unsubscribing","text":"To unsubscribe from the list you can visit the web page for the list at https://lists.resf.org or by sending an email to $listname-leave@lists.resf.org","title":"Unsubscribing"},{"location":"guidelines/maillist_guidelines/#use-the-common-language","text":"Unless you are a RESF mailing list that is dedicated to users speaking that particular language, communicate in English. Other languages might be ignored merely because the users in these lists might only know English or use it as their common language. Refer to the Communicating and getting help page for more information on other mailing lists. Use standard language and not colloquial or regionally accepted abbreviations. Visit http://www.jargon.org for more such acronyms. Use the universally accepted standard English. Always do a spell check before mailing to the list. Grammar doesn't matter as long as one is understood. Do not use SMS language. Do not use dots(\".....\") to conclude the sentences as is common across social networks.","title":"Use the common language"},{"location":"guidelines/maillist_guidelines/#avoid-long-signatures-and-disclaimers","text":"We find value in your main content rather than signatures. One or two lines would be optimal to convey messages that must be included in your signature and avoid huge disclaimers describing how your mail is private and confidential while sending things to the mailing list.","title":"Avoid long signatures and disclaimers"},{"location":"guidelines/maillist_guidelines/#no-chain-letters","text":"Never send chain letters to the mailing list. A mail simultaneously sent to more than 10 users will not reach the list. This is to eliminate possible spammers/bulk mailers to reach the list.","title":"No chain letters"},{"location":"guidelines/maillist_guidelines/#do-not-use-all-capitals","text":"Using capital letters in your sentences is considered shouting. It is considered as being rude. If you want to emphasize on something use this or this .","title":"Do not use ALL CAPITALS"},{"location":"guidelines/maillist_guidelines/#avoid-repetitive-posting","text":"Often people helping on the mailing lists are volunteers who, just like you, have busy lives. If you do not get a response within a few minutes or hours, avoid re-posting the same question repeatedly. Give a minimum of 24-48 hours for an answer, and if you don't have one by then, give a \"nudge\" to the list by replying to (not re-posting) your original message. Please read all your mails before replying to a mail. Someone may have already answered it.","title":"Avoid repetitive posting"},{"location":"guidelines/maillist_guidelines/#useful-resources","text":"","title":"Useful resources"},{"location":"guidelines/maillist_guidelines/#getting-help-from-your-system","text":"There are many ways to get information from your system. Get a terminal window by right clicking on the desktop. In the window type one of the following (without the '$', and substitute application-name with the name of the application you are having trouble with). $ man application-name $ info application-name name $ locate stuff-you-want-to-know-about $ rpm -qd packagename","title":"Getting Help From Your System"},{"location":"guidelines/maillist_guidelines/#documentation","text":"The Rocky Linux Documentation Team is working hard to provide excellent documentation for the project. You can see their efforts in: Rocky Linux Documentation Index Rocky Linux Release Notes Rocky Linux Installation Guide Rocky Linux Migration Guide Rocky Linux is also based on Red Hat Enterprise Linux, so RHEL documentation should be helpful for users of EL distributions like Rocky. Red Hat Documentation Index Red Hat Enterprise Linux Manuals","title":"Documentation"},{"location":"guidelines/maillist_guidelines/#list-archives","text":"Mailing list archives can be browsed using Hyperkitty at the link below: Lists.resf.org Archives","title":"List Archives"},{"location":"guidelines/maillist_guidelines/#mailing-list","text":"If you encounter any issues or problems regarding a mailing list setup or its operation, please contact the list administrators rather than posting to the list about the problem. For lists on resf.org, you may reach the list owners at $listname-owner@lists.resf.org. There is a link to the -owner address at the bottom of the listinfo page for each list.","title":"Mailing List"},{"location":"guidelines/maillist_guidelines/#search-it","text":"https://duckduckgo.com https://google.com Try to narrow down search terms using a list name (e.g. rocky users ) or by including site:lists.resf.org in your search query, which would search all the archives.","title":"Search It!"},{"location":"guidelines/maillist_guidelines/#acknowledgements","text":"This document includes (in part or in whole) content adapted from Fedora's Mailing List Guidelines . We thank them for their continued work on these guidelines and commitment to nettiquite. Please see their own acknowledgements for more information","title":"Acknowledgements"},{"location":"include/content_bottom/","text":"Additional Information Contact Disclaimer License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at info@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Content bottom"},{"location":"include/releng/resources_bottom/","text":"Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Resources bottom"},{"location":"include/testing/qa_content_example_only/","text":"CONTENT EXAMPLE ONLY Content on this page may be copy-pasta from Fedora Quality Assurance documents and needs to be replaced and/or reviewed before publishing for applicability for Rocky Linux.","title":"Qa content example only"},{"location":"include/testing/qa_testcase_bottom/","text":"Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Qa testcase bottom"},{"location":"include/testing/qa_testcase_supported_systems/","text":"Supported Systems and Hardware Classes x86_64 aarch64 ppc64 s309x TBD TBD TBD TBD","title":"Qa testcase supported systems"},{"location":"include/testing/rc_content_bottom/","text":"Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Release Requirements documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Rc content bottom"},{"location":"include/testing/rc_content_example_only/","text":"CONTENT EXAMPLE ONLY Content on this page may be copied from Fedora Release Requirements documentation and needs to be replaced and/or reviewed before publishing for applicability for Rocky Linux.","title":"Rc content example only"},{"location":"irc/","text":"IRC is a common communication tool used in the open source community. Several channels of Mattermost and Libera IRC channels are bridged together to ensure the community can communicate effectively and not be splintered. The Rocky Linux teams manage and maintain the mattermost channels and the various Libera IRC channels such as #rockylinux and #rockylinux-social . A list of our channels can be found in IRC Mattermost Bridge Info on the left hand side of this wiki page. Contact Information \u00b6 IRC/Mattermost Contacts bc @brian IRC/Mattermost Contacts Sokel/label/Sombra @label @nazunalika IRC/Mattermost Contacts mustafa @mustafa IRC/Mattermost Contacts neil @neil IRC/Mattermost Contacts tg @tgo IRC/Mattermost Contacts pgreco @pgreco IRC/Mattermost Contacts pj @pj Bridge Information \u00b6 Current mappings below: IRC Mattermost #rockylinux ~general #rockylinux-devel ~development #rockylinux-docs ~documentation #rockylinux-infra ~infrastructure #rockylinux-legal ~legal #rockylinux-security ~security #rockylinux-sig-altarch ~altarch #rockylinux-sig-kernel ~sig-kernel #rockylinux-social ~off-topic #rockylinux-testing ~testing #rockylinux-www ~web General \u00b6 It is likely that there will be a lot of boxes running Rocky Linux and thus there will be many folks who will occasionally look for help in the main Rocky IRC channel #rockylinux or ~General on mattermost, typically on what the distribution ships. It is important to maintain focus on a Rocky Linux specific matter as the channel does not have the ability nor bandwidth to support non-Rocky Linux topics. Here is a general rule of thumb: Unless a question or thread is about an application or program supplied by Rocky, it is likely off topic (see the exceptions section) Discussing the usage of non-Rocky packages or problems (which the Rocky project has no control over) are off-topic (see exceptions ) Polling for general usage/preferences or other opinion matter is considered off-topic Requesting support or discussing the usage of other distributions is considered off-topic (more info here ) Exceptions \u00b6 There are cases where it may do more harm than good to deny or to not provide assistance to a user who is using something that others may consider unsupported as a whole. While this is on a case by case basis and we are unable to list all exceptions, these are some of the more obvious exceptions: If the question is related to software in EPEL If a problem is reproducible or its an issue out of our control, it is recommended to go #epel If the question is related to drivers from elrepo It is common for users to be using hardware that is either not supported in a current Rocky release or needs a better driver (eg nouveau -> nvidia). Providing general assistance for getting such drivers should be considered semi-topical. Other issues should go to #elrepo or where topical. What is not supported? \u00b6 Kernel Rebuilds Other Derivatives/Forks This includes, but is not limited to RHEL, OEL, Alma, Springdale, SL Broken \"V\" Servers Old minor/point releases of Rocky Linux Politics or Profanity Distro X is better/worse than Rocky Personal drama from other channels, namespaces, or other users Repeat offenders will be quieted or banned from the #rockylinux* namespace Etiquette \u00b6 This section goes over general etiquette expected of all users of IRC or Mattermost on the bridge. How to ask questions \u00b6 When coming into the IRC or Mattermost channels, it's important to be able to field your question in a manner in which the other users will be able to understand the question and provide assistance. Here's some general ideas: Don't ask to ask - Just ask your question Don't paste large quantities of text into the channel This can be disruptive to users on both sides of the IRC/MM bridge If at all possible, use a paste bin such as rpaste Be patient - You may not get an instant answer. We are all volunteers, so it may take minutes or hours to receive an answer to your question. Read the Topic - The topic may contain useful information you may want to know about. Expectations \u00b6 As #rockylinux is the general Rocky Linux support and discussion channel on Libera, it is not a primary support area for learning Linux or general chatting and off topic matter. Off topic matter should go to #rockylinux-social . With that being said, below is a list of things you should probably be aware of: The channel is filled with supporters of Rocky, end users, volunteers with wide ranges of skillsets and knowledge who use the distribution on a professional or personal level Polite and on-topic people get answers to their queries Insulting, rude, or off topic users are generally ignored or warned for their behavior Consider the human, be civil - Treat people how you would want to be treated Those who are consistently disruptive (or \"trolls\") will be removed from the channel by a quiet or ban The channel can be busy with several threads running in parallel We support what we ship Do not be surprised if you are asked to provide some information about your system rpaste -s uname -a rpm -V packageName If you refuse to provide such information, volunteers may stop trying to assist you. It is normal for a channel to not be all business all the time. Passing snarkiness or even random off topic matter can occur. However, it can be a problem if it takes over the channel, where a user is unable to get their question in or the discussion turns into animosity, insults, or rude behavior (see the above points). A recommendation would be to join the channel and observe for a while to get an idea of how the channel operates; try to avoid dropping in, asking a question, and disappearing. Note : The channels are logged and routinely checked. What is seen in IRC is also seen in Mattermost and vice versa. It is also likely we are not the only ones who monitor the channel. This means that your conversations are considered public. Persistent abusers and those who act out in bad faith in a consistent manner will receive a ban or quiet, if they have been repeatedly warned. If you find you have been banned and do not know why, you may want to ask in #rockylinux-ops and an available channel operator will try to assist you. IRC For Beginners \u00b6 It is possible that you may have not used IRC before. Hopefully this guide will get you started. You will need an IRC client. There are many out there. Here are examples: ChatZilla (firefox add on) Pidgin Kiwi (web client) weechat (text client) irssi (text client) Once you have your IRC client setup/configured, you'll need to go to irc://irc.libera.chat/ . To set your nickname, type /nick nickname in the box and press enter. Note that our channels require users to be registered on Libera in order to participate. Libera chat provides instructions for you to do so here . If you require assistance, you can type /join #libera and request help. Once you have registered and you are identified with NickServ , you can type /join #rockylinux or another related channel. Note that subsequent logins will require you to identify. /msg nickserv identify password will help you to ensure you don't get locked out of the #rockylinux* channels. Matrix \u00b6 If you are a user of Matrix, most of the above still applies to you. You will need to login through the bridge on matrix to login with NickServ on libera. After that, you will be able to communicate in the #rockylinux* channels through your matrix client. Context \u00b6 This section provides context to some things mentioned throughout this document that would've likely crowded the section entirely. These sections may end up on different pages entirely but they are here for now. Kernel Rebuilds \u00b6 Kernel rebuilds are not recommended nor supported for Rocky Linux. Before building a custom kernel or even considering it, ask yourself the following questions: Is the functionality you need available by installing a kernel module from elrepo ? Is the functionality you need available as a separate module from the kernel itself? Are you willing to maintain your own security posture? Are you sure ? Rocky Linux and most other EL derivatives were designed to function as a complete environment. Replacing critical components can affect how the system acts. Are you ABSOLUTELY sure ? 99.9% of the users no longer need to build their own kernel. You may simple need a kernel module/driver, in which case, you can use elrepo or build your own kernel module (kmod/dkms) Are you sure you don't just want a newer kernel version ? Newer kernels can be found at elrepo As a final warning, you if you break the kernel, you are on the hook for your system. Rocky Linux volunteers or developers are unable to assist you with these issues. Broken V Servers \u00b6 Our distribution, like others, use a variant of yum / dnf . All Rocky Linux releases are shipped with dnf and a certain set of matching configuration files (like .repo files). This allows your system to work with the mirror system provided by Rocky. Some downstream forks break these configurations and make their system incompatible with what we provide off the shelf. Regulars (developers/volunteers) will decline to help in this type of scenario. Below are examples of \"broken V servers\" where dnf is either missing, misconfigured, or outright crippled. VPS \u00b6 So you have a VPS and you've discovered dnf is not working as it should. This means you are not using Rocky Linux. If you are using an installation \"based on\" Rocky Linux but dnf is missing, you don't have a real Rocky Linux installation. Common examples of providers who do this: OpenVZ cPanel Plesk webmin Direct Admin BlueQuartz Asterisk Trixbox Elastix The above tend to only install parts of Rocky Linux on their virtual servers and some are known for entirely removing dnf from the system entirely or altering the settings entirely. Typical changes are that they exclude locally modified packages from our base repositories. You can verify this by running grep -ir exclude /etc/{yum,dnf}* which will show what they are excluding. Some will also manage the box outside of the package manager. Why these provides do this is unclear. Regardless of their reasons, this approach is seen negatively as dnf has mechanisms to protect specific packages from change. Before you try anything, please STOP and ask your provider why they removed dnf and how are you supposed to keep your system up to date/secure without it. Wait, you're saying I was lied to? \u00b6 In essence, yes. A true Rocky Linux installation has a Rocky kernel and the rocky-release packages, as well as dnf , without modifications to the contents in /etc/yum.repos.d (other than possibly a local mirror or staged repositories). All dependencies will be satisified and with the exception of configuration files, they will be kept up to date and maintained. A true Rocky Linux system can: Be updated at any time Provide a list of usual groups that is reproducible across systems Has SELinux enforcing by default Has a working firewall by default You will be asked to run some commands by volunteers. Such as: dnf install rpaste -y ; rpaste --sysinfo lsb_release -a ; uname -a ; rpm -V dnf rocky-release rocky-repos ; ls /etc/yum.repos.d/ ; dnf repolist all The former produces a sysinfo output (the package is installed from extras). The second produces multi-line output that you can provide at https://rpa.st. Alternatively, you will be asked just to run uname -a which is typically sufficient enough. When it's clear it's not a Rocky Linux system, the regulars of the channel will not continue to offer further assistance. They do not wish to suggest a course of action that can potentially break your system further. Most regulars cannot and don't know all the ways hosting providers may have altered the functions which a Rocky Linux system provides by default. If you were lied to, we ask that you request your provider to mend their ways. You could ask your provider: Stop misrepresenting what they offer as Rocky Linux Deliver to you what they promised or receive a refund Is it possible to get dnf back? \u00b6 Yes it is possible. However, it may come at a cost of breaking your system. Thus, we cannot provide such advice here.","title":"IRC General Information"},{"location":"irc/#contact-information","text":"IRC/Mattermost Contacts bc @brian IRC/Mattermost Contacts Sokel/label/Sombra @label @nazunalika IRC/Mattermost Contacts mustafa @mustafa IRC/Mattermost Contacts neil @neil IRC/Mattermost Contacts tg @tgo IRC/Mattermost Contacts pgreco @pgreco IRC/Mattermost Contacts pj @pj","title":"Contact Information"},{"location":"irc/#bridge-information","text":"Current mappings below: IRC Mattermost #rockylinux ~general #rockylinux-devel ~development #rockylinux-docs ~documentation #rockylinux-infra ~infrastructure #rockylinux-legal ~legal #rockylinux-security ~security #rockylinux-sig-altarch ~altarch #rockylinux-sig-kernel ~sig-kernel #rockylinux-social ~off-topic #rockylinux-testing ~testing #rockylinux-www ~web","title":"Bridge Information"},{"location":"irc/#general","text":"It is likely that there will be a lot of boxes running Rocky Linux and thus there will be many folks who will occasionally look for help in the main Rocky IRC channel #rockylinux or ~General on mattermost, typically on what the distribution ships. It is important to maintain focus on a Rocky Linux specific matter as the channel does not have the ability nor bandwidth to support non-Rocky Linux topics. Here is a general rule of thumb: Unless a question or thread is about an application or program supplied by Rocky, it is likely off topic (see the exceptions section) Discussing the usage of non-Rocky packages or problems (which the Rocky project has no control over) are off-topic (see exceptions ) Polling for general usage/preferences or other opinion matter is considered off-topic Requesting support or discussing the usage of other distributions is considered off-topic (more info here )","title":"General"},{"location":"irc/#exceptions","text":"There are cases where it may do more harm than good to deny or to not provide assistance to a user who is using something that others may consider unsupported as a whole. While this is on a case by case basis and we are unable to list all exceptions, these are some of the more obvious exceptions: If the question is related to software in EPEL If a problem is reproducible or its an issue out of our control, it is recommended to go #epel If the question is related to drivers from elrepo It is common for users to be using hardware that is either not supported in a current Rocky release or needs a better driver (eg nouveau -> nvidia). Providing general assistance for getting such drivers should be considered semi-topical. Other issues should go to #elrepo or where topical.","title":"Exceptions"},{"location":"irc/#what-is-not-supported","text":"Kernel Rebuilds Other Derivatives/Forks This includes, but is not limited to RHEL, OEL, Alma, Springdale, SL Broken \"V\" Servers Old minor/point releases of Rocky Linux Politics or Profanity Distro X is better/worse than Rocky Personal drama from other channels, namespaces, or other users Repeat offenders will be quieted or banned from the #rockylinux* namespace","title":"What is not supported?"},{"location":"irc/#etiquette","text":"This section goes over general etiquette expected of all users of IRC or Mattermost on the bridge.","title":"Etiquette"},{"location":"irc/#how-to-ask-questions","text":"When coming into the IRC or Mattermost channels, it's important to be able to field your question in a manner in which the other users will be able to understand the question and provide assistance. Here's some general ideas: Don't ask to ask - Just ask your question Don't paste large quantities of text into the channel This can be disruptive to users on both sides of the IRC/MM bridge If at all possible, use a paste bin such as rpaste Be patient - You may not get an instant answer. We are all volunteers, so it may take minutes or hours to receive an answer to your question. Read the Topic - The topic may contain useful information you may want to know about.","title":"How to ask questions"},{"location":"irc/#expectations","text":"As #rockylinux is the general Rocky Linux support and discussion channel on Libera, it is not a primary support area for learning Linux or general chatting and off topic matter. Off topic matter should go to #rockylinux-social . With that being said, below is a list of things you should probably be aware of: The channel is filled with supporters of Rocky, end users, volunteers with wide ranges of skillsets and knowledge who use the distribution on a professional or personal level Polite and on-topic people get answers to their queries Insulting, rude, or off topic users are generally ignored or warned for their behavior Consider the human, be civil - Treat people how you would want to be treated Those who are consistently disruptive (or \"trolls\") will be removed from the channel by a quiet or ban The channel can be busy with several threads running in parallel We support what we ship Do not be surprised if you are asked to provide some information about your system rpaste -s uname -a rpm -V packageName If you refuse to provide such information, volunteers may stop trying to assist you. It is normal for a channel to not be all business all the time. Passing snarkiness or even random off topic matter can occur. However, it can be a problem if it takes over the channel, where a user is unable to get their question in or the discussion turns into animosity, insults, or rude behavior (see the above points). A recommendation would be to join the channel and observe for a while to get an idea of how the channel operates; try to avoid dropping in, asking a question, and disappearing. Note : The channels are logged and routinely checked. What is seen in IRC is also seen in Mattermost and vice versa. It is also likely we are not the only ones who monitor the channel. This means that your conversations are considered public. Persistent abusers and those who act out in bad faith in a consistent manner will receive a ban or quiet, if they have been repeatedly warned. If you find you have been banned and do not know why, you may want to ask in #rockylinux-ops and an available channel operator will try to assist you.","title":"Expectations"},{"location":"irc/#irc-for-beginners","text":"It is possible that you may have not used IRC before. Hopefully this guide will get you started. You will need an IRC client. There are many out there. Here are examples: ChatZilla (firefox add on) Pidgin Kiwi (web client) weechat (text client) irssi (text client) Once you have your IRC client setup/configured, you'll need to go to irc://irc.libera.chat/ . To set your nickname, type /nick nickname in the box and press enter. Note that our channels require users to be registered on Libera in order to participate. Libera chat provides instructions for you to do so here . If you require assistance, you can type /join #libera and request help. Once you have registered and you are identified with NickServ , you can type /join #rockylinux or another related channel. Note that subsequent logins will require you to identify. /msg nickserv identify password will help you to ensure you don't get locked out of the #rockylinux* channels.","title":"IRC For Beginners"},{"location":"irc/#matrix","text":"If you are a user of Matrix, most of the above still applies to you. You will need to login through the bridge on matrix to login with NickServ on libera. After that, you will be able to communicate in the #rockylinux* channels through your matrix client.","title":"Matrix"},{"location":"irc/#context","text":"This section provides context to some things mentioned throughout this document that would've likely crowded the section entirely. These sections may end up on different pages entirely but they are here for now.","title":"Context"},{"location":"irc/#kernel-rebuilds","text":"Kernel rebuilds are not recommended nor supported for Rocky Linux. Before building a custom kernel or even considering it, ask yourself the following questions: Is the functionality you need available by installing a kernel module from elrepo ? Is the functionality you need available as a separate module from the kernel itself? Are you willing to maintain your own security posture? Are you sure ? Rocky Linux and most other EL derivatives were designed to function as a complete environment. Replacing critical components can affect how the system acts. Are you ABSOLUTELY sure ? 99.9% of the users no longer need to build their own kernel. You may simple need a kernel module/driver, in which case, you can use elrepo or build your own kernel module (kmod/dkms) Are you sure you don't just want a newer kernel version ? Newer kernels can be found at elrepo As a final warning, you if you break the kernel, you are on the hook for your system. Rocky Linux volunteers or developers are unable to assist you with these issues.","title":"Kernel Rebuilds"},{"location":"irc/#broken-v-servers","text":"Our distribution, like others, use a variant of yum / dnf . All Rocky Linux releases are shipped with dnf and a certain set of matching configuration files (like .repo files). This allows your system to work with the mirror system provided by Rocky. Some downstream forks break these configurations and make their system incompatible with what we provide off the shelf. Regulars (developers/volunteers) will decline to help in this type of scenario. Below are examples of \"broken V servers\" where dnf is either missing, misconfigured, or outright crippled.","title":"Broken V Servers"},{"location":"irc/#vps","text":"So you have a VPS and you've discovered dnf is not working as it should. This means you are not using Rocky Linux. If you are using an installation \"based on\" Rocky Linux but dnf is missing, you don't have a real Rocky Linux installation. Common examples of providers who do this: OpenVZ cPanel Plesk webmin Direct Admin BlueQuartz Asterisk Trixbox Elastix The above tend to only install parts of Rocky Linux on their virtual servers and some are known for entirely removing dnf from the system entirely or altering the settings entirely. Typical changes are that they exclude locally modified packages from our base repositories. You can verify this by running grep -ir exclude /etc/{yum,dnf}* which will show what they are excluding. Some will also manage the box outside of the package manager. Why these provides do this is unclear. Regardless of their reasons, this approach is seen negatively as dnf has mechanisms to protect specific packages from change. Before you try anything, please STOP and ask your provider why they removed dnf and how are you supposed to keep your system up to date/secure without it.","title":"VPS"},{"location":"irc/#wait-youre-saying-i-was-lied-to","text":"In essence, yes. A true Rocky Linux installation has a Rocky kernel and the rocky-release packages, as well as dnf , without modifications to the contents in /etc/yum.repos.d (other than possibly a local mirror or staged repositories). All dependencies will be satisified and with the exception of configuration files, they will be kept up to date and maintained. A true Rocky Linux system can: Be updated at any time Provide a list of usual groups that is reproducible across systems Has SELinux enforcing by default Has a working firewall by default You will be asked to run some commands by volunteers. Such as: dnf install rpaste -y ; rpaste --sysinfo lsb_release -a ; uname -a ; rpm -V dnf rocky-release rocky-repos ; ls /etc/yum.repos.d/ ; dnf repolist all The former produces a sysinfo output (the package is installed from extras). The second produces multi-line output that you can provide at https://rpa.st. Alternatively, you will be asked just to run uname -a which is typically sufficient enough. When it's clear it's not a Rocky Linux system, the regulars of the channel will not continue to offer further assistance. They do not wish to suggest a course of action that can potentially break your system further. Most regulars cannot and don't know all the ways hosting providers may have altered the functions which a Rocky Linux system provides by default. If you were lied to, we ask that you request your provider to mend their ways. You could ask your provider: Stop misrepresenting what they offer as Rocky Linux Deliver to you what they promised or receive a refund","title":"Wait, you're saying I was lied to?"},{"location":"irc/#is-it-possible-to-get-dnf-back","text":"Yes it is possible. However, it may come at a cost of breaking your system. Thus, we cannot provide such advice here.","title":"Is it possible to get dnf back?"},{"location":"rocky/","text":"This section of the wiki goes over general information for Rocky Linux. Treat this part of the wiki as a general resource area for frequently requested information.","title":"Rocky Linux General Information"},{"location":"rocky/repo/","text":"There are several repositories that are provided by Rocky Linux and may differ between major releases. There are also community approved repositories as well, installable typically from the extras repository. About 'enabled' and 'disabled' repository configuration files \u00b6 Please read man 5 dnf.conf , in particular the section of enabled under the REPO section. A line containing enabled=0 or enabled=1 will disable or enable a repository. This can also be modified using dnf config-manager --set-enabled or --set-disabled . When this is done, it is recommended to run dnf clean all . Version Policy \u00b6 During a minor release lifecycle as a package receives updates, the previous version will coexist in the repositories to allow a user to downgrade in case of a regression or other use cases (such as security only updates). Upon new minor release, all previous updates/versions that are not the latest are not carried over. Base Repositories \u00b6 Each major release has a set of repositories that come default with the distribution. Below is a list of common repositories for each major release. As of October 12, 2021, \"Rocky 9\" is projected information based on CentOS Stream 9. Repository Rocky 8 Rocky 9 Enabled BaseOS Yes Yes Yes AppStream Yes Yes Yes PowerTools Yes No No CRB No Yes No HighAvailability Yes Yes No ResilientStorage Yes Yes No Note: CRB is \"Code Ready Builder\" - PowerTools was a carryover from CentOS. Based on information from CentOS Stream 9 (as of October 12, 2021), it may or may not be named CRB in Rocky 9, so it is listed as such for now. Extra Repositories \u00b6 There are extra repositories offered by Rocky Linux. Repository Rocky 8 Rocky 9 Enabled Extras Yes Yes Yes Plus Yes Yes No RT (real time) Yes Yes No NFV Yes TBD No SAP / SAP HANA No TBD No Devel Yes Yes No rockyrpi Yes Yes No Notes on: Extras \u00b6 This repository contains packages that provide some additional functionality to Rocky without breaking upstream compatibility. For example, rpaste used for sending logs, configuration, or system information to our paste bin. These are not tested by upstream nor available in the upstream product. Notes on: Plus \u00b6 This repository contains packages that either A) replace a core component via patched functionality, B) build a component that was originally exclusive for one architecture (eg open-vm-tools built for x86_64 but not aarch64 in Rocky 8) or C) providing packages that were built but not traditionally provided by upstream. Packages that fall under A and B will have a .plus added to their version tag. These are not tested nor available in the upstream product. Community Approved Repositories \u00b6 As with Enterprise Linux and Fedora, there are additional community approved repositories for Rocky Linux. Below are repositories that are approved by Rocky Linux as well as the community. Extra Packages for Enterprise Linux (EPEL) - EPEL is by for the most commonly used repository for Enterprise Linux. EPEL provides rebuilds of Fedora packages for every supported enterprise linux. Packages in this repository do not replace the base. You can install EPEL by running dnf install epel-release and the package will be installed from the extras repository. The package will automatically have EPEL enabled. Support for EPEL can be found in #epel on Libera. Community Enterprise Linux Repository (ELRepo) - ELRepo focuses on newer kernels and kmod driver packages to enhance hardware support for EL8 and beyond. This includes display, filesystem, network, storage drivers. You can install the necessary repo files by running dnf install elrepo-release . Note that the kernel repositories will have to be enabled. RPM Fusion - RPM Fusion provides software that the Fedora Project or Red Hat does not want to ship in Enterprise Linux and Fedora. These repositories do rely on EPEL. The policy is to not replace EPEL nor base packages. The free repository can be installed by running dnf install rpmfusion-free-release . Remi Repository - Remi maintains a large collection of RPMs, including latest versions of PHP, among other things. His FAQ can be found here . This is a collection of repositories. Using the -safe series of repositories will ensure that nothing from the base will be replaced or overwritten. However, be aware that these repositories do not play well with other third party repositories. You will need to use caution as you enable more repositories on your system. GhettoForge - GhettoForge provides packages not in other third party repositories. Packages that overwrite the base would be in the gf-plus repository. Please see usage for more information. Upstream centos-release- * - In the extras repository, there are centos-release-* packages that provide additional repositories from the Special Interest Groups of CentOS. As they are available in extras and should work on Rocky Linux, they are considered approved and community supported.","title":"Rocky Linux Repositories"},{"location":"rocky/repo/#about-enabled-and-disabled-repository-configuration-files","text":"Please read man 5 dnf.conf , in particular the section of enabled under the REPO section. A line containing enabled=0 or enabled=1 will disable or enable a repository. This can also be modified using dnf config-manager --set-enabled or --set-disabled . When this is done, it is recommended to run dnf clean all .","title":"About 'enabled' and 'disabled' repository configuration files"},{"location":"rocky/repo/#version-policy","text":"During a minor release lifecycle as a package receives updates, the previous version will coexist in the repositories to allow a user to downgrade in case of a regression or other use cases (such as security only updates). Upon new minor release, all previous updates/versions that are not the latest are not carried over.","title":"Version Policy"},{"location":"rocky/repo/#base-repositories","text":"Each major release has a set of repositories that come default with the distribution. Below is a list of common repositories for each major release. As of October 12, 2021, \"Rocky 9\" is projected information based on CentOS Stream 9. Repository Rocky 8 Rocky 9 Enabled BaseOS Yes Yes Yes AppStream Yes Yes Yes PowerTools Yes No No CRB No Yes No HighAvailability Yes Yes No ResilientStorage Yes Yes No Note: CRB is \"Code Ready Builder\" - PowerTools was a carryover from CentOS. Based on information from CentOS Stream 9 (as of October 12, 2021), it may or may not be named CRB in Rocky 9, so it is listed as such for now.","title":"Base Repositories"},{"location":"rocky/repo/#extra-repositories","text":"There are extra repositories offered by Rocky Linux. Repository Rocky 8 Rocky 9 Enabled Extras Yes Yes Yes Plus Yes Yes No RT (real time) Yes Yes No NFV Yes TBD No SAP / SAP HANA No TBD No Devel Yes Yes No rockyrpi Yes Yes No","title":"Extra Repositories"},{"location":"rocky/repo/#notes-on-extras","text":"This repository contains packages that provide some additional functionality to Rocky without breaking upstream compatibility. For example, rpaste used for sending logs, configuration, or system information to our paste bin. These are not tested by upstream nor available in the upstream product.","title":"Notes on: Extras"},{"location":"rocky/repo/#notes-on-plus","text":"This repository contains packages that either A) replace a core component via patched functionality, B) build a component that was originally exclusive for one architecture (eg open-vm-tools built for x86_64 but not aarch64 in Rocky 8) or C) providing packages that were built but not traditionally provided by upstream. Packages that fall under A and B will have a .plus added to their version tag. These are not tested nor available in the upstream product.","title":"Notes on: Plus"},{"location":"rocky/repo/#community-approved-repositories","text":"As with Enterprise Linux and Fedora, there are additional community approved repositories for Rocky Linux. Below are repositories that are approved by Rocky Linux as well as the community. Extra Packages for Enterprise Linux (EPEL) - EPEL is by for the most commonly used repository for Enterprise Linux. EPEL provides rebuilds of Fedora packages for every supported enterprise linux. Packages in this repository do not replace the base. You can install EPEL by running dnf install epel-release and the package will be installed from the extras repository. The package will automatically have EPEL enabled. Support for EPEL can be found in #epel on Libera. Community Enterprise Linux Repository (ELRepo) - ELRepo focuses on newer kernels and kmod driver packages to enhance hardware support for EL8 and beyond. This includes display, filesystem, network, storage drivers. You can install the necessary repo files by running dnf install elrepo-release . Note that the kernel repositories will have to be enabled. RPM Fusion - RPM Fusion provides software that the Fedora Project or Red Hat does not want to ship in Enterprise Linux and Fedora. These repositories do rely on EPEL. The policy is to not replace EPEL nor base packages. The free repository can be installed by running dnf install rpmfusion-free-release . Remi Repository - Remi maintains a large collection of RPMs, including latest versions of PHP, among other things. His FAQ can be found here . This is a collection of repositories. Using the -safe series of repositories will ensure that nothing from the base will be replaced or overwritten. However, be aware that these repositories do not play well with other third party repositories. You will need to use caution as you enable more repositories on your system. GhettoForge - GhettoForge provides packages not in other third party repositories. Packages that overwrite the base would be in the gf-plus repository. Please see usage for more information. Upstream centos-release- * - In the extras repository, there are centos-release-* packages that provide additional repositories from the Special Interest Groups of CentOS. As they are available in extras and should work on Rocky Linux, they are considered approved and community supported.","title":"Community Approved Repositories"},{"location":"special_interest_groups/","text":"Special Interest Groups are a core piece of the Rocky Linux community, in which various members of these groups can extend the Enterprise Linux experience, by way of packages, images, or other community engagement. For the case of the wiki, Special Interest Groups are recommended not to have direct wiki pages, but instead maintain their own set of Git generated pages in the form of a wiki (such as with mkdocs). This page will serve as an overview. See the SIG Guide section for specific information such as proposing a SIG, content management, and so on. Current SIGs \u00b6 This section goes over the current SIGs that may have sponsors and are active or has community interest. Some that may be established with sponsors/members \u00b6 SIG Purpose Core Rocky Linux maintainers, packagers, and developers. It is primarily a mix of Release Engineering and Infrastructure AltArch Maintains alternative architectures that is not directly supported by Rocky Linux Desktop Supports and maintains the desktop experience for Rocky Linux Legacy Supports and maintains legacy hardware support for Rocky Linux HPC Maintains High Performance Computing support for Rocky Linux Hyperscale Hyperscale Computing Some that have community interest, but no direct sponsors yet \u00b6 SIG Purpose Cloud Cloud images and infrastructure - May work upstream with Stream for openstack and others as well Kernel Kernels, mainline or otherwise Leapp Focuses on the leapp framework to facilitate upgrades between major versions of Rocky SIG Requirements \u00b6 We expect SIGs to satisfy some basic requirements, such as: The group must be related to Rocky, a use-case for Rocky, or related to Enterprise Linux as a whole There must be feedback and control into the Rocky community All communication as to the work of the SIG should be public - Some matters may have to be private, and as such should be out of band It is expected that each SIG will have a public channel as SIG/name in mattermost. Optionally an IRC channel can also be assigned. Code produced within the SIG must be compatible with a FOSS license presently used by Rocky - If a new license is wanted, consult with Release Engineering/Core or the ~Legal channel in mattermost. All documentation and information of the SIG should be on a wiki produced in git . All documentation produced within the SIG must be a compatible documentation license Groups should be aware/watchful of the direction from the Release Engineering team/Core as it can affect how SIGs operate if they are producing compiled software. SIG Wiki \u00b6 Each SIG should have a wiki that will have documentation for their particular group as well as information on how the group operates. Required information should be as follows: An \"about\" section on the index that explains what the group does/a group description Mission Statement How to Contribute Meeting Information (time, location, other information that they feel is important) Policies and Resources, if applicable SIG Membership \u00b6 The following rules apply for SIG membership: Mailing lists of SIGs are open and can be joined freely SIG members are appointed/approved by SIG sponsors/leaders - The sponsors/leaders typically have write permissions to relevant wikis and git repos SIG sponsors/leaders may be asked to be a mailing list moderator SIG channels will be public under a name such as SIG/name with an optional IRC channel to be bridged. Optionally: define if work with CentOS Stream will be applicable for the SIG SIG Reporting \u00b6 SIGs are expected to report at least quarterly, with a brief summary of what they've accomplished. A suggested outline: Membership update (members joined or parted, sponsor/leader changes) Releases in the current quarter (or previous quarter if no releases) General activity or health report Issues to address within the SIG","title":"Special Interest Groups"},{"location":"special_interest_groups/#current-sigs","text":"This section goes over the current SIGs that may have sponsors and are active or has community interest.","title":"Current SIGs"},{"location":"special_interest_groups/#some-that-may-be-established-with-sponsorsmembers","text":"SIG Purpose Core Rocky Linux maintainers, packagers, and developers. It is primarily a mix of Release Engineering and Infrastructure AltArch Maintains alternative architectures that is not directly supported by Rocky Linux Desktop Supports and maintains the desktop experience for Rocky Linux Legacy Supports and maintains legacy hardware support for Rocky Linux HPC Maintains High Performance Computing support for Rocky Linux Hyperscale Hyperscale Computing","title":"Some that may be established with sponsors/members"},{"location":"special_interest_groups/#some-that-have-community-interest-but-no-direct-sponsors-yet","text":"SIG Purpose Cloud Cloud images and infrastructure - May work upstream with Stream for openstack and others as well Kernel Kernels, mainline or otherwise Leapp Focuses on the leapp framework to facilitate upgrades between major versions of Rocky","title":"Some that have community interest, but no direct sponsors yet"},{"location":"special_interest_groups/#sig-requirements","text":"We expect SIGs to satisfy some basic requirements, such as: The group must be related to Rocky, a use-case for Rocky, or related to Enterprise Linux as a whole There must be feedback and control into the Rocky community All communication as to the work of the SIG should be public - Some matters may have to be private, and as such should be out of band It is expected that each SIG will have a public channel as SIG/name in mattermost. Optionally an IRC channel can also be assigned. Code produced within the SIG must be compatible with a FOSS license presently used by Rocky - If a new license is wanted, consult with Release Engineering/Core or the ~Legal channel in mattermost. All documentation and information of the SIG should be on a wiki produced in git . All documentation produced within the SIG must be a compatible documentation license Groups should be aware/watchful of the direction from the Release Engineering team/Core as it can affect how SIGs operate if they are producing compiled software.","title":"SIG Requirements"},{"location":"special_interest_groups/#sig-wiki","text":"Each SIG should have a wiki that will have documentation for their particular group as well as information on how the group operates. Required information should be as follows: An \"about\" section on the index that explains what the group does/a group description Mission Statement How to Contribute Meeting Information (time, location, other information that they feel is important) Policies and Resources, if applicable","title":"SIG Wiki"},{"location":"special_interest_groups/#sig-membership","text":"The following rules apply for SIG membership: Mailing lists of SIGs are open and can be joined freely SIG members are appointed/approved by SIG sponsors/leaders - The sponsors/leaders typically have write permissions to relevant wikis and git repos SIG sponsors/leaders may be asked to be a mailing list moderator SIG channels will be public under a name such as SIG/name with an optional IRC channel to be bridged. Optionally: define if work with CentOS Stream will be applicable for the SIG","title":"SIG Membership"},{"location":"special_interest_groups/#sig-reporting","text":"SIGs are expected to report at least quarterly, with a brief summary of what they've accomplished. A suggested outline: Membership update (members joined or parted, sponsor/leader changes) Releases in the current quarter (or previous quarter if no releases) General activity or health report Issues to address within the SIG","title":"SIG Reporting"},{"location":"special_interest_groups/sig_guide/","text":"Special Interest Groups are a core piece of the Rocky Linux community, in which various members of these groups can extend the Enterprise Linux experience, by way of packages, images, or other community engagement. Special Interest Groups are typically smaller groups within the main community for the distribution, with specific work on or awareness around a topic related to Rocky Linux and potentially the Enterprise Linux Community as a whole. This guide is for anyone in the Rocky community who are interested in starting, managing, working on/contributing to a Special Interest Group . Note that this guide is always evolving. Each guide page will have references to the resources at the bottom of each page. The list of pages in this guide are listed below: Proposing a SIG Managing Content Building Packages Automated Testing Releasing Packages Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"SIG Guide Overview"},{"location":"special_interest_groups/sig_guide/build/","text":"This section goes over building your packages/content in the Community Build System. CBS (Community Build System) \u00b6 The Community Build System is an extension of Peridot, the build system that is used to build Rocky Linux. Users have an opportunity to use this build system for themselves (like OBS or Copr) or as part of a Special Interest Group. Building in the CBS \u00b6 TBD dist tags \u00b6 It is expected that your SIG will have a \"shorthand\" name assigned to you (either by core or yourself during the proposal). Because of this, it is a requirement that the group project's packages all have it set for the entire scope of the group. For example, if the SIG's name is \"Messaging and Communication\", the shorthand would be \"mc\", and the package would be named: erlang-22.0.7-1.el9.mc.x86_64.rpm Some single word SIGs can be abbreviated too. Like hyperscale can become hs . There may be cases where this isn't possible and exceptions can be granted. cloud is an example of this. Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Building Packages"},{"location":"special_interest_groups/sig_guide/build/#cbs-community-build-system","text":"The Community Build System is an extension of Peridot, the build system that is used to build Rocky Linux. Users have an opportunity to use this build system for themselves (like OBS or Copr) or as part of a Special Interest Group.","title":"CBS (Community Build System)"},{"location":"special_interest_groups/sig_guide/build/#building-in-the-cbs","text":"TBD","title":"Building in the CBS"},{"location":"special_interest_groups/sig_guide/build/#dist-tags","text":"It is expected that your SIG will have a \"shorthand\" name assigned to you (either by core or yourself during the proposal). Because of this, it is a requirement that the group project's packages all have it set for the entire scope of the group. For example, if the SIG's name is \"Messaging and Communication\", the shorthand would be \"mc\", and the package would be named: erlang-22.0.7-1.el9.mc.x86_64.rpm Some single word SIGs can be abbreviated too. Like hyperscale can become hs . There may be cases where this isn't possible and exceptions can be granted. cloud is an example of this.","title":"dist tags"},{"location":"special_interest_groups/sig_guide/content/","text":"This section goes over how to manage content in git and the community build system. Importing to Git \u00b6 Each Special Interest Group will have a subgroup under SIG in git. This subgroup will have additional subgroups, src , rpms , modules . Additional Subgroups While this is the default layout, additional subgroups can be made at the root of the SIG group. It is expected that some SIG's may not have plans to build packages as they could have an entirely separate focus. rpms \u00b6 This area is specifically used for rpm sources (spec file, patches, light text files). The expected format is: SOURCES/... -- light text files, scripts, patches, etc can come here (eg ones not in a tar ball) SPECS/name.spec -- Your spec file comes here - note it should only be one spec file .name.metadata -- Required, lists your source archives or otherwise that will be in lookaside. Empty if there are no sources to pull from lookaside. The metadata file format is expected to be: SHA256SUM_STRING SOURCES/some_name The left column is generally a hashed sum of the archive. This is the name of the file in lookaside. The right side is where the archive will be the location and name of where it will be copied to. For example, the ipa package source name is a sum in lookaside, and during processing, it will be renamed and copied to SOURCES/freeipa-4.9.6.tar.gz : b7b91082908db35e4acbcd0221b8df4044913dc1 SOURCES/freeipa-4.9.6.tar.gz modules \u00b6 This area is specifically used for modularity. If you plan on maintaining multiple versions of a package and want to use modularity, this is the place to do it. The branch names should always match with rpms, especially when there are multiple versions. See the branch section in this document for more information. The name of the module does not necessarily have to match the actual package or package names. For example, the idm module. There is no package named idm , but each package as part of the module have the correct branch names as referenced in the source yaml for the module. The format expected: SOURCES/modulemd.src.txt -- This is the initial module yaml data that will be transformed name.yaml. See this for an example. .name.metadata - Just like rpms, a metadata file is required, even though it will be empty. As of this writing, the name.yaml file generated in the root may be done by the Rocky Automation account. src \u00b6 This area is specifically used for having the source of the rpm. This means that instead of uploading directly to S3, sources can be managed within a repository that matches the name of an rpm in the rpms group, by using dist-git/src-git. This is an optional group and does not have to be used. These are subject to the correct branch names template. Branch Names \u00b6 This is important . main is NOT an acceptable branch name under any cirumstances. You must follow the correct branch name format for your package to be used in the CBS. You must use this format: rX-SIG-PKG_QUALIFIER[-OPTIONAL_VERSION] Let's break it down: X will the rocky major version. For example, r8 SIG will be your SIG name - For example, if it's one word, storage could be used. If it's a multi-word, abbreviate it. For example, Messaging and Communication could just be mc . PKG_QUALIFIER is the name of or the group of packages that you plan on building. For example, gluster . Gluster is more than one package, so each rpm repo would have this in the branch name. OPTIONAL_VERSION is straight forward. If you have multiple versions, you can put a version here. Here's full examples using this format: r8-storage-gluster-9 r8-mc-ejabberd The top one says this is for Rocky Linux 8, storage sig, gluster packages, version 9. It implies there may be a version 10 at some point or there may be a version 8 that is/was there. It also implies there will be different repos per version, so a user could use the gluster 9 repo even though there may be a 10 version. The bottom one says this is for Rocky Linux 8, the mc sig, and the package(s) are for ejabberd, with no specific version listed as it will be continuously updated. Tagging \u00b6 In the case of an rpm or a module, there should be tags associated, otherwise the build system will not pick up your builds. The general format for a tags are as follows: RPM: imports/rX/NEVR (for example, imports/r8/bash-4.4.20-2.el8 is acceptable) Note: You cannot choose a tag/branch destined for one rocky release and build on another. Ensure your tags and branches are in alignment. Module: imports/rX-stream-STREAM_NAME_OR_VERSION/MODULE_NAME-STREAM_NAME_OR_VERSION-X0Y00YYYYMMDDHHMMSS.ZZZZZZZZ Note: X is the major version, Y is the minor version. MODULE_NAME and STREAM_NAME_OR_VERSION are required. Ensure you fill out the timestamp as appropriate. You may fill in the final Z's with a portion of the commit hash that you are using for the tag. Example: imports/r8-stream-1.4/389-ds-1.4-8060020220204145416.ce3e8c9c Importing to S3 \u00b6 TBD Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Managing Content"},{"location":"special_interest_groups/sig_guide/content/#importing-to-git","text":"Each Special Interest Group will have a subgroup under SIG in git. This subgroup will have additional subgroups, src , rpms , modules . Additional Subgroups While this is the default layout, additional subgroups can be made at the root of the SIG group. It is expected that some SIG's may not have plans to build packages as they could have an entirely separate focus.","title":"Importing to Git"},{"location":"special_interest_groups/sig_guide/content/#rpms","text":"This area is specifically used for rpm sources (spec file, patches, light text files). The expected format is: SOURCES/... -- light text files, scripts, patches, etc can come here (eg ones not in a tar ball) SPECS/name.spec -- Your spec file comes here - note it should only be one spec file .name.metadata -- Required, lists your source archives or otherwise that will be in lookaside. Empty if there are no sources to pull from lookaside. The metadata file format is expected to be: SHA256SUM_STRING SOURCES/some_name The left column is generally a hashed sum of the archive. This is the name of the file in lookaside. The right side is where the archive will be the location and name of where it will be copied to. For example, the ipa package source name is a sum in lookaside, and during processing, it will be renamed and copied to SOURCES/freeipa-4.9.6.tar.gz : b7b91082908db35e4acbcd0221b8df4044913dc1 SOURCES/freeipa-4.9.6.tar.gz","title":"rpms"},{"location":"special_interest_groups/sig_guide/content/#modules","text":"This area is specifically used for modularity. If you plan on maintaining multiple versions of a package and want to use modularity, this is the place to do it. The branch names should always match with rpms, especially when there are multiple versions. See the branch section in this document for more information. The name of the module does not necessarily have to match the actual package or package names. For example, the idm module. There is no package named idm , but each package as part of the module have the correct branch names as referenced in the source yaml for the module. The format expected: SOURCES/modulemd.src.txt -- This is the initial module yaml data that will be transformed name.yaml. See this for an example. .name.metadata - Just like rpms, a metadata file is required, even though it will be empty. As of this writing, the name.yaml file generated in the root may be done by the Rocky Automation account.","title":"modules"},{"location":"special_interest_groups/sig_guide/content/#src","text":"This area is specifically used for having the source of the rpm. This means that instead of uploading directly to S3, sources can be managed within a repository that matches the name of an rpm in the rpms group, by using dist-git/src-git. This is an optional group and does not have to be used. These are subject to the correct branch names template.","title":"src"},{"location":"special_interest_groups/sig_guide/content/#branch-names","text":"This is important . main is NOT an acceptable branch name under any cirumstances. You must follow the correct branch name format for your package to be used in the CBS. You must use this format: rX-SIG-PKG_QUALIFIER[-OPTIONAL_VERSION] Let's break it down: X will the rocky major version. For example, r8 SIG will be your SIG name - For example, if it's one word, storage could be used. If it's a multi-word, abbreviate it. For example, Messaging and Communication could just be mc . PKG_QUALIFIER is the name of or the group of packages that you plan on building. For example, gluster . Gluster is more than one package, so each rpm repo would have this in the branch name. OPTIONAL_VERSION is straight forward. If you have multiple versions, you can put a version here. Here's full examples using this format: r8-storage-gluster-9 r8-mc-ejabberd The top one says this is for Rocky Linux 8, storage sig, gluster packages, version 9. It implies there may be a version 10 at some point or there may be a version 8 that is/was there. It also implies there will be different repos per version, so a user could use the gluster 9 repo even though there may be a 10 version. The bottom one says this is for Rocky Linux 8, the mc sig, and the package(s) are for ejabberd, with no specific version listed as it will be continuously updated.","title":"Branch Names"},{"location":"special_interest_groups/sig_guide/content/#tagging","text":"In the case of an rpm or a module, there should be tags associated, otherwise the build system will not pick up your builds. The general format for a tags are as follows: RPM: imports/rX/NEVR (for example, imports/r8/bash-4.4.20-2.el8 is acceptable) Note: You cannot choose a tag/branch destined for one rocky release and build on another. Ensure your tags and branches are in alignment. Module: imports/rX-stream-STREAM_NAME_OR_VERSION/MODULE_NAME-STREAM_NAME_OR_VERSION-X0Y00YYYYMMDDHHMMSS.ZZZZZZZZ Note: X is the major version, Y is the minor version. MODULE_NAME and STREAM_NAME_OR_VERSION are required. Ensure you fill out the timestamp as appropriate. You may fill in the final Z's with a portion of the commit hash that you are using for the tag. Example: imports/r8-stream-1.4/389-ds-1.4-8060020220204145416.ce3e8c9c","title":"Tagging"},{"location":"special_interest_groups/sig_guide/content/#importing-to-s3","text":"TBD","title":"Importing to S3"},{"location":"special_interest_groups/sig_guide/proposal/","text":"This page goes over proposing a Special Interest Group for the Rocky ecosystem. Anyone can propose or participate in a Special Interest Group. Proposal \u00b6 Creating a new Special Interest Group requires participation from a member of the Rocky teams or a member of the board. A SIG must meet these requirements: The group must be related to Rocky or a use-case for Rocky There must be feedback and control into the Rocky community All communication as to the work of the SIG should be public - Some matters may have to be private, and as such should be out of band It is expected that each SIG will have a public channel as SIG/name in mattermost. Optionally an IRC channel can also be assigned. Code produced within the SIG must be compatible with a FOSS license presently used by Rocky and upstream - If a new license is wanted and is not available in the upstream list, consult with Release Engineering/Core or ~Legal in Mattermost. All documentation produced within the SIG must be a compatible documentation license Groups should be aware/watchful of the direction from the Release Engineering team/Core as it can affect how SIGs operate if they are producing compiled software. A member of the SIG should also come from the Core/RelEng team, in the case that the SIG produces packages for use on a Rocky system. Proposal Process \u00b6 It is up to the requestor to: Check and verify that the topic of interest is already covered by an existing Special Interest Group within Rocky or CentOS Stream Post an introductory RFC message: As an email to the rocky-devel mailing list and ask for comments or... As a message to SIG/general in mattermost Upon approval, a Core/RelEng member will request/create initial resources as needed: git.rockylinux.org groups An initial git site groups in Rocky Account Services mail list channel in mattermost + IRC channel as a bridge if requested Acceptance \u00b6 TBD Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Proposing a SIG"},{"location":"special_interest_groups/sig_guide/proposal/#proposal","text":"Creating a new Special Interest Group requires participation from a member of the Rocky teams or a member of the board. A SIG must meet these requirements: The group must be related to Rocky or a use-case for Rocky There must be feedback and control into the Rocky community All communication as to the work of the SIG should be public - Some matters may have to be private, and as such should be out of band It is expected that each SIG will have a public channel as SIG/name in mattermost. Optionally an IRC channel can also be assigned. Code produced within the SIG must be compatible with a FOSS license presently used by Rocky and upstream - If a new license is wanted and is not available in the upstream list, consult with Release Engineering/Core or ~Legal in Mattermost. All documentation produced within the SIG must be a compatible documentation license Groups should be aware/watchful of the direction from the Release Engineering team/Core as it can affect how SIGs operate if they are producing compiled software. A member of the SIG should also come from the Core/RelEng team, in the case that the SIG produces packages for use on a Rocky system.","title":"Proposal"},{"location":"special_interest_groups/sig_guide/proposal/#proposal-process","text":"It is up to the requestor to: Check and verify that the topic of interest is already covered by an existing Special Interest Group within Rocky or CentOS Stream Post an introductory RFC message: As an email to the rocky-devel mailing list and ask for comments or... As a message to SIG/general in mattermost Upon approval, a Core/RelEng member will request/create initial resources as needed: git.rockylinux.org groups An initial git site groups in Rocky Account Services mail list channel in mattermost + IRC channel as a bridge if requested","title":"Proposal Process"},{"location":"special_interest_groups/sig_guide/proposal/#acceptance","text":"TBD","title":"Acceptance"},{"location":"special_interest_groups/sig_guide/release/","text":"Release \u00b6 rocky-release packages \u00b6 It is expected with Special Interest Groups that are delivering packages to have associated release packages that provide: Repo file(s) for dnf GPG key assosciated with the signing of your packages During the initial request process, a GPG key is assigned to you in the build system to be used to sign your packages. A release package must be requested to be built and submitted to the extras repository. A request can be opened at git.rockylinux.org/rocky/rocky-linux or git.resf.org/sig-core/meta Key/Package Restrictions The Special Interest Group cannot submit a key nor can they have access to the private key. At this time, a SIG cannot submit their own release package. When you are opening the request, use the following template: Title: [SIG] NAME_OF_SIG - Release Package Request How many repositories - By default a \"common\" repository is assigned. Do you plan on having multiple versions of some software? (example: ceph, glusterfs) Do you plan on having a separate modularity repository? What major releases? (eg, are you only building for 9?) Other comments you feel will be necessary for Release Engineering to be aware of Releasing Packages for your SIG \u00b6 TBD Directory Format for Repositories (Informational) \u00b6 This is more informational more than anything, but it is important for a SIG to know where their exported repositories will live. Repositories will be formatted as such: /pub/rocky/sig/MAJOR/NAME/ARCH/PKG_OR_REPO This basically means that the sig directory will live along side the major version directories at the root of any mirror. At /pub/rocky you'll see 8 , 9 , and so on, and then you'll also see sig . Let's break down what each means. NAME can be the name of the SIG or the abbreviation code (eg, cloud, kernel, mcs) MAJOR is the major version that's being targetted (8, 9, so on) ARCH is for the architecture PKG_OR_REPO could be for the specific set of packages of just any repository. (For example, you could have a \"common\" directory alongside the others) Let's say for the sake of the example we need some repositories for mcs and we build for x86_64 and aarch64. It could look like this. This assumes the messaging and communication SIG has not only an ejabberd repository, but also a \"common\" repository that is perhaps shared with ejabberd and potentially another set of packages in the future. . \u251c\u2500\u2500 8 \u251c\u2500\u2500 9 \u2514\u2500\u2500 sig \u251c\u2500\u2500 8 \u2502 \u2514\u2500\u2500 mcs \u2502 \u251c\u2500\u2500 aarch64 \u2502 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 x86_64 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 9 \u2514\u2500\u2500 mcs \u251c\u2500\u2500 aarch64 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 x86_64 \u251c\u2500\u2500 ejabberd \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 mcs-common \u251c\u2500\u2500 Packages \u2514\u2500\u2500 repodata Mirror List Queries (Informational) \u00b6 Queries to a mirror list for SIG repositories will be like the standard calls, but repo names will have a format of sig-NAME-MAJOR . NAME can be a simple SIG name or abbreviate or a combination, for example, sig-mcs-common or sig-cloud . Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Releasing Packages"},{"location":"special_interest_groups/sig_guide/release/#release","text":"","title":"Release"},{"location":"special_interest_groups/sig_guide/release/#rocky-release-packages","text":"It is expected with Special Interest Groups that are delivering packages to have associated release packages that provide: Repo file(s) for dnf GPG key assosciated with the signing of your packages During the initial request process, a GPG key is assigned to you in the build system to be used to sign your packages. A release package must be requested to be built and submitted to the extras repository. A request can be opened at git.rockylinux.org/rocky/rocky-linux or git.resf.org/sig-core/meta Key/Package Restrictions The Special Interest Group cannot submit a key nor can they have access to the private key. At this time, a SIG cannot submit their own release package. When you are opening the request, use the following template: Title: [SIG] NAME_OF_SIG - Release Package Request How many repositories - By default a \"common\" repository is assigned. Do you plan on having multiple versions of some software? (example: ceph, glusterfs) Do you plan on having a separate modularity repository? What major releases? (eg, are you only building for 9?) Other comments you feel will be necessary for Release Engineering to be aware of","title":"rocky-release packages"},{"location":"special_interest_groups/sig_guide/release/#releasing-packages-for-your-sig","text":"TBD","title":"Releasing Packages for your SIG"},{"location":"special_interest_groups/sig_guide/release/#directory-format-for-repositories-informational","text":"This is more informational more than anything, but it is important for a SIG to know where their exported repositories will live. Repositories will be formatted as such: /pub/rocky/sig/MAJOR/NAME/ARCH/PKG_OR_REPO This basically means that the sig directory will live along side the major version directories at the root of any mirror. At /pub/rocky you'll see 8 , 9 , and so on, and then you'll also see sig . Let's break down what each means. NAME can be the name of the SIG or the abbreviation code (eg, cloud, kernel, mcs) MAJOR is the major version that's being targetted (8, 9, so on) ARCH is for the architecture PKG_OR_REPO could be for the specific set of packages of just any repository. (For example, you could have a \"common\" directory alongside the others) Let's say for the sake of the example we need some repositories for mcs and we build for x86_64 and aarch64. It could look like this. This assumes the messaging and communication SIG has not only an ejabberd repository, but also a \"common\" repository that is perhaps shared with ejabberd and potentially another set of packages in the future. . \u251c\u2500\u2500 8 \u251c\u2500\u2500 9 \u2514\u2500\u2500 sig \u251c\u2500\u2500 8 \u2502 \u2514\u2500\u2500 mcs \u2502 \u251c\u2500\u2500 aarch64 \u2502 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 x86_64 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 9 \u2514\u2500\u2500 mcs \u251c\u2500\u2500 aarch64 \u2502 \u251c\u2500\u2500 ejabberd \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 repodata \u2502 \u2514\u2500\u2500 mcs-common \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 x86_64 \u251c\u2500\u2500 ejabberd \u2502 \u251c\u2500\u2500 Packages \u2502 \u2514\u2500\u2500 repodata \u2514\u2500\u2500 mcs-common \u251c\u2500\u2500 Packages \u2514\u2500\u2500 repodata","title":"Directory Format for Repositories (Informational)"},{"location":"special_interest_groups/sig_guide/release/#mirror-list-queries-informational","text":"Queries to a mirror list for SIG repositories will be like the standard calls, but repo names will have a format of sig-NAME-MAJOR . NAME can be a simple SIG name or abbreviate or a combination, for example, sig-mcs-common or sig-cloud .","title":"Mirror List Queries (Informational)"},{"location":"special_interest_groups/sig_guide/testing/","text":"This page is currently TBD. The new build system is planned to have testing and the testing team may have options in the future. Resources Account Services Git (GitLab) Mirrors Mail Lists URL : https://accounts.rockylinux.org Purpose : Account Services maintains the accounts for almost all components of the Rocky ecosystem Technology : Noggin used by Fedora Infrastructure Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://git.rockylinux.org Purpose : Packages and code for the Rocky Linux ecosystem Technology : GitLab Contact : ~Infrastructure , ~Development in Mattermost and #rockylinux-infra , #rockylinux-devel in Libera IRC URL : https://mirrors.rockylinux.org Purpose : Users can apply to be a mirror to host Rocky content (SIG or the base operating system) Technology : MirrorManager 2 Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC URL : https://lists.resf.org Purpose : Users can subscribe and interact with various mail lists for the Rocky ecosystem Technology : Mailman 3 + Hyper Kitty Contact : ~Infrastructure in Mattermost and #rockylinux-infra in Libera IRC","title":"Automated Testing"},{"location":"team/","text":"About \u00b6 This section of the wiki is for core team specific documentation pages. It is not meant for SIG documentation. Use the navigation bar above to find team specific documentation.","title":"Teams"},{"location":"team/#about","text":"This section of the wiki is for core team specific documentation pages. It is not meant for SIG documentation. Use the navigation bar above to find team specific documentation.","title":"About"},{"location":"team/design/","text":"This section is primarily for documentation for the Design Team. Members \u00b6 Role Name Email Mattermost Name IRC Name Design Team Lead Michael Kinder mkinder@rockylinux.org @ressonix","title":"Design"},{"location":"team/design/#members","text":"Role Name Email Mattermost Name IRC Name Design Team Lead Michael Kinder mkinder@rockylinux.org @ressonix","title":"Members"},{"location":"team/design/branding/","text":"Brand Kit \u00b6 Download Please refer to the included Brand & Trademark Usage Guide to ensure that you follow our brand and trademark policies. If you have questions, concerns, or comments, please send an email to design@rockylinux.org. Trademark Usage Policy \u00b6 This is a statement of Rocky Enterprise Software Foundation's (RESF) trademarks and its policy and guidelines relating to use of trademarks owned by RESF and used by projects under RESF. For purposes of this document, references to trademarks or marks include all trade and service marks and logos owned by the RESF legal entity. Projects operating as separately incorporated entities managed by RESF have their own trademarks, policies and usage guidelines. Rocky Enterprise Software Foundation's Trademarks \u00b6 Rocky Enterprise Software Foundation has registrations pending or trademarks in use for the following marks in the United States and/or other countries: Rocky Enterprise Software Foundation\u2122 RESF\u2122 Rocky Linux\u2122 RESF Trademark Usage Guidelines \u00b6 Trademarks are used to provide assurance to the community of consistency with respect to the quality of products or services with which the mark is associated. This policy attempts to strike the proper balance between two competing interests: 1) the need of the RESF to ensure that its trademarks remain reliable indicators of the qualities that they have been created to preserve and 2) the need of RESF to ensure that community members are able to discuss the projects with which RESF is associated and to accurately describe the relationship between RESF and the products and services offered by others. A trademark provides the owner with an exclusive right to authorize or control the use of the mark. Your right to use a mark of RESF is provided for in this policy and in the statement of permitted use, if any, that may accompany the trademark notice displayed on the website dedicated to the project. A copyright license, even an open source copyright license, does not include an implied right or license to use a trademark that may be related to the project developing the licensed software or other materials. Because open source licenses permit unrestricted modification of the copyrighted software, and RESF has no intention of interfering with that right, your right to use any specific trademark of RESF is not determined by your use of software made available under an open source license. Your right to use a mark is conditioned upon conforming to other requirements that are directly related to the qualities that the specific mark has been created to preserve. Proper use of RESF trademarks by following these trademark guidelines protects the value of RESF trademarks. Any use of or reference to RESF trademarks that is inconsistent with this trademark policy, or use of marks that are confusingly similar to trademarks of RESF, is prohibited. All uses of RESF trademarks, and all goodwill associated therewith, will inure solely to the benefit of RESF. Rules That Apply to Trademarks in General \u00b6 There are some basic rules that apply to any use of any trade or service mark that you do not own, including any mark of RESF, without the express permission of the owner. A trademark should never be used as a verb or a noun. A trademark should be used only as an adjective followed by the generic name/noun. A trademark should not be used in the plural or possessive form. A trademark should not be altered or amended in any way. A mark should not be combined with any other mark, hyphenated, abbreviated or displayed in parts. A trademark that is depicted as two or more words should not be compressed into one word. A logo should not be displayed with color variations, or with other elements superimposed on top of the logo. A trademark should not be used as your domain name or as part of your domain name. A trademark should not be incorporated into your company\u2019s logos or designs. A trademark notice should be used on the most prominent and/or first appearance of each mark of RESF, and a trademark notice should not be changed. In particular, a \u2122 should not be changed to a \u00ae in a trademark notice by anyone other than the owner. Alternatively, or as a supplement to the \u00ae, \u2122, or common law notices, a footnote or text notice with one of the alternative statutory notices is good practice: \u201cX is a trademark of the Rocky Enterprise Software Foundation.\u201d If you are unsure about whether a mark of RESF is registered in your country, please contact us for additional guidance as to what trademark symbol you should use. There are also some basic rights that everyone has to use any trademark, which are often referred to as \"fair use,\" and RESF does not intend to restrict those rights. You may make fair use of word marks to make true factual statements. But fair use does not permit you to state or imply that the owner of a mark products, endorses, or supports your company, products, or services. Even when making fair use of a trademark, you should acknowledge the owner of the trademark with a trademark notice, such as the notice displayed on RESF project websites. Rules and Policies Applicable to Marks Owned by RESF \u00b6 In addition to the generally applicable rules discussed above, there are a few specific rules that we ask everyone to follow when using trademarks owned by RESF. Use the full form of any trademark (e.g., \u201cRocky Enterprise Software Foundation\u201d) in the first reference in all documents of mass communication, including marketing collateral and web pages. You may then use any abbreviated or short form references (e.g. \u201cRESF\u201d) within the same document where the full form has already been used. Use RESF\u2019s trademarks in a form that distinguishes them from the text around them, such as by capitalization, bold or italic fonts, or with quotation marks. Any use of unregistered trademarks as listed in the Trademark List above should include a \u2122 immediately after the first usage (e.g., \u201cThe Rocky Linux\u2122 community seeks to secure\u2026\u201d) Do not use RESF trademarks in a manner that would disparage RESF or its projects (e.g., untruthful advertising, false/misleading promotional materials, etc.). Do not use a RESF logo on the cover of a book or magazine without written permission from RESF. Do not use a logo of RESF on posters, brochures, signs, websites, or other marketing materials to promote your events, products or services without written permission from RESF. Do not refer to a product or service as being certified under any of RESF\u2019s marks unless your company has successfully undergone the requisite compliance testing and has explicit authorization to use such terms from RESF. Do not attempt to claim or assert any ownership rights in any mark of RESF and do not attempt to register any RESF trademark as a trademark, trade name, domain name, or \u201cdoing business as\u201d name, alone or (unless specifically licensed) in combination with your own trademarks. Do not use any RESF trademark in metatags, search fields, hidden text, or any other form that has the purpose or effect of diverting or confusing consumers without RESF\u2019s prior written permission. Do not adopt marks or logos that are confusingly similar to any RESF trademarks. Do not use RESF trademarks for products or services for which they were not originally intended. Do not alter a RESF trademark in any way. RESF marks have been created and their use is expressly permitted for a specific purpose. Do not use logos or names of RESF in any commercial or marketing context other than as expressly permitted in this policy unless you have obtained explicit written permission from RESF to do so. RESF permits the use of its trademarks for private and personal use to make t-shirts, stickers, and caps for yourself and your friends (meaning people from whom you don't receive anything of value in return) in a manner that is consistent with the preservation of the goodwill and value of the mark. The goodwill, if any, derived from your use of any RESF trademarks exclusively inures to the benefit of and belongs to the RESF. You are also allowed to use a trademark or logo of RESF as a link to the home page of the applicable project or to a web page on the RESF web site that is relevant to the reference so long as the link is in a manner that is consistent with the preservation of the goodwill and value of the mark. The link and all other usage of a logo of RESF shall be done using the official versions of RESF logos obtained from RESF or its projects. For examples of incorrect uses of a logo of RESF, please refer to Section 1.3 (Logo Misuse) of our Brand & Trademark Usage Guide (included in our Brand Kit). Certain marks of RESF have been created to enable you to communicate compatibility or interoperability of software or products. In addition to the requirement that any use of a mark to make an assertion of compatibility must, of course, be accurate, the use of these marks must avoid confusion regarding RESF's association with the product. The use of the mark cannot imply that RESF or its projects are sponsoring or endorsing the product. The following are examples of proper and improper usage of these trademarks of RESF: Correct: <your product name> for <RESF mark> Correct: <your product/company name> plug-in for <RESF mark> Correct: <your product name> compatible with <RESF mark> Correct: <your product name> for use with <RESF mark> Correct: Quick Start for <RESF mark> by <your company name> Correct: <non-trademarked industry term> Day featuring <RESF mark> Correct: <non-trademarked industry term> Day with <RESF mark> Correct: <non-trademarked industry term> Day including <RESF mark> Incorrect: <RESF mark> <your product name> Incorrect: <RESF mark> by <your company name> Incorrect: <RESF mark> - <your product name> Incorrect: <your product/company name> - <RESF mark> Incorrect: <RESF mark> Quick Start by <your company name> Incorrect: <RESF mark> Day Incorrect: <RESF mark> Day by <your company name> Incorrect: <non-trademarked industry term> Day brought to you by <RESF mark> Questions, Comments, Concerns \u00b6 We look to our community to help us retain the value of RESF's trade and service marks. If you have questions with respect to these guidelines or to report concerns regarding the use or misuse of a trademark of RESF, or to obtain written permission for a proposed use of RESF trademarks, contact: design@rockylinux.org. Disclaimer \u00b6 RESF does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. Updates \u00b6 RESF may release new versions of RESF trademark policy or statements of permitted use of RESF marks without notice. This work is inspired by the Mozilla Foundation Trademark Policy and the GNOME Trademark Licensing. It is licensed under a Creative Commons Attribution 4.0 International license (\"CC-BY-4.0\", available at https://creativecommons.org/licenses/by/4.0).","title":"Branding"},{"location":"team/design/branding/#brand-kit","text":"Download Please refer to the included Brand & Trademark Usage Guide to ensure that you follow our brand and trademark policies. If you have questions, concerns, or comments, please send an email to design@rockylinux.org.","title":"Brand Kit"},{"location":"team/design/branding/#trademark-usage-policy","text":"This is a statement of Rocky Enterprise Software Foundation's (RESF) trademarks and its policy and guidelines relating to use of trademarks owned by RESF and used by projects under RESF. For purposes of this document, references to trademarks or marks include all trade and service marks and logos owned by the RESF legal entity. Projects operating as separately incorporated entities managed by RESF have their own trademarks, policies and usage guidelines.","title":"Trademark Usage Policy"},{"location":"team/design/branding/#rocky-enterprise-software-foundations-trademarks","text":"Rocky Enterprise Software Foundation has registrations pending or trademarks in use for the following marks in the United States and/or other countries: Rocky Enterprise Software Foundation\u2122 RESF\u2122 Rocky Linux\u2122","title":"Rocky Enterprise Software Foundation's Trademarks"},{"location":"team/design/branding/#resf-trademark-usage-guidelines","text":"Trademarks are used to provide assurance to the community of consistency with respect to the quality of products or services with which the mark is associated. This policy attempts to strike the proper balance between two competing interests: 1) the need of the RESF to ensure that its trademarks remain reliable indicators of the qualities that they have been created to preserve and 2) the need of RESF to ensure that community members are able to discuss the projects with which RESF is associated and to accurately describe the relationship between RESF and the products and services offered by others. A trademark provides the owner with an exclusive right to authorize or control the use of the mark. Your right to use a mark of RESF is provided for in this policy and in the statement of permitted use, if any, that may accompany the trademark notice displayed on the website dedicated to the project. A copyright license, even an open source copyright license, does not include an implied right or license to use a trademark that may be related to the project developing the licensed software or other materials. Because open source licenses permit unrestricted modification of the copyrighted software, and RESF has no intention of interfering with that right, your right to use any specific trademark of RESF is not determined by your use of software made available under an open source license. Your right to use a mark is conditioned upon conforming to other requirements that are directly related to the qualities that the specific mark has been created to preserve. Proper use of RESF trademarks by following these trademark guidelines protects the value of RESF trademarks. Any use of or reference to RESF trademarks that is inconsistent with this trademark policy, or use of marks that are confusingly similar to trademarks of RESF, is prohibited. All uses of RESF trademarks, and all goodwill associated therewith, will inure solely to the benefit of RESF.","title":"RESF Trademark Usage Guidelines"},{"location":"team/design/branding/#rules-that-apply-to-trademarks-in-general","text":"There are some basic rules that apply to any use of any trade or service mark that you do not own, including any mark of RESF, without the express permission of the owner. A trademark should never be used as a verb or a noun. A trademark should be used only as an adjective followed by the generic name/noun. A trademark should not be used in the plural or possessive form. A trademark should not be altered or amended in any way. A mark should not be combined with any other mark, hyphenated, abbreviated or displayed in parts. A trademark that is depicted as two or more words should not be compressed into one word. A logo should not be displayed with color variations, or with other elements superimposed on top of the logo. A trademark should not be used as your domain name or as part of your domain name. A trademark should not be incorporated into your company\u2019s logos or designs. A trademark notice should be used on the most prominent and/or first appearance of each mark of RESF, and a trademark notice should not be changed. In particular, a \u2122 should not be changed to a \u00ae in a trademark notice by anyone other than the owner. Alternatively, or as a supplement to the \u00ae, \u2122, or common law notices, a footnote or text notice with one of the alternative statutory notices is good practice: \u201cX is a trademark of the Rocky Enterprise Software Foundation.\u201d If you are unsure about whether a mark of RESF is registered in your country, please contact us for additional guidance as to what trademark symbol you should use. There are also some basic rights that everyone has to use any trademark, which are often referred to as \"fair use,\" and RESF does not intend to restrict those rights. You may make fair use of word marks to make true factual statements. But fair use does not permit you to state or imply that the owner of a mark products, endorses, or supports your company, products, or services. Even when making fair use of a trademark, you should acknowledge the owner of the trademark with a trademark notice, such as the notice displayed on RESF project websites.","title":"Rules That Apply to Trademarks in General"},{"location":"team/design/branding/#rules-and-policies-applicable-to-marks-owned-by-resf","text":"In addition to the generally applicable rules discussed above, there are a few specific rules that we ask everyone to follow when using trademarks owned by RESF. Use the full form of any trademark (e.g., \u201cRocky Enterprise Software Foundation\u201d) in the first reference in all documents of mass communication, including marketing collateral and web pages. You may then use any abbreviated or short form references (e.g. \u201cRESF\u201d) within the same document where the full form has already been used. Use RESF\u2019s trademarks in a form that distinguishes them from the text around them, such as by capitalization, bold or italic fonts, or with quotation marks. Any use of unregistered trademarks as listed in the Trademark List above should include a \u2122 immediately after the first usage (e.g., \u201cThe Rocky Linux\u2122 community seeks to secure\u2026\u201d) Do not use RESF trademarks in a manner that would disparage RESF or its projects (e.g., untruthful advertising, false/misleading promotional materials, etc.). Do not use a RESF logo on the cover of a book or magazine without written permission from RESF. Do not use a logo of RESF on posters, brochures, signs, websites, or other marketing materials to promote your events, products or services without written permission from RESF. Do not refer to a product or service as being certified under any of RESF\u2019s marks unless your company has successfully undergone the requisite compliance testing and has explicit authorization to use such terms from RESF. Do not attempt to claim or assert any ownership rights in any mark of RESF and do not attempt to register any RESF trademark as a trademark, trade name, domain name, or \u201cdoing business as\u201d name, alone or (unless specifically licensed) in combination with your own trademarks. Do not use any RESF trademark in metatags, search fields, hidden text, or any other form that has the purpose or effect of diverting or confusing consumers without RESF\u2019s prior written permission. Do not adopt marks or logos that are confusingly similar to any RESF trademarks. Do not use RESF trademarks for products or services for which they were not originally intended. Do not alter a RESF trademark in any way. RESF marks have been created and their use is expressly permitted for a specific purpose. Do not use logos or names of RESF in any commercial or marketing context other than as expressly permitted in this policy unless you have obtained explicit written permission from RESF to do so. RESF permits the use of its trademarks for private and personal use to make t-shirts, stickers, and caps for yourself and your friends (meaning people from whom you don't receive anything of value in return) in a manner that is consistent with the preservation of the goodwill and value of the mark. The goodwill, if any, derived from your use of any RESF trademarks exclusively inures to the benefit of and belongs to the RESF. You are also allowed to use a trademark or logo of RESF as a link to the home page of the applicable project or to a web page on the RESF web site that is relevant to the reference so long as the link is in a manner that is consistent with the preservation of the goodwill and value of the mark. The link and all other usage of a logo of RESF shall be done using the official versions of RESF logos obtained from RESF or its projects. For examples of incorrect uses of a logo of RESF, please refer to Section 1.3 (Logo Misuse) of our Brand & Trademark Usage Guide (included in our Brand Kit). Certain marks of RESF have been created to enable you to communicate compatibility or interoperability of software or products. In addition to the requirement that any use of a mark to make an assertion of compatibility must, of course, be accurate, the use of these marks must avoid confusion regarding RESF's association with the product. The use of the mark cannot imply that RESF or its projects are sponsoring or endorsing the product. The following are examples of proper and improper usage of these trademarks of RESF: Correct: <your product name> for <RESF mark> Correct: <your product/company name> plug-in for <RESF mark> Correct: <your product name> compatible with <RESF mark> Correct: <your product name> for use with <RESF mark> Correct: Quick Start for <RESF mark> by <your company name> Correct: <non-trademarked industry term> Day featuring <RESF mark> Correct: <non-trademarked industry term> Day with <RESF mark> Correct: <non-trademarked industry term> Day including <RESF mark> Incorrect: <RESF mark> <your product name> Incorrect: <RESF mark> by <your company name> Incorrect: <RESF mark> - <your product name> Incorrect: <your product/company name> - <RESF mark> Incorrect: <RESF mark> Quick Start by <your company name> Incorrect: <RESF mark> Day Incorrect: <RESF mark> Day by <your company name> Incorrect: <non-trademarked industry term> Day brought to you by <RESF mark>","title":"Rules and Policies Applicable to Marks Owned by RESF"},{"location":"team/design/branding/#questions-comments-concerns","text":"We look to our community to help us retain the value of RESF's trade and service marks. If you have questions with respect to these guidelines or to report concerns regarding the use or misuse of a trademark of RESF, or to obtain written permission for a proposed use of RESF trademarks, contact: design@rockylinux.org.","title":"Questions, Comments, Concerns"},{"location":"team/design/branding/#disclaimer","text":"RESF does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim.","title":"Disclaimer"},{"location":"team/design/branding/#updates","text":"RESF may release new versions of RESF trademark policy or statements of permitted use of RESF marks without notice. This work is inspired by the Mozilla Foundation Trademark Policy and the GNOME Trademark Licensing. It is licensed under a Creative Commons Attribution 4.0 International license (\"CC-BY-4.0\", available at https://creativecommons.org/licenses/by/4.0).","title":"Updates"},{"location":"team/infrastructure/awx_scm_guidelines/","text":"This document covers the guidelines as set out by the Infrastructure/Core group for designing modular repositories that will be used in the Rocky AWX instance. This is meant to supersede the guidelines in the ansible-awx-template repository. This does not cover detailed examples, but is meant to get teams and their contributors started in designing or improving upon all ansible related activities for their group. Note This guide will be moved to the Core rocky.page wiki in the future. Contact Information \u00b6 Owner Infrastructure Team Email Contact infrastructure@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure Guidelines \u00b6 This section covers the basics for your AWX project. It is absolutely important that you start with these as an absolute bare minimum. While you will be forking/cloning off of infrastructure/ansible-awx-template and using that as the starting point, the next few sections will explain the basic structure and basic design principals. Root Structure \u00b6 The general structure will always start from this: . \u251c\u2500\u2500 somePlaybook.yml \u251c\u2500\u2500 defaults \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 files \u251c\u2500\u2500 handlers \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 templates \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 inventory \u2502 \u2514\u2500\u2500 test.yml \u2514\u2500\u2500 vars \u2514\u2500\u2500 main.yml This structure follows the basic expected structure for ansible (this means ignoring AWX/Tower). If you are familiar with ansible already, you may already know how these files and directories work at an operational level. The gist of it is: All playbooks should be in the root and import tasks from ./tasks if needed Vars should be clearly defined where needed in vars, defaults, and/or playbooks Files and templates should be created with a purpose Handlers should be clearly defined and used There should be wiggle room to add callback_plugins, filter_plugins, libraries With these basic ideas in mind, we can now move deeper. Designing Playbooks \u00b6 Generally, your playbooks should be doing the following: Checking if ansible can be ran on a specific host Asserting if variables are filled and are correctly formed, if applicable Importing tasks from the ./tasks directory Importing roles, if necessary Post tasks, if necessary At no point should you be using ./tasks/main.yml in any circumstance. Pre-flight and Post-flight Tasks \u00b6 In majority of cases, you will need to have pre-flight and post-flight tasks. These aren't needed in all cases, but they should be used as a starting point. pre_tasks: - name: Check if ansible cannot be run here ansible.builtin.stat: path: /etc/no-ansible register: no_ansible - name: Verify if we can run ansible ansible.builtin.assert: that: - \"not no_ansible.stat.exists\" success_msg: \"We are able to run on this node\" fail_msg: \"/etc/no-ansible exists - skipping run on this node\" # Assertions and other checks here # Import roles/tasks here post_tasks: - name: Touching run file that ansible has ran here ansible.builtin.file: path: /var/log/ansible.run state: touch mode: '0644' owner: root group: root Tasks General Information \u00b6 Ensure that your tasks are using FQCN. This means, even for the simple modules such as file , you should be using ansible.builtin.file to be compliant with ansible-lint 6+ and ansible 2.12+. Comments \u00b6 Each playbook should have comments or a name descriptor that explains what the playbook does or how it is used. If not available, README-... can be used in place, especially in the case of adhoc playbooks that take or require input. Documentation for each playbook/role does not have to be on a wiki. Comments or README's should be perfectly sufficient. Tags \u00b6 Ensure that you are using relevant tags where necessary for your tasks. This will allow you or the deployers to have deeper control of what is ran or called in AWX. Playbook Naming System \u00b6 When making playbooks, there is a set of predefined prefixes you will need to set. It is highly discouraged to step outside of these prefixes. init-* -> Starting playbooks that run solo or import other playbooks that start with import-. Can also be used to run updates or repetive tasks that adhoc may not suffice and running a role playbook is too much overhead. adhoc -> These playbooks are one-off playbooks that can be used on the CLI or in AWX. These are typically for basic tasks. import -> Playbooks that should be imported from the top level playbooks or used to \"import\" or \"add\" data somewhere (eg a database or LDAP) role-* -> These playbooks call roles for potential infrastructure tasks or even roles in general. Using the role prefix without an ansible role While it is feasible to use role- as a way to say \"this system will do X\" without calling out to an ansible role, you are encouraged to use init- instead in these cases. This is not a strict requirement. Go with what feels right for your project. Defining Hosts \u00b6 There will likely be multiple dynamic inventory sources used for hosts managed by AWX, and as a result, there will be a lot of groups defined with one or more hosts at a time. As this is the case, here are some things to keep in mind: Use group names where necessary Use localhost if you aren't actually doing anything to a system (eg you're calling an API) and you don't have to connect to a system to use said API Use hosts: all and select the inventory where your host or hosts are. For single hosts, it's better to use either a single group that contains that one (1) host or selecting an inventory with that one host and using the group name again (if applicable or able) or hosts: all . The latter should be used in extreme edge cases. Local Inventory Files \u00b6 Generally local inventory files are not recommended. If you are running anything locally outside of AWX, an inventory is allowed but should not be committed to the repository. Pre-commits / linting \u00b6 When committing, pre-commit must run to verify your changes. They must be passing to be pushed up. This is an absolute requirement, even for roles. When the linter passes, the push will complete and you will be able to open a PR for the main branch or use as necessary in AWX. Tests \u00b6 A template generally comes with a tests directory. While not strictly required, it is recommended to create a suite of tests to ensure most, if not all of your playbooks are in working order. This is similar to providing tests to ansible collections, in that they should test at least basic functionality. Complex situations can be tested for as well and is encouraged.","title":"AWX SCM Guidelines"},{"location":"team/infrastructure/awx_scm_guidelines/#contact-information","text":"Owner Infrastructure Team Email Contact infrastructure@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure","title":"Contact Information"},{"location":"team/infrastructure/awx_scm_guidelines/#guidelines","text":"This section covers the basics for your AWX project. It is absolutely important that you start with these as an absolute bare minimum. While you will be forking/cloning off of infrastructure/ansible-awx-template and using that as the starting point, the next few sections will explain the basic structure and basic design principals.","title":"Guidelines"},{"location":"team/infrastructure/awx_scm_guidelines/#root-structure","text":"The general structure will always start from this: . \u251c\u2500\u2500 somePlaybook.yml \u251c\u2500\u2500 defaults \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 files \u251c\u2500\u2500 handlers \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 templates \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 inventory \u2502 \u2514\u2500\u2500 test.yml \u2514\u2500\u2500 vars \u2514\u2500\u2500 main.yml This structure follows the basic expected structure for ansible (this means ignoring AWX/Tower). If you are familiar with ansible already, you may already know how these files and directories work at an operational level. The gist of it is: All playbooks should be in the root and import tasks from ./tasks if needed Vars should be clearly defined where needed in vars, defaults, and/or playbooks Files and templates should be created with a purpose Handlers should be clearly defined and used There should be wiggle room to add callback_plugins, filter_plugins, libraries With these basic ideas in mind, we can now move deeper.","title":"Root Structure"},{"location":"team/infrastructure/awx_scm_guidelines/#designing-playbooks","text":"Generally, your playbooks should be doing the following: Checking if ansible can be ran on a specific host Asserting if variables are filled and are correctly formed, if applicable Importing tasks from the ./tasks directory Importing roles, if necessary Post tasks, if necessary At no point should you be using ./tasks/main.yml in any circumstance.","title":"Designing Playbooks"},{"location":"team/infrastructure/awx_scm_guidelines/#pre-flight-and-post-flight-tasks","text":"In majority of cases, you will need to have pre-flight and post-flight tasks. These aren't needed in all cases, but they should be used as a starting point. pre_tasks: - name: Check if ansible cannot be run here ansible.builtin.stat: path: /etc/no-ansible register: no_ansible - name: Verify if we can run ansible ansible.builtin.assert: that: - \"not no_ansible.stat.exists\" success_msg: \"We are able to run on this node\" fail_msg: \"/etc/no-ansible exists - skipping run on this node\" # Assertions and other checks here # Import roles/tasks here post_tasks: - name: Touching run file that ansible has ran here ansible.builtin.file: path: /var/log/ansible.run state: touch mode: '0644' owner: root group: root","title":"Pre-flight and Post-flight Tasks"},{"location":"team/infrastructure/awx_scm_guidelines/#tasks-general-information","text":"Ensure that your tasks are using FQCN. This means, even for the simple modules such as file , you should be using ansible.builtin.file to be compliant with ansible-lint 6+ and ansible 2.12+.","title":"Tasks General Information"},{"location":"team/infrastructure/awx_scm_guidelines/#comments","text":"Each playbook should have comments or a name descriptor that explains what the playbook does or how it is used. If not available, README-... can be used in place, especially in the case of adhoc playbooks that take or require input. Documentation for each playbook/role does not have to be on a wiki. Comments or README's should be perfectly sufficient.","title":"Comments"},{"location":"team/infrastructure/awx_scm_guidelines/#tags","text":"Ensure that you are using relevant tags where necessary for your tasks. This will allow you or the deployers to have deeper control of what is ran or called in AWX.","title":"Tags"},{"location":"team/infrastructure/awx_scm_guidelines/#playbook-naming-system","text":"When making playbooks, there is a set of predefined prefixes you will need to set. It is highly discouraged to step outside of these prefixes. init-* -> Starting playbooks that run solo or import other playbooks that start with import-. Can also be used to run updates or repetive tasks that adhoc may not suffice and running a role playbook is too much overhead. adhoc -> These playbooks are one-off playbooks that can be used on the CLI or in AWX. These are typically for basic tasks. import -> Playbooks that should be imported from the top level playbooks or used to \"import\" or \"add\" data somewhere (eg a database or LDAP) role-* -> These playbooks call roles for potential infrastructure tasks or even roles in general. Using the role prefix without an ansible role While it is feasible to use role- as a way to say \"this system will do X\" without calling out to an ansible role, you are encouraged to use init- instead in these cases. This is not a strict requirement. Go with what feels right for your project.","title":"Playbook Naming System"},{"location":"team/infrastructure/awx_scm_guidelines/#defining-hosts","text":"There will likely be multiple dynamic inventory sources used for hosts managed by AWX, and as a result, there will be a lot of groups defined with one or more hosts at a time. As this is the case, here are some things to keep in mind: Use group names where necessary Use localhost if you aren't actually doing anything to a system (eg you're calling an API) and you don't have to connect to a system to use said API Use hosts: all and select the inventory where your host or hosts are. For single hosts, it's better to use either a single group that contains that one (1) host or selecting an inventory with that one host and using the group name again (if applicable or able) or hosts: all . The latter should be used in extreme edge cases.","title":"Defining Hosts"},{"location":"team/infrastructure/awx_scm_guidelines/#local-inventory-files","text":"Generally local inventory files are not recommended. If you are running anything locally outside of AWX, an inventory is allowed but should not be committed to the repository.","title":"Local Inventory Files"},{"location":"team/infrastructure/awx_scm_guidelines/#pre-commits-linting","text":"When committing, pre-commit must run to verify your changes. They must be passing to be pushed up. This is an absolute requirement, even for roles. When the linter passes, the push will complete and you will be able to open a PR for the main branch or use as necessary in AWX.","title":"Pre-commits / linting"},{"location":"team/infrastructure/awx_scm_guidelines/#tests","text":"A template generally comes with a tests directory. While not strictly required, it is recommended to create a suite of tests to ensure most, if not all of your playbooks are in working order. This is similar to providing tests to ansible collections, in that they should test at least basic functionality. Complex situations can be tested for as well and is encouraged.","title":"Tests"},{"location":"team/infrastructure/idm_pdr/","text":"As a user within the Rocky Linux and Rocky Enterprise Software Foundation ecosystem, you have a right to request your account be disabled and information removed. This page will guide you in requesting a PDR Delete Request for us to process. Contact Information \u00b6 Owner Infrastructure Team & Identity Management Team Email Contact infrastructure@rockylinux.org Email Contact identitymanagement@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure General Information \u00b6 When you request a PDR Delete Request, please note that the following will occur during processing: Your personal data and information will be removed from your account You will be removed from all relevant groups in Account Services Your account will be set to private in Account Services Your account in Account Services will be disabled If your intention is to keep your account active and hide your personal information, you may set your profile to \"private\" in Account Services by: Click Edit Profile Select the checkbox for Private Save. Submitting a Request \u00b6 To submit a request, you may either email us or you may open a ticket at our Bug Tracker Ticket Request \u00b6 Click the following link to open our bug tracker. Open our Bug Tracker and login with your account (You can do this by clicking \"anonymous\" and click logout) In the top left corner, click the drop down next to your login name Select \"Account Services\" as the project. Click \"Report Issue\" Set category to Account Requests - Personal Data Request Set summary as PDR - Delete Request Above the description box, click the snippets drop down and select PDR Request - Remove Personal Information Fill out the form appropriately. Do not remove data that starts that contains {} and ensure you have read the \"Information\" section. You may fill in comments as you see fit. Click Submit Issue at the bottom Email Request \u00b6 Click the following link to open an email draft to us to start the process.","title":"PDR Delete Request"},{"location":"team/infrastructure/idm_pdr/#contact-information","text":"Owner Infrastructure Team & Identity Management Team Email Contact infrastructure@rockylinux.org Email Contact identitymanagement@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure","title":"Contact Information"},{"location":"team/infrastructure/idm_pdr/#general-information","text":"When you request a PDR Delete Request, please note that the following will occur during processing: Your personal data and information will be removed from your account You will be removed from all relevant groups in Account Services Your account will be set to private in Account Services Your account in Account Services will be disabled If your intention is to keep your account active and hide your personal information, you may set your profile to \"private\" in Account Services by: Click Edit Profile Select the checkbox for Private Save.","title":"General Information"},{"location":"team/infrastructure/idm_pdr/#submitting-a-request","text":"To submit a request, you may either email us or you may open a ticket at our Bug Tracker","title":"Submitting a Request"},{"location":"team/infrastructure/idm_pdr/#ticket-request","text":"Click the following link to open our bug tracker. Open our Bug Tracker and login with your account (You can do this by clicking \"anonymous\" and click logout) In the top left corner, click the drop down next to your login name Select \"Account Services\" as the project. Click \"Report Issue\" Set category to Account Requests - Personal Data Request Set summary as PDR - Delete Request Above the description box, click the snippets drop down and select PDR Request - Remove Personal Information Fill out the form appropriately. Do not remove data that starts that contains {} and ensure you have read the \"Information\" section. You may fill in comments as you see fit. Click Submit Issue at the bottom","title":"Ticket Request"},{"location":"team/infrastructure/idm_pdr/#email-request","text":"Click the following link to open an email draft to us to start the process.","title":"Email Request"},{"location":"team/infrastructure/idm_sop_gdpr/","text":"This SOP covers how the Rocky Enterprise Software Foundation (RESF) and Rocky Linux Infrastructure Team handles GDRP (General Data Protection Regulation) data delete requests. It contains information about how System Administrators will use Ansible and other tooling to respond to delete requests. Contact Information \u00b6 Owner Infrastructure Team & Identity Management Team Email Contact infrastructure@rockylinux.org Email Contact identitymanagement@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure Responding to a Deletion Request \u00b6 This section covers how a system administrator will use our adhoc-ipauser-disable-pdr.yml playbook to respond to a delete request. If a request has been received via email, perform the following steps: If request was received by email: Open a ticket at the bug tracker under the Account Services product (Click the drop down in the top right corner, click \"Account Services\", select \"Report Issue\") a. Set category to Account Requests - Personal Data Request b. Assign to yourself if possible c. Summary should be set: PDR - Email Delete Request for <USER/EMAIL> d. Description should be set to the snippet PDR Request - Remove Personal Information or copied directly from the email if the template was followed. e. Use the ID for the ansible playbook On the ansible host, run the necessary ansible playbook: ansible-playbook -i inventories/production/hosts.ini playbooks/adhoc-ipauser-disable-pdr.yml --extra-vars='ipa_user=<USER> ticket_id=BT<TICKET>' Leave a comment on the issue that the disable request was performed. Email the affected user: Hello. We have reviewed your account request and have performed the requested changes. The ticket <ID> has been closed and set to private. Please note that some public content such as mailing lists cannot be deleted since some information is meant to serve the RESF legitimate business interests, the public interest, and the interest of the open source community. Thank you, please let us know if you have any further questions. 4. Set ticket to RESOLVED","title":"SOP: Personal Data Request - Deletion"},{"location":"team/infrastructure/idm_sop_gdpr/#contact-information","text":"Owner Infrastructure Team & Identity Management Team Email Contact infrastructure@rockylinux.org Email Contact identitymanagement@rockylinux.org Mattermost Contacts @label Mattermost Channels ~Infrastructure","title":"Contact Information"},{"location":"team/infrastructure/idm_sop_gdpr/#responding-to-a-deletion-request","text":"This section covers how a system administrator will use our adhoc-ipauser-disable-pdr.yml playbook to respond to a delete request. If a request has been received via email, perform the following steps: If request was received by email: Open a ticket at the bug tracker under the Account Services product (Click the drop down in the top right corner, click \"Account Services\", select \"Report Issue\") a. Set category to Account Requests - Personal Data Request b. Assign to yourself if possible c. Summary should be set: PDR - Email Delete Request for <USER/EMAIL> d. Description should be set to the snippet PDR Request - Remove Personal Information or copied directly from the email if the template was followed. e. Use the ID for the ansible playbook On the ansible host, run the necessary ansible playbook: ansible-playbook -i inventories/production/hosts.ini playbooks/adhoc-ipauser-disable-pdr.yml --extra-vars='ipa_user=<USER> ticket_id=BT<TICKET>' Leave a comment on the issue that the disable request was performed. Email the affected user: Hello. We have reviewed your account request and have performed the requested changes. The ticket <ID> has been closed and set to private. Please note that some public content such as mailing lists cannot be deleted since some information is meant to serve the RESF legitimate business interests, the public interest, and the interest of the open source community. Thank you, please let us know if you have any further questions. 4. Set ticket to RESOLVED","title":"Responding to a Deletion Request"},{"location":"team/infrastructure/services/","text":"Services and software in use by the Rocky Linux project Self-Hosted Services \u00b6 Item Use Status License Link Ansible Configuration management Deployed GPL-3.0 https://ansible.com FreeIPA Identity Management Deployed GPL-3.0 https://www.freeipa.org KeyCloak SSO System Deployed Apache License 2.0 https://keycloak.org Netbox IPAM Apache-2.0 https://github.com/netbox-community/netbox - Logging - - - Prometheus Monitoring Planned Apache-2.0 https://prometheus.io Koji Distro packaging Deployed LGPL-2.1 https://fedoraproject.org/wiki/Koji Mattermost Communications Deployed Mattermost EE https://mattermost.com Mock Distro packaging GPL-2.0 https://github.com/rpm-software-management/mock/wiki GitLab EE Distro Packaging Deployed MIT + GitLab EE License https://gitlab.com OpenProject Project management Deployed GPL-3.0 https://www.openproject.org - SIEM - - - Wiki.js Documentation Deployed AGPL-3.0 https://wiki.js.org Postgresql Database Engine >v11 Deployed ? https://www.postgresql.org/ Bugzilla Bug Tracking and Ticket System Deployed MPL https://bugzilla.org MantisBT Bug Tracking and Ticket System Removed GPL-2.0 https://mantisbt.org mailman3 mailing list system Deployed GPL-3.0 https://www.list.org/ hyperkitty mailing list system achiver Deployed GPL-3.0 https://www.list.org/ Third-Party Services \u00b6 Item Use Status Terms Link reCAPTCHA Anti-abuse In use [1] https://www.google.com/recaptcha/about Slack Communications, chat Deprecated [2] https://www.slack.com Libera IRC, chat In use [3] https://www.libera.chat Matrix Chat In use [4] https://matrix.org GitHub Source control, collaboration, registry, actions In use [5] https://www.github.com Figma Design collaboration In use [6] https://figma.com Discourse Community forums In use [7] https://www.discourse.org Google Workspace Foundation email In use [8] https://workspace.google.com [1] - Google legal terms , privacy policy [2] - Slack legal terms [3] - Freenode legal terms [4] - Matrix legal terms [5] - GitHub terms of service , privacy policy [6] - Figma legal terms , privacy policy [7] - Discourse legal terms , privacy policy [8] - Google Workspace legal terms free , paid , additional services , privacy policy Infrastructure Software \u00b6 Item Use Status License Link Terraform Infrastructure as code In use MPL-2.0 https://www.terraform.io Rocky 8 Operating system In use BSD-3, various OSI https://www.rockylinux.org KVM Virtualization In use GPL-2.0 or LGPL https://www.linux-kvm.org AWX Automation System Planned Apache License 2.0 https://github.com/ansible/awx Infrastructure Providers \u00b6 Item Use Status Terms Link Amazon Web Services Infrastructure Planned [1] https://aws.amazon.com Clouvider Infrastructure In use [2] https://www.clouvider.co.uk Spry Servers Infrastructure [3] https://www.spryservers.net Vercel Web hosting In use [4] https://vercel.com FOSSHOST Infrastructure [5] https://fosshost.org/ [1] - Amazon Web Services legal terms , privacy policy [2] - Clouvider legal terms , privacy policy [3] - Spry Servers legal terms [4] - Vercel legal terms , privacy policy [5] - FOSSHOST legal terms","title":"Services and Software"},{"location":"team/infrastructure/services/#self-hosted-services","text":"Item Use Status License Link Ansible Configuration management Deployed GPL-3.0 https://ansible.com FreeIPA Identity Management Deployed GPL-3.0 https://www.freeipa.org KeyCloak SSO System Deployed Apache License 2.0 https://keycloak.org Netbox IPAM Apache-2.0 https://github.com/netbox-community/netbox - Logging - - - Prometheus Monitoring Planned Apache-2.0 https://prometheus.io Koji Distro packaging Deployed LGPL-2.1 https://fedoraproject.org/wiki/Koji Mattermost Communications Deployed Mattermost EE https://mattermost.com Mock Distro packaging GPL-2.0 https://github.com/rpm-software-management/mock/wiki GitLab EE Distro Packaging Deployed MIT + GitLab EE License https://gitlab.com OpenProject Project management Deployed GPL-3.0 https://www.openproject.org - SIEM - - - Wiki.js Documentation Deployed AGPL-3.0 https://wiki.js.org Postgresql Database Engine >v11 Deployed ? https://www.postgresql.org/ Bugzilla Bug Tracking and Ticket System Deployed MPL https://bugzilla.org MantisBT Bug Tracking and Ticket System Removed GPL-2.0 https://mantisbt.org mailman3 mailing list system Deployed GPL-3.0 https://www.list.org/ hyperkitty mailing list system achiver Deployed GPL-3.0 https://www.list.org/","title":"Self-Hosted Services"},{"location":"team/infrastructure/services/#third-party-services","text":"Item Use Status Terms Link reCAPTCHA Anti-abuse In use [1] https://www.google.com/recaptcha/about Slack Communications, chat Deprecated [2] https://www.slack.com Libera IRC, chat In use [3] https://www.libera.chat Matrix Chat In use [4] https://matrix.org GitHub Source control, collaboration, registry, actions In use [5] https://www.github.com Figma Design collaboration In use [6] https://figma.com Discourse Community forums In use [7] https://www.discourse.org Google Workspace Foundation email In use [8] https://workspace.google.com [1] - Google legal terms , privacy policy [2] - Slack legal terms [3] - Freenode legal terms [4] - Matrix legal terms [5] - GitHub terms of service , privacy policy [6] - Figma legal terms , privacy policy [7] - Discourse legal terms , privacy policy [8] - Google Workspace legal terms free , paid , additional services , privacy policy","title":"Third-Party Services"},{"location":"team/infrastructure/services/#infrastructure-software","text":"Item Use Status License Link Terraform Infrastructure as code In use MPL-2.0 https://www.terraform.io Rocky 8 Operating system In use BSD-3, various OSI https://www.rockylinux.org KVM Virtualization In use GPL-2.0 or LGPL https://www.linux-kvm.org AWX Automation System Planned Apache License 2.0 https://github.com/ansible/awx","title":"Infrastructure Software"},{"location":"team/infrastructure/services/#infrastructure-providers","text":"Item Use Status Terms Link Amazon Web Services Infrastructure Planned [1] https://aws.amazon.com Clouvider Infrastructure In use [2] https://www.clouvider.co.uk Spry Servers Infrastructure [3] https://www.spryservers.net Vercel Web hosting In use [4] https://vercel.com FOSSHOST Infrastructure [5] https://fosshost.org/ [1] - Amazon Web Services legal terms , privacy policy [2] - Clouvider legal terms , privacy policy [3] - Spry Servers legal terms [4] - Vercel legal terms , privacy policy [5] - FOSSHOST legal terms","title":"Infrastructure Providers"},{"location":"team/release_engineering/","text":"This section is primarily for documentation for the Release Engineering team. There is a legacy section that is not maintained but is meant for historical references. Members \u00b6 Role Name Email Mattermost Name IRC Name Identity Management & Release Engineering Lead Louis Abel label@rockylinux.org @nazunalika Sokel/label/Sombra Release Engineering Co-Lead Mustafa Gezen mustafa@rockylinux.org @mustafa mstg Release Engineering and Development Skip Grube skip@rockylinux.org @skip77 Release Engineering and Development Sherif Nagy sherif@rockylinux.org @sherif Release Engineering and Development Pablo Greco N/A @pgreco pgreco Infrastructure Neil Hanlon neil@resf.org @neil neil Infrastructure Taylor Goodwill tg@resf.org @tgo tg","title":"Release Engineering"},{"location":"team/release_engineering/#members","text":"Role Name Email Mattermost Name IRC Name Identity Management & Release Engineering Lead Louis Abel label@rockylinux.org @nazunalika Sokel/label/Sombra Release Engineering Co-Lead Mustafa Gezen mustafa@rockylinux.org @mustafa mstg Release Engineering and Development Skip Grube skip@rockylinux.org @skip77 Release Engineering and Development Sherif Nagy sherif@rockylinux.org @sherif Release Engineering and Development Pablo Greco N/A @pgreco pgreco Infrastructure Neil Hanlon neil@resf.org @neil neil Infrastructure Taylor Goodwill tg@resf.org @tgo tg","title":"Members"},{"location":"team/release_engineering/packagekit/","text":"You have been redirected here to answer why you cannot find certain packages in Rocky Linux. Missing Package \u00b6 The package you are searching for is not available in Rocky Linux. There are a few reasons why this could be: We cannot include software that is encumbered by software patents We cannot include software that is not in the Base OS (you are encouraged to use EPEL and SIGs) In the case of a SIG, we cannot package proprietary software. Perhaps someone has not packaged it yet to be included in a SIG. Missing Codecs \u00b6 The codecs you are searching for is not available in Rocky Linux. A codec is a program that allows the user to encode or decode a data stream in a specific format (think MP3/MOV/WMV). Upstream, and thus Rocky Linux, generally do not have such codecs. The question we generally receive is \"Why can't you provide it in a SIG or an extras?\" It's because of the following reasons: Many codecs are proprietary or patent encumbered Some codecs may not be encumbered, but may be under a license that is not acceptable We encourage users to either: Use formats such as OGG, Dirac, and FLAC Consider finding a third party repository that provides such codecs such as rpmfusion Note that we cannot support you if you choose to use such repositories. Missing Drivers \u00b6 Since Rocky Linux matches upstream with Red Hat Enterprise Linux, we are limited to the hardware that their kernel configuration supports. We are encourage you to use ELRepo where you can kind kmod's + newer kernerls or a future legacy hardware SIG if Rocky Linux supports as such. Missing Fonts \u00b6 The font that you are looking for is not available in Rocky Linux. This is because we only include fonts that are available in the upstream Red Hat Enterprise Linux.","title":"Package Kit"},{"location":"team/release_engineering/packagekit/#missing-package","text":"The package you are searching for is not available in Rocky Linux. There are a few reasons why this could be: We cannot include software that is encumbered by software patents We cannot include software that is not in the Base OS (you are encouraged to use EPEL and SIGs) In the case of a SIG, we cannot package proprietary software. Perhaps someone has not packaged it yet to be included in a SIG.","title":"Missing Package"},{"location":"team/release_engineering/packagekit/#missing-codecs","text":"The codecs you are searching for is not available in Rocky Linux. A codec is a program that allows the user to encode or decode a data stream in a specific format (think MP3/MOV/WMV). Upstream, and thus Rocky Linux, generally do not have such codecs. The question we generally receive is \"Why can't you provide it in a SIG or an extras?\" It's because of the following reasons: Many codecs are proprietary or patent encumbered Some codecs may not be encumbered, but may be under a license that is not acceptable We encourage users to either: Use formats such as OGG, Dirac, and FLAC Consider finding a third party repository that provides such codecs such as rpmfusion Note that we cannot support you if you choose to use such repositories.","title":"Missing Codecs"},{"location":"team/release_engineering/packagekit/#missing-drivers","text":"Since Rocky Linux matches upstream with Red Hat Enterprise Linux, we are limited to the hardware that their kernel configuration supports. We are encourage you to use ELRepo where you can kind kmod's + newer kernerls or a future legacy hardware SIG if Rocky Linux supports as such.","title":"Missing Drivers"},{"location":"team/release_engineering/packagekit/#missing-fonts","text":"The font that you are looking for is not available in Rocky Linux. This is because we only include fonts that are available in the upstream Red Hat Enterprise Linux.","title":"Missing Fonts"},{"location":"team/release_engineering/sop_compose/","text":"This SOP covers how the Rocky Linux Release Engineering Team handles composes and repository syncs for the distribution. It contains information of the scripts that are utilized and in what order, depending on the use case. Contact Information \u00b6 Owner Release Engineering Team Email Contact releng@rockylinux.org Email Contact infrastructure@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development Related Git Repositories \u00b6 There are several git repositories used in the overall composition of a repository or a set of repositories. Pungi - This repository contains all the necessary pungi configuration files for composes that come from koji. Pungi interacts with koji to build the composes. Comps - This repository contains all the necessary comps (which are groups and other data) for a given major version. Pungi uses this information to properly build the repositories. Toolkit - This repository contains various scripts and utilities used by Release Engineering, such as syncing composes, functionality testing, and mirror maintenance. Composing Repositories \u00b6 Mount Structure \u00b6 There is a designated system that takes care of composing repositories. These systems contain the necessary EFS/NFS mounts for the staging and production repositories as well as composes. /mnt/koji -> Koji files store /mnt/compose -> Compose data /mnt/repos-staging -> Staging /mnt/repos-production -> Production Pungi \u00b6 Each repository or set of repositories are controlled by various pungi configurations. For example, r8.conf will control the absolute base of Rocky Linux 8, which imports other git repository data as well as accompanying json or other configuration files. Running a Compose \u00b6 Inside the pungi git repository, the folder scripts contain the necessary scripts that are ran to perform a compose. There are different types of composes: produce -> Generates a full compose, generally used for minor releases, which generate new ISO's update -> Generates a smaller compose, generally used for updates within a minor release cycle - ISO's are not generated Each script is titled appropriately: produce-X.sh -> Generates a full compose for X major release, typically set to the current minor release according to rX.conf updates-X.sh -> Generates a smaller compose for X major release, typically set to the current minor release according to rX.conf updates-X-NAME.sh -> Generates a compose for the specific compose, such as NFV, Rocky-devel, Extras, or other various sigs if built within koji. When these scripts are ran, they generate an appropriate directory under /mnt/compose/X with a directory and an accompanying symlink. For example. If an update to Rocky was made using updates-8.sh , the below would be made: drwxr-xr-x. 5 root root 6144 Jul 21 17:44 Rocky-8-updates-20210721.1 lrwxrwxrwx. 1 root root 26 Jul 21 18:26 latest-Rocky-8 -> Rocky-8-updates-20210721.1 This setup also allows pungi to reuse previous package set data to reduce the time it takes to build a compose. Typically during a new minor release, all composes should be ran so they can be properly combined. Example of a typical order if releasing 8.X: produce-8.sh updates-8-devel.sh updates-8-extras.sh updates-8-plus.sh updates-8-nfv.sh updates-8-gluster9.sh updates-8-advanced-virt.sh Syncing Composes \u00b6 Syncing utilizes the sync scripts provided in the release engineering toolkit. When the scripts are being ran, they are usually ran with a specific purpose or a reason. They are also ran in a certain order to ensure integrity and consistency of a release. The below are common vars files. common_X will override what's in common. Typically these set what repositories exist and how they are named or look at the top level. These also set the current major.minor release as necessary. . \u251c\u2500\u2500 common \u251c\u2500\u2500 common_8 \u251c\u2500\u2500 common_9 These are for the releases in general. What they do is noted below. \u251c\u2500\u2500 gen-torrents.sh -> Generates torrents for images \u251c\u2500\u2500 minor-release-sync-to-staging.sh -> Syncs a minor release to staging \u251c\u2500\u2500 prep-staging-X.sh -> Preps staging updates and signs repos \u251c\u2500\u2500 sign-repos-only.sh -> Signs the repomd (only) \u251c\u2500\u2500 sync-to-prod.sh -> Syncs staging to production \u251c\u2500\u2500 sync-to-staging.sh -> Syncs a provided compose to staging \u251c\u2500\u2500 sync-to-staging-sig.sh -> Syncs a sig provided compose to staging Generally, you will only run minor-release-sync-to-staging.sh when a full minor release is being produced. So for example, if 8.5 has been built out, you would run that after a compose. gen-torrents.sh would be ran shortly after. When doing updates, the order of operations (preferably) would be: * sync-to-staging.sh * sync-to-staging-sig.sh -> Only if sigs are updated * prep-staging-X.sh` -> This is required to ensure the groups, comps, and module data stay sane. This helps us provide older packages in the repos as well as signs repo metadata. * sync-to-prod.sh -> After the initial testing, it is sent to prod. An example of order: # The below syncs to staging RLVER=8 bash sync-to-staging.sh Rocky RLVER=8 bash sync-to-staging.sh Rocky-devel RLVER=8 bash sync-to-staging.sh Extras RLVER=8 bash sync-to-staging.sh NFV RLVER=8 bash sync-to-staging.sh Plus RLVER=8 bash sync-to-staging.sh gluster9 storage bash prep-staging-8.sh Once the syncs are done, staging must be tested and vetted before being sent to production. During this stage, the updateinfo.xml is also applied where necessary to the repositories to provide errata. Once staging is completed, it is synced to production. bash RLVER=8 sync-to-prod.sh During this phase, staging is rsynced with production, the file list is updated, and the full time list is also updated to allow mirrors to know that the repositories have been updated and that they can sync.","title":"SOP Compose"},{"location":"team/release_engineering/sop_compose/#contact-information","text":"Owner Release Engineering Team Email Contact releng@rockylinux.org Email Contact infrastructure@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development","title":"Contact Information"},{"location":"team/release_engineering/sop_compose/#related-git-repositories","text":"There are several git repositories used in the overall composition of a repository or a set of repositories. Pungi - This repository contains all the necessary pungi configuration files for composes that come from koji. Pungi interacts with koji to build the composes. Comps - This repository contains all the necessary comps (which are groups and other data) for a given major version. Pungi uses this information to properly build the repositories. Toolkit - This repository contains various scripts and utilities used by Release Engineering, such as syncing composes, functionality testing, and mirror maintenance.","title":"Related Git Repositories"},{"location":"team/release_engineering/sop_compose/#composing-repositories","text":"","title":"Composing Repositories"},{"location":"team/release_engineering/sop_compose/#mount-structure","text":"There is a designated system that takes care of composing repositories. These systems contain the necessary EFS/NFS mounts for the staging and production repositories as well as composes. /mnt/koji -> Koji files store /mnt/compose -> Compose data /mnt/repos-staging -> Staging /mnt/repos-production -> Production","title":"Mount Structure"},{"location":"team/release_engineering/sop_compose/#pungi","text":"Each repository or set of repositories are controlled by various pungi configurations. For example, r8.conf will control the absolute base of Rocky Linux 8, which imports other git repository data as well as accompanying json or other configuration files.","title":"Pungi"},{"location":"team/release_engineering/sop_compose/#running-a-compose","text":"Inside the pungi git repository, the folder scripts contain the necessary scripts that are ran to perform a compose. There are different types of composes: produce -> Generates a full compose, generally used for minor releases, which generate new ISO's update -> Generates a smaller compose, generally used for updates within a minor release cycle - ISO's are not generated Each script is titled appropriately: produce-X.sh -> Generates a full compose for X major release, typically set to the current minor release according to rX.conf updates-X.sh -> Generates a smaller compose for X major release, typically set to the current minor release according to rX.conf updates-X-NAME.sh -> Generates a compose for the specific compose, such as NFV, Rocky-devel, Extras, or other various sigs if built within koji. When these scripts are ran, they generate an appropriate directory under /mnt/compose/X with a directory and an accompanying symlink. For example. If an update to Rocky was made using updates-8.sh , the below would be made: drwxr-xr-x. 5 root root 6144 Jul 21 17:44 Rocky-8-updates-20210721.1 lrwxrwxrwx. 1 root root 26 Jul 21 18:26 latest-Rocky-8 -> Rocky-8-updates-20210721.1 This setup also allows pungi to reuse previous package set data to reduce the time it takes to build a compose. Typically during a new minor release, all composes should be ran so they can be properly combined. Example of a typical order if releasing 8.X: produce-8.sh updates-8-devel.sh updates-8-extras.sh updates-8-plus.sh updates-8-nfv.sh updates-8-gluster9.sh updates-8-advanced-virt.sh","title":"Running a Compose"},{"location":"team/release_engineering/sop_compose/#syncing-composes","text":"Syncing utilizes the sync scripts provided in the release engineering toolkit. When the scripts are being ran, they are usually ran with a specific purpose or a reason. They are also ran in a certain order to ensure integrity and consistency of a release. The below are common vars files. common_X will override what's in common. Typically these set what repositories exist and how they are named or look at the top level. These also set the current major.minor release as necessary. . \u251c\u2500\u2500 common \u251c\u2500\u2500 common_8 \u251c\u2500\u2500 common_9 These are for the releases in general. What they do is noted below. \u251c\u2500\u2500 gen-torrents.sh -> Generates torrents for images \u251c\u2500\u2500 minor-release-sync-to-staging.sh -> Syncs a minor release to staging \u251c\u2500\u2500 prep-staging-X.sh -> Preps staging updates and signs repos \u251c\u2500\u2500 sign-repos-only.sh -> Signs the repomd (only) \u251c\u2500\u2500 sync-to-prod.sh -> Syncs staging to production \u251c\u2500\u2500 sync-to-staging.sh -> Syncs a provided compose to staging \u251c\u2500\u2500 sync-to-staging-sig.sh -> Syncs a sig provided compose to staging Generally, you will only run minor-release-sync-to-staging.sh when a full minor release is being produced. So for example, if 8.5 has been built out, you would run that after a compose. gen-torrents.sh would be ran shortly after. When doing updates, the order of operations (preferably) would be: * sync-to-staging.sh * sync-to-staging-sig.sh -> Only if sigs are updated * prep-staging-X.sh` -> This is required to ensure the groups, comps, and module data stay sane. This helps us provide older packages in the repos as well as signs repo metadata. * sync-to-prod.sh -> After the initial testing, it is sent to prod. An example of order: # The below syncs to staging RLVER=8 bash sync-to-staging.sh Rocky RLVER=8 bash sync-to-staging.sh Rocky-devel RLVER=8 bash sync-to-staging.sh Extras RLVER=8 bash sync-to-staging.sh NFV RLVER=8 bash sync-to-staging.sh Plus RLVER=8 bash sync-to-staging.sh gluster9 storage bash prep-staging-8.sh Once the syncs are done, staging must be tested and vetted before being sent to production. During this stage, the updateinfo.xml is also applied where necessary to the repositories to provide errata. Once staging is completed, it is synced to production. bash RLVER=8 sync-to-prod.sh During this phase, staging is rsynced with production, the file list is updated, and the full time list is also updated to allow mirrors to know that the repositories have been updated and that they can sync.","title":"Syncing Composes"},{"location":"team/release_engineering/debranding/","text":"What is Debranding? \u00b6 Certain packages in the upstream RHEL/CentOS have logos, trademarks, and other specific text, images, or multimedia that other entities (like the Rocky Linux Foundation) are not allowed to redistribute. A visible, simple example is the Apache web server (package httpd). If you've ever installed it and visited the default web server page, you will see a test page specific to your Linux distro, complete with a \"powered by\" logo and distro-specific information. While we are allowed to compile and redistribute the Apache web server software, Rocky Linux is NOT allowed to include these trademarked images or distro-specific text! We must have an automated process that will strip these assets out and replace them with our own branding upon import into our Gitlab. How Rocky Debranding Works \u00b6 Rocky's method for importing packages from the upstream is a tool called srpmproc ( https://git.rockylinux.org/release-engineering/public/srpmproc ) Srpmproc's purpose in life is to: Clone PACKAGE from our upstream source: git.centos.org/rpms/PACKAGE Check if Rocky Linux has any debranding patches available for PACKAGE (under https://git.rockylinux.org/patch/PACKAGE ) If patch/PACKAGE exists, then read the configuration and patches from that repository and apply them Commit the results (patched or not) to https://git.rockylinux.org/rpms/PACKAGE Do this for every package until we have a full repository of packages in our Git How Many Packages are we Talking About? \u00b6 That is an open question. We know, at a minimum, there are 40 packages referred to in the CentOS 8 release notes that need to be modified from upstream. (34 modified, 6 added. See: https://wiki.centos.org/Manuals/ReleaseNotes/CentOS8.1905#Packages_modified_by_CentOS ) However, we also know this list is incomplete. For example, package nginx (a popular web server) has not been rebranded by CentOS, but should be. We cannot include this package as-is, it must be debranded before it's imported to Rocky Linux's Git. Open Call for Help: \u00b6 Like nginx, there are undoubtedly more packages that are not on the default CentOS list, but must be debranded. We are trying to build a complete list, but we need YOUR help! The Rocky Linux community includes a metric ton of CentOS/RHEL administrators who collectively are familiar with the ENTIRE package base. If you notice a package that has upstream branding, but is not on our tracking list, PLEASE let us know! We prefer you drop by channel #Dev/Packaging on chat.rockylinux.org , but any way you can get the message to us is acceptable! Helping with Debrands \u00b6 There are 2 tasks involved with debranding. Identifying packages that require debranding (see call for help above), and developing patches+configs to debrand the necessary packages. If you want to help with the latter, please see \" Rocky Debrand How-To \" located in the same folder of this Wiki. Debrand Packages Tracking \u00b6 A list of packages that need debranding and their status is located in the Wiki in this folder under: Debranding/Debrand_Tracking . It will be updated as debrand patches are submitted and the needed packages are identified.","title":"Intro to Debranding with Rocky Linux"},{"location":"team/release_engineering/debranding/#what-is-debranding","text":"Certain packages in the upstream RHEL/CentOS have logos, trademarks, and other specific text, images, or multimedia that other entities (like the Rocky Linux Foundation) are not allowed to redistribute. A visible, simple example is the Apache web server (package httpd). If you've ever installed it and visited the default web server page, you will see a test page specific to your Linux distro, complete with a \"powered by\" logo and distro-specific information. While we are allowed to compile and redistribute the Apache web server software, Rocky Linux is NOT allowed to include these trademarked images or distro-specific text! We must have an automated process that will strip these assets out and replace them with our own branding upon import into our Gitlab.","title":"What is Debranding?"},{"location":"team/release_engineering/debranding/#how-rocky-debranding-works","text":"Rocky's method for importing packages from the upstream is a tool called srpmproc ( https://git.rockylinux.org/release-engineering/public/srpmproc ) Srpmproc's purpose in life is to: Clone PACKAGE from our upstream source: git.centos.org/rpms/PACKAGE Check if Rocky Linux has any debranding patches available for PACKAGE (under https://git.rockylinux.org/patch/PACKAGE ) If patch/PACKAGE exists, then read the configuration and patches from that repository and apply them Commit the results (patched or not) to https://git.rockylinux.org/rpms/PACKAGE Do this for every package until we have a full repository of packages in our Git","title":"How Rocky Debranding Works"},{"location":"team/release_engineering/debranding/#how-many-packages-are-we-talking-about","text":"That is an open question. We know, at a minimum, there are 40 packages referred to in the CentOS 8 release notes that need to be modified from upstream. (34 modified, 6 added. See: https://wiki.centos.org/Manuals/ReleaseNotes/CentOS8.1905#Packages_modified_by_CentOS ) However, we also know this list is incomplete. For example, package nginx (a popular web server) has not been rebranded by CentOS, but should be. We cannot include this package as-is, it must be debranded before it's imported to Rocky Linux's Git.","title":"How Many Packages are we Talking About?"},{"location":"team/release_engineering/debranding/#open-call-for-help","text":"Like nginx, there are undoubtedly more packages that are not on the default CentOS list, but must be debranded. We are trying to build a complete list, but we need YOUR help! The Rocky Linux community includes a metric ton of CentOS/RHEL administrators who collectively are familiar with the ENTIRE package base. If you notice a package that has upstream branding, but is not on our tracking list, PLEASE let us know! We prefer you drop by channel #Dev/Packaging on chat.rockylinux.org , but any way you can get the message to us is acceptable!","title":"Open Call for Help:"},{"location":"team/release_engineering/debranding/#helping-with-debrands","text":"There are 2 tasks involved with debranding. Identifying packages that require debranding (see call for help above), and developing patches+configs to debrand the necessary packages. If you want to help with the latter, please see \" Rocky Debrand How-To \" located in the same folder of this Wiki.","title":"Helping with Debrands"},{"location":"team/release_engineering/debranding/#debrand-packages-tracking","text":"A list of packages that need debranding and their status is located in the Wiki in this folder under: Debranding/Debrand_Tracking . It will be updated as debrand patches are submitted and the needed packages are identified.","title":"Debrand Packages Tracking"},{"location":"team/release_engineering/debranding/debrand_list/","text":"This is a list of packages that require changes to their material for acceptance in Rocky Linux. Usually this means there is some text or images in the package that reference upstream trademarks, and these must be swapped out before we can distribute them. The first items in this list are referenced from the excellent CentOS release notes here: https://wiki.centos.org/Manuals/ReleaseNotes/CentOS8.1905#Packages_modified_by_CentOS It is assumed that we will have to modify these same packages. It is also assumed that these changed packages might not necessarily be debranding. However, this list is incomplete. For example, the package Nginx does not appear on the list, and still has RHEL branding in the CentOS repos. We will need to investigate the rest of the package set and find any more packages like this that we must modify. One way to find said changes is to look for ?centos tags in the SPEC file, while also looking at the manual debranding if there was any for the c8 branches. There will be cases where a search and replace for ?centos to ?rocky will be sufficient. Current patches (for staging) are here . Packages that need debranding changes: \u00b6 Package Notes Work Status abrt See here DONE anaconda See here DONE apache-commons-net AppStream module with elevating branch names NO CHANGES REQUIRED ~~basesystem~~ (does not require debranding, it is a skeleton package) NO CHANGES REQUIRED cloud-init See here DONE - NEEDS REVIEW IN GITLAB (Rich Alloway) cockpit See here DONE ~~compat-glibc~~ NOT IN EL 8 dhcp See here DONE , NEEDS REVIEW IN GITLAB (Rich Alloway) firefox See here -- Still requires a distribution.ini ID MOSTLY DONE (Louis) fwupdate NOT STARTED glusterfs Changes don't appear to be required NO CHANGES REQUIRED gnome-settings-daemon No changes required for now. NO CHANGES REQUIRED grub2 (secureboot patches not done, just debrand) See here DONE , NEEDS REVIEW IN GITLAB AND SECUREBOOT (Rich Alloway) httpd See here DONE initial-setup See here DONE ipa This is a dual change: Logos and ipaplatform. Logos are taken care of in rocky-logos and the ipaplatform is taken care of here. See here DONE ~~kabi-yum-plugins~~ NOT IN EL 8 kernel See here for a potential example NOT STARTED ~~kde-settings~~ NOT IN EL 8 libreport See here DONE oscap-anaconda-addon See here DONE Requires install QA PackageKit See here DONE ~~pcs~~ NO CHANGES REQUIRED plymouth See here DONE ~~redhat-lsb~~ NO CHANGES REQUIRED redhat-rpm-config See here DONE scap-security-guide QA is likely required to test this package as it is NO CHANGES REQUIRED, QA REQUIRED shim NOT STARTED shim-signed NOT STARTED sos See here DONE subscription-manager See here DONE , NEEDS REVIEW ~~system-config-date~~ NOT IN EL8 ~~system-config-kdump~~ NOT IN EL8 thunderbird See here DONE ~~xulrunner~~ NOT IN EL 8 ~~yum~~ NO CHANGES REQUIRED (end of CentOS list) nginx Identified changes, in staging (ALMOST) DONE Packages that need to become other packages: \u00b6 We will want to create our own versions of these packages. The full \"lineage\" is shown, from RHEL -> CentOS -> Rocky (Where applicable) Package Notes redhat-indexhtml -> centos-indexhtml -> rocky-indexhtml Here redhat-logos -> centos-logos -> rocky-logos Here redhat-release-* -> centos-release -> rocky-release Here centos-backgrounds -> rocky-backgrounds Provided by logos centos-linux-repos -> rocky-repos Here centos-obsolete-packages Here Packages that Exist in RHEL, but not in CentOS \u00b6 For sake of complete information, here is a list of packages that are in RHEL 8, but do not exist in CentOS 8. We do not need to worry about these packages: insights-client Red_Hat_Enterprise_Linux-Release_Notes-8-* redhat-access-gui redhat-bookmarks subscription-manager-migration subscription-manager-migration-data","title":"Rocky Debrand Packages List"},{"location":"team/release_engineering/debranding/debrand_list/#packages-that-need-debranding-changes","text":"Package Notes Work Status abrt See here DONE anaconda See here DONE apache-commons-net AppStream module with elevating branch names NO CHANGES REQUIRED ~~basesystem~~ (does not require debranding, it is a skeleton package) NO CHANGES REQUIRED cloud-init See here DONE - NEEDS REVIEW IN GITLAB (Rich Alloway) cockpit See here DONE ~~compat-glibc~~ NOT IN EL 8 dhcp See here DONE , NEEDS REVIEW IN GITLAB (Rich Alloway) firefox See here -- Still requires a distribution.ini ID MOSTLY DONE (Louis) fwupdate NOT STARTED glusterfs Changes don't appear to be required NO CHANGES REQUIRED gnome-settings-daemon No changes required for now. NO CHANGES REQUIRED grub2 (secureboot patches not done, just debrand) See here DONE , NEEDS REVIEW IN GITLAB AND SECUREBOOT (Rich Alloway) httpd See here DONE initial-setup See here DONE ipa This is a dual change: Logos and ipaplatform. Logos are taken care of in rocky-logos and the ipaplatform is taken care of here. See here DONE ~~kabi-yum-plugins~~ NOT IN EL 8 kernel See here for a potential example NOT STARTED ~~kde-settings~~ NOT IN EL 8 libreport See here DONE oscap-anaconda-addon See here DONE Requires install QA PackageKit See here DONE ~~pcs~~ NO CHANGES REQUIRED plymouth See here DONE ~~redhat-lsb~~ NO CHANGES REQUIRED redhat-rpm-config See here DONE scap-security-guide QA is likely required to test this package as it is NO CHANGES REQUIRED, QA REQUIRED shim NOT STARTED shim-signed NOT STARTED sos See here DONE subscription-manager See here DONE , NEEDS REVIEW ~~system-config-date~~ NOT IN EL8 ~~system-config-kdump~~ NOT IN EL8 thunderbird See here DONE ~~xulrunner~~ NOT IN EL 8 ~~yum~~ NO CHANGES REQUIRED (end of CentOS list) nginx Identified changes, in staging (ALMOST) DONE","title":"Packages that need debranding changes:"},{"location":"team/release_engineering/debranding/debrand_list/#packages-that-need-to-become-other-packages","text":"We will want to create our own versions of these packages. The full \"lineage\" is shown, from RHEL -> CentOS -> Rocky (Where applicable) Package Notes redhat-indexhtml -> centos-indexhtml -> rocky-indexhtml Here redhat-logos -> centos-logos -> rocky-logos Here redhat-release-* -> centos-release -> rocky-release Here centos-backgrounds -> rocky-backgrounds Provided by logos centos-linux-repos -> rocky-repos Here centos-obsolete-packages Here","title":"Packages that need to become other packages:"},{"location":"team/release_engineering/debranding/debrand_list/#packages-that-exist-in-rhel-but-not-in-centos","text":"For sake of complete information, here is a list of packages that are in RHEL 8, but do not exist in CentOS 8. We do not need to worry about these packages: insights-client Red_Hat_Enterprise_Linux-Release_Notes-8-* redhat-access-gui redhat-bookmarks subscription-manager-migration subscription-manager-migration-data","title":"Packages that Exist in RHEL, but not in CentOS"},{"location":"team/release_engineering/debranding/patching/","text":"This explains how to debrand/patch a package for the Rocky Linux distribution. General Instructions \u00b6 First, identify the files in the package that need to be changed. They could be text files, image files, or others. You can identify the file(s) by digging into git.centos.org/rpms/PACKAGE/ Develop replacements for these files, but with Rocky branding placed instead. Diff/patch files may be needed as well for certain types of text, depends on the content being replaced. Replacement files go under https://git.rockylinux.org/patch/PACKAGE/ROCKY/_supporting/ Config file (specifying how to apply the patches) goes in https://git.rockylinux.org/patch/PACKAGE/ROCKY/CFG/*.cfg Note: Use spaces, not tabs. When srpmproc goes to import the package to Rocky, it will see the work done in https://git.rockylinux.org/patch/PACKAGE , and apply the stored patches by reading the config file(s) under ROCKY/CFG/*.cfg The Patch Config Language \u00b6 Patching uses simple proto3 config files. The general format is: Action { file: \"OriginalFile\" with_file: \"ROCKY/_supporting/RockyReplaceFile\" } A simple example to replace a file: replace { file: \"redhatlogo.png\" with_file: \"ROCKY/_supporting/rockylogo.png\" } The file \"redhatlogo.png\" would be located in under SOURCES/ in the project's Git repository (and SRPM). Patch configuration options \u00b6 add : Adds a file to the sources using the file or lookaside directive delete : Deletes a file from the sources using the file directive replace : Replaces a file from the sources using the file and with_file directives patch : Performs a patch based on the diff provided in the file directive (generated using git diff ) spec_change : Allows for spec files to be modified search_and_replace : Performs a search and replace on a given text for the spec file using the any/starts_with/ends_with (true|false), find (string to find), replace (replacement string), and n (integar, -1 for any) directives. file : A file can be added to the spec file using the name directive to define the file name, the type directive (such as patch ) and then an add option that is true or false When patch is used, the following options are available: add_to_prep (true|false) n_path: N can be specified to add %patchX -pN lines into %prep assuming the rpm does not use %autosetup append : Appends to a given field , such as Release with a value directive changelog : Modifies the change log using author_name , author_email , and message directives Patch configuration structure: . \u2514\u2500\u2500 ROCKY \u251c\u2500\u2500 CFG \u2514\u2500\u2500 _supporting Case Study: Nginx \u00b6 (note: all example data here is currently in the staging/ area of Rocky Linux Git. We will update it when the projects are moved to the production area) Let's go over an example debrand, featuring the Nginx web server package. The source repository is located here: https://git.centos.org/rpms/nginx If we browse one of the c8-* branches, we see under SOURCES/ that there is definitely some content that needs to be debranded: 404.html 50x.html index.html poweredby.png (binary file in dist-git, referred to in .nginx.metadata) These files all refer to Red Hat inc., and must be replaced before they make it to Rocky Linux. 1: Come up with the patches: Each of these files has a Rocky Linux counterpart, and they must be created. Some of this should be done by the Design Team, especially logo work (#Design on chat) 2: Commit patches to the matching patch/PROJECT Git repository : For example, Nginx patches are located here: https://git.rockylinux.org/staging/patch/nginx (staging/ prefix is currently used until our production repos are set up) 3: Develop a matching config file: Our example Nginx has this here: https://git.rockylinux.org/staging/patch/nginx/-/blob/main/ROCKY/CFG/pages.cfg It looks like this: replace { file: \"index.html\" with_file: \"ROCKY/_supporting/index.html\" } replace { file: \"404.html\" with_file: \"ROCKY/_supporting/404.html\" } replace { file: \"50x.html\" with_file: \"ROCKY/_supporting/50x.html\" } replace { file: \"poweredby.png\" with_file: \"ROCKY/_supporting/poweredby.png\" } 4: Test the import: Now, when the upstream is imported, we can check the main Rocky nginx repository and ensure our updates were successful: https://git.rockylinux.org/staging/rpms/nginx/ (again, staging/ group is used only for now) 5: You're Done! Great! Now do the next one... ;-) More Debrand Config Language \u00b6 The Nginx example showed just the replace directive, but there are several more available. They are add , patch , and delete. Here they are, with examples: # Add a file to the project (file is added to SOURCES/ folder ) add { file: \"ROCKY/_supporting/add_me.txt\" } # Apply a .patch file (generated using the Linux \"patch\" utility) patch { file: \"ROCKY/_supporting/002-test-html.patch\" } # Delete a file from the source project delete { file: \"SOURCES/dontneed.txt\" } And the .patch file example looks like this: diff --git a/SOURCES/test.html b/SOURCES/test.html index 8d91ffd..3f76c3b 100644 --- a/SOURCES/test.html +++ b/SOURCES/test.html @@ -1,6 +1,6 @@ <!DOCTYPE html> <html> <body> - <h1>Replace me</h1> + <h1>Replace I did!</h1> </body> </html> It also supports spec file changes, as it may be necessary. For example, from the anaconda debrand patch repo. add { file: \"ROCKY/_supporting/0002-Rocky-disable-cdn-radiobutton.patch\" } spec_change { # Adds a Patch line with the file name as listed above file { name: \"0002-Rocky-disable-cdn-radiobutton.patch\" type: Patch add: true } # Appends to the end of a field's line, in this case the Release field gets .rocky append { field: \"Release\" value: \".rocky\" } # Adds to the change log properly changelog { author_name: \"Mustafa Gezen\" author_email: \"mustafa@rockylinux.org\" message: \"Disable CDN and add .rocky to Release\" } } At the end, the spec file should be changed. Summary: Graphical system installer Name: anaconda Version: 33.16.3.26 # Our .rocky appears here Release: 2%{?dist}.rocky -- snip -- Patch1: 0001-network-do-not-crash-on-infiniband-devices-activated.patch # Look, our patch was added! # Luckily this RPM uses %autosetup, so no %patch lines Patch2: 0002-Rocky-disable-cdn-radiobutton.patch -- snip -- # And below the added changelog %changelog * Thu Feb 25 2021 Mustafa Gezen <mustafa@rockylinux.org> - 33.16.3.26-2 - Disable CDN and add .rocky to Release * Thu Oct 22 2020 Radek Vykydal <rvykydal@redhat.com> - 33.16.3.26-2 - network: do not crash on infiniband devices activated in initramfs (rvykydal) Resolves: rhbz#1890261","title":"Rocky Patching How-To"},{"location":"team/release_engineering/debranding/patching/#general-instructions","text":"First, identify the files in the package that need to be changed. They could be text files, image files, or others. You can identify the file(s) by digging into git.centos.org/rpms/PACKAGE/ Develop replacements for these files, but with Rocky branding placed instead. Diff/patch files may be needed as well for certain types of text, depends on the content being replaced. Replacement files go under https://git.rockylinux.org/patch/PACKAGE/ROCKY/_supporting/ Config file (specifying how to apply the patches) goes in https://git.rockylinux.org/patch/PACKAGE/ROCKY/CFG/*.cfg Note: Use spaces, not tabs. When srpmproc goes to import the package to Rocky, it will see the work done in https://git.rockylinux.org/patch/PACKAGE , and apply the stored patches by reading the config file(s) under ROCKY/CFG/*.cfg","title":"General Instructions"},{"location":"team/release_engineering/debranding/patching/#the-patch-config-language","text":"Patching uses simple proto3 config files. The general format is: Action { file: \"OriginalFile\" with_file: \"ROCKY/_supporting/RockyReplaceFile\" } A simple example to replace a file: replace { file: \"redhatlogo.png\" with_file: \"ROCKY/_supporting/rockylogo.png\" } The file \"redhatlogo.png\" would be located in under SOURCES/ in the project's Git repository (and SRPM).","title":"The Patch Config Language"},{"location":"team/release_engineering/debranding/patching/#patch-configuration-options","text":"add : Adds a file to the sources using the file or lookaside directive delete : Deletes a file from the sources using the file directive replace : Replaces a file from the sources using the file and with_file directives patch : Performs a patch based on the diff provided in the file directive (generated using git diff ) spec_change : Allows for spec files to be modified search_and_replace : Performs a search and replace on a given text for the spec file using the any/starts_with/ends_with (true|false), find (string to find), replace (replacement string), and n (integar, -1 for any) directives. file : A file can be added to the spec file using the name directive to define the file name, the type directive (such as patch ) and then an add option that is true or false When patch is used, the following options are available: add_to_prep (true|false) n_path: N can be specified to add %patchX -pN lines into %prep assuming the rpm does not use %autosetup append : Appends to a given field , such as Release with a value directive changelog : Modifies the change log using author_name , author_email , and message directives Patch configuration structure: . \u2514\u2500\u2500 ROCKY \u251c\u2500\u2500 CFG \u2514\u2500\u2500 _supporting","title":"Patch configuration options"},{"location":"team/release_engineering/debranding/patching/#case-study-nginx","text":"(note: all example data here is currently in the staging/ area of Rocky Linux Git. We will update it when the projects are moved to the production area) Let's go over an example debrand, featuring the Nginx web server package. The source repository is located here: https://git.centos.org/rpms/nginx If we browse one of the c8-* branches, we see under SOURCES/ that there is definitely some content that needs to be debranded: 404.html 50x.html index.html poweredby.png (binary file in dist-git, referred to in .nginx.metadata) These files all refer to Red Hat inc., and must be replaced before they make it to Rocky Linux. 1: Come up with the patches: Each of these files has a Rocky Linux counterpart, and they must be created. Some of this should be done by the Design Team, especially logo work (#Design on chat) 2: Commit patches to the matching patch/PROJECT Git repository : For example, Nginx patches are located here: https://git.rockylinux.org/staging/patch/nginx (staging/ prefix is currently used until our production repos are set up) 3: Develop a matching config file: Our example Nginx has this here: https://git.rockylinux.org/staging/patch/nginx/-/blob/main/ROCKY/CFG/pages.cfg It looks like this: replace { file: \"index.html\" with_file: \"ROCKY/_supporting/index.html\" } replace { file: \"404.html\" with_file: \"ROCKY/_supporting/404.html\" } replace { file: \"50x.html\" with_file: \"ROCKY/_supporting/50x.html\" } replace { file: \"poweredby.png\" with_file: \"ROCKY/_supporting/poweredby.png\" } 4: Test the import: Now, when the upstream is imported, we can check the main Rocky nginx repository and ensure our updates were successful: https://git.rockylinux.org/staging/rpms/nginx/ (again, staging/ group is used only for now) 5: You're Done! Great! Now do the next one... ;-)","title":"Case Study: Nginx"},{"location":"team/release_engineering/debranding/patching/#more-debrand-config-language","text":"The Nginx example showed just the replace directive, but there are several more available. They are add , patch , and delete. Here they are, with examples: # Add a file to the project (file is added to SOURCES/ folder ) add { file: \"ROCKY/_supporting/add_me.txt\" } # Apply a .patch file (generated using the Linux \"patch\" utility) patch { file: \"ROCKY/_supporting/002-test-html.patch\" } # Delete a file from the source project delete { file: \"SOURCES/dontneed.txt\" } And the .patch file example looks like this: diff --git a/SOURCES/test.html b/SOURCES/test.html index 8d91ffd..3f76c3b 100644 --- a/SOURCES/test.html +++ b/SOURCES/test.html @@ -1,6 +1,6 @@ <!DOCTYPE html> <html> <body> - <h1>Replace me</h1> + <h1>Replace I did!</h1> </body> </html> It also supports spec file changes, as it may be necessary. For example, from the anaconda debrand patch repo. add { file: \"ROCKY/_supporting/0002-Rocky-disable-cdn-radiobutton.patch\" } spec_change { # Adds a Patch line with the file name as listed above file { name: \"0002-Rocky-disable-cdn-radiobutton.patch\" type: Patch add: true } # Appends to the end of a field's line, in this case the Release field gets .rocky append { field: \"Release\" value: \".rocky\" } # Adds to the change log properly changelog { author_name: \"Mustafa Gezen\" author_email: \"mustafa@rockylinux.org\" message: \"Disable CDN and add .rocky to Release\" } } At the end, the spec file should be changed. Summary: Graphical system installer Name: anaconda Version: 33.16.3.26 # Our .rocky appears here Release: 2%{?dist}.rocky -- snip -- Patch1: 0001-network-do-not-crash-on-infiniband-devices-activated.patch # Look, our patch was added! # Luckily this RPM uses %autosetup, so no %patch lines Patch2: 0002-Rocky-disable-cdn-radiobutton.patch -- snip -- # And below the added changelog %changelog * Thu Feb 25 2021 Mustafa Gezen <mustafa@rockylinux.org> - 33.16.3.26-2 - Disable CDN and add .rocky to Release * Thu Oct 22 2020 Radek Vykydal <rvykydal@redhat.com> - 33.16.3.26-2 - network: do not crash on infiniband devices activated in initramfs (rvykydal) Resolves: rhbz#1890261","title":"More Debrand Config Language"},{"location":"team/release_engineering/guidelines/","text":"This section is primarily for documentation and useful information as it pertains to guidelines for various packages or asset usage.","title":"Guidelines"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/","text":"This page goes over the basic guidelines for the rocky-logos package, which produces assets for anaconda, wallpapers, and other assets for the distribution. Release Engineering has the final \"go/no-go\" decision on submissios/assets/images in the package. Rocky Logo Assets \u00b6 In various parts of the package, the Rocky logo will need to exist in multiple forms: Green variant White variant This can be in the form of PNG , JPG , or SVG files. anaconda \u00b6 All anaconda image assets will be in PNG form. Backgrounds should be transparent with the exception of rnotes if applicable. Backgrounds \u00b6 See Backgrounds Section fedora \u00b6 SVG format of logo assets as fedora_logo (color) and fedora_logo_darkbackground (white), and a default as fedora_logo . firstboot \u00b6 First boot assets. This is generally the sidebar (like the anaconda installer) and a workstation icon. PNG format. icons/hicolor \u00b6 Rocky icons will appear here in different resolutions and must be in PNG or SVG format: 16x16/apps: PNG , system-logo-icon , fedora-logo-icon 22x22/apps: PNG , system-logo-icon , fedora-logo-icon 24x24/apps: PNG , system-logo-icon , fedora-logo-icon 32x32/apps: PNG , system-logo-icon , fedora-logo-icon 36x36/apps: PNG , system-logo-icon , fedora-logo-icon 48x48/apps: PNG , system-logo-icon , fedora-logo-icon 96x96/apps: PNG , system-logo-icon , fedora-logo-icon 256x256/apps: PNG , system-logo-icon , fedora-logo-icon scalable/apps: SVG , fedora-logo-icon , org.fedoraproject.AnacondaInstaller.svg , start-here.svg , xfce4_xicon1.svg symbolic/apps: SVG , org.fedoraproject.AnacondaInstaller-symbolic ipa \u00b6 IPA specific assets, usually text. They are generally PNG or JPG : header-logo.png - Text login-screen-background.jpg - No text login-screen-logo.png - Logo + Text product-name.png - Text pixmaps \u00b6 PNG format, these are usually assets used within GNOME, GDM, and other desktop environments. plymouth/charge \u00b6 Typically unchanged and is for the plymouth loading screen svg \u00b6 SVG format of logo assets as fedora_logo (color) and fedora_logo_darkbackground (white) color file dictates background color if applicable testpage \u00b6 index.html for httpd/nginx/etc Backgrounds/Wallpapers \u00b6 Structure \u00b6 Wallpapers appear in PNG format with a backing XML file to list out all available resolutions if applicable, as well as defaults. A defaults file looks at every other XML that is a default background provided by the backgrounds package and default options if applicable. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE wallpapers SYSTEM \"gnome-wp-list.dtd\"> <wallpapers> <wallpaper deleted=\"false\"> <name>Rocky Linux 9 Default Background - Placeholder Mesh</name> <filename>/usr/share/backgrounds/rocky-default-1-mesh.xml</filename> <options>zoom</options> <author>Louis Abel</author> <email>label@rockylinux.org</email> <license>CC-BY-SA 4.0</license> </wallpaper> <wallpaper deleted=\"false\"> <name>Rocky Linux 9 Default Background - Placeholder Target</name> <filename>/usr/share/backgrounds/rocky-default-1-target.xml</filename> <options>zoom</options> <author>Louis Abel</author> <email>label@rockylinux.org</email> <license>CC-BY-SA 4.0</license> </wallpaper> </wallpapers> The wallpaper itself will list every applicable variant of that background if applicable. <background> <starttime> <year>2021</year> <month>10</month> <day>29</day> <hour>19</hour> <minute>21</minute> <second>19</second> </starttime> <static> <duration>10000000000.0</duration> <file> <!-- Wide 16:9 --> <size width=\"1920\" height=\"1080\">/usr/share/backgrounds/rocky-default-1-mesh-16-9.png</size> <!-- Wide 16:10 --> <size width=\"1920\" height=\"1200\">/usr/share/backgrounds/rocky-default-1-mesh-16-10.png</size> <!-- Standard 4:3 --> <size width=\"2048\" height=\"1536\">/usr/share/backgrounds/rocky-default-1-mesh-4-3.png</size> <!-- Normalish 5:4 --> <size width=\"1280\" height=\"1024\">/usr/share/backgrounds/rocky-default-1-mesh-5-4.png</size> </file> </static> </background> Day/Night Wallpapers have a similar configuration. <background> <starttime> <year>2022</year> <month>01</month> <day>01</day> <hour>8</hour> <minute>00</minute> <second>00</second> </starttime> <!-- This animation will start at 8 AM. --> <!-- We start with day at 8 AM. It will remain up for 10 hours. --> <static> <duration>36000.0</duration> <file>/usr/share/backgrounds/rocky-default-1-mesh-day.png</file> </static> <!-- Day ended and starts to transition to night at 6 PM. The transition lasts for 2 hours, ending at 8 PM. --> <transition type=\"overlay\"> <duration>7200.0</duration> <from>/usr/share/backgrounds/rocky-default-1-mesh-day.png</from> <to>/usr/share/backgrounds/rocky-default-1-mesh-night.png</to> </transition> <!-- It's 8 PM, we're showing the night till 6 AM. --> <static> <duration>36000.0</duration> <file>/usr/share/backgrounds/rocky-default-1-mesh-night.png</file> </static> <!-- It's 6 AM, and we're starting to transition to day. Transition completes at 8 AM. --> <transition type=\"overlay\"> <duration>7200.0</duration> <from>/usr/share/backgrounds/rocky-default-1-mesh-night.png</from> <to>/usr/share/backgrounds/rocky-default-1-mesh-day.png</to> </transition> </background> Guidelines \u00b6 This section goes over the general guidelines for the main backgrounds included in the distribution. Note : It is highly recommended and encouraged that a submission should be the highest resolution as noted below. See the note on minimum resolutions. General Theme : Each Rocky release has a codename, and thus is the general theme. Examples. Rocky 8: Green Obsidian - Submissions only to extras Rocky 9: Blue Onyx - This should be generally a blue theme/color scheme Required Resolution(s) for Normal Submissions : Resolution must not exceed nor fall below: 4092x3072 Allowed : Anything related to nature, mountains, rocks, and the like (generally fitting into the \"rocky\" idea) Anything related to the codename (eg. Blue Onyx) Anything minimalist/abstract is allowed References to the release number (like 9, and so on) are allowed Complementary colors should be allowed in the image within reason Contrasting colors should be allowed in the image within reason Photography + Manipulation should be allowed within reasonG Highly Encouraged : Day and Night versions of wallpapers Discouraged : Avoid using the Rocky logo, unless it fits with an abstract/minimalist idea for the background Plain backdrops with the rocky logo are not permitted Minimum Resolutions \u00b6 For general submissions, we require the highest resolution to make things simpler, that way the user should be able to use a wallpaper without having to choose \"the right one\" for their monitor size. However, for the case case of extra backgrounds, this requirement is more relaxed. If a submitter wishes not to use the highest resolution but opts to make multiple resolutions instead, they should follow the below list: Minimum Required Resolutions : 16:9 (1920x1080) 16:10 (1920x1200) 5:4 (2048x1536) 4:3 (1280x1024) Additional (encouraged) allowed resolutions : 3440x1440 2560x1600 2560x1440 2560x1080 1800x1440 Portrait mode versions of the above are optional The placeholders in this commit shows an example of using the minimum resolutions. Extras Package \u00b6 If a wallpaper does not make it to the main package (whether it doesn't meet guidelines or is simply just Rocky inspired), they should be able to be submitted for addition into the rocky-backgrounds-extras package.","title":"Rocky Logos Package Guidelines"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#rocky-logo-assets","text":"In various parts of the package, the Rocky logo will need to exist in multiple forms: Green variant White variant This can be in the form of PNG , JPG , or SVG files.","title":"Rocky Logo Assets"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#anaconda","text":"All anaconda image assets will be in PNG form. Backgrounds should be transparent with the exception of rnotes if applicable.","title":"anaconda"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#backgrounds","text":"See Backgrounds Section","title":"Backgrounds"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#fedora","text":"SVG format of logo assets as fedora_logo (color) and fedora_logo_darkbackground (white), and a default as fedora_logo .","title":"fedora"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#firstboot","text":"First boot assets. This is generally the sidebar (like the anaconda installer) and a workstation icon. PNG format.","title":"firstboot"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#iconshicolor","text":"Rocky icons will appear here in different resolutions and must be in PNG or SVG format: 16x16/apps: PNG , system-logo-icon , fedora-logo-icon 22x22/apps: PNG , system-logo-icon , fedora-logo-icon 24x24/apps: PNG , system-logo-icon , fedora-logo-icon 32x32/apps: PNG , system-logo-icon , fedora-logo-icon 36x36/apps: PNG , system-logo-icon , fedora-logo-icon 48x48/apps: PNG , system-logo-icon , fedora-logo-icon 96x96/apps: PNG , system-logo-icon , fedora-logo-icon 256x256/apps: PNG , system-logo-icon , fedora-logo-icon scalable/apps: SVG , fedora-logo-icon , org.fedoraproject.AnacondaInstaller.svg , start-here.svg , xfce4_xicon1.svg symbolic/apps: SVG , org.fedoraproject.AnacondaInstaller-symbolic","title":"icons/hicolor"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#ipa","text":"IPA specific assets, usually text. They are generally PNG or JPG : header-logo.png - Text login-screen-background.jpg - No text login-screen-logo.png - Logo + Text product-name.png - Text","title":"ipa"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#pixmaps","text":"PNG format, these are usually assets used within GNOME, GDM, and other desktop environments.","title":"pixmaps"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#plymouthcharge","text":"Typically unchanged and is for the plymouth loading screen","title":"plymouth/charge"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#svg","text":"SVG format of logo assets as fedora_logo (color) and fedora_logo_darkbackground (white) color file dictates background color if applicable","title":"svg"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#testpage","text":"index.html for httpd/nginx/etc","title":"testpage"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#backgroundswallpapers","text":"","title":"Backgrounds/Wallpapers"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#structure","text":"Wallpapers appear in PNG format with a backing XML file to list out all available resolutions if applicable, as well as defaults. A defaults file looks at every other XML that is a default background provided by the backgrounds package and default options if applicable. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE wallpapers SYSTEM \"gnome-wp-list.dtd\"> <wallpapers> <wallpaper deleted=\"false\"> <name>Rocky Linux 9 Default Background - Placeholder Mesh</name> <filename>/usr/share/backgrounds/rocky-default-1-mesh.xml</filename> <options>zoom</options> <author>Louis Abel</author> <email>label@rockylinux.org</email> <license>CC-BY-SA 4.0</license> </wallpaper> <wallpaper deleted=\"false\"> <name>Rocky Linux 9 Default Background - Placeholder Target</name> <filename>/usr/share/backgrounds/rocky-default-1-target.xml</filename> <options>zoom</options> <author>Louis Abel</author> <email>label@rockylinux.org</email> <license>CC-BY-SA 4.0</license> </wallpaper> </wallpapers> The wallpaper itself will list every applicable variant of that background if applicable. <background> <starttime> <year>2021</year> <month>10</month> <day>29</day> <hour>19</hour> <minute>21</minute> <second>19</second> </starttime> <static> <duration>10000000000.0</duration> <file> <!-- Wide 16:9 --> <size width=\"1920\" height=\"1080\">/usr/share/backgrounds/rocky-default-1-mesh-16-9.png</size> <!-- Wide 16:10 --> <size width=\"1920\" height=\"1200\">/usr/share/backgrounds/rocky-default-1-mesh-16-10.png</size> <!-- Standard 4:3 --> <size width=\"2048\" height=\"1536\">/usr/share/backgrounds/rocky-default-1-mesh-4-3.png</size> <!-- Normalish 5:4 --> <size width=\"1280\" height=\"1024\">/usr/share/backgrounds/rocky-default-1-mesh-5-4.png</size> </file> </static> </background> Day/Night Wallpapers have a similar configuration. <background> <starttime> <year>2022</year> <month>01</month> <day>01</day> <hour>8</hour> <minute>00</minute> <second>00</second> </starttime> <!-- This animation will start at 8 AM. --> <!-- We start with day at 8 AM. It will remain up for 10 hours. --> <static> <duration>36000.0</duration> <file>/usr/share/backgrounds/rocky-default-1-mesh-day.png</file> </static> <!-- Day ended and starts to transition to night at 6 PM. The transition lasts for 2 hours, ending at 8 PM. --> <transition type=\"overlay\"> <duration>7200.0</duration> <from>/usr/share/backgrounds/rocky-default-1-mesh-day.png</from> <to>/usr/share/backgrounds/rocky-default-1-mesh-night.png</to> </transition> <!-- It's 8 PM, we're showing the night till 6 AM. --> <static> <duration>36000.0</duration> <file>/usr/share/backgrounds/rocky-default-1-mesh-night.png</file> </static> <!-- It's 6 AM, and we're starting to transition to day. Transition completes at 8 AM. --> <transition type=\"overlay\"> <duration>7200.0</duration> <from>/usr/share/backgrounds/rocky-default-1-mesh-night.png</from> <to>/usr/share/backgrounds/rocky-default-1-mesh-day.png</to> </transition> </background>","title":"Structure"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#guidelines","text":"This section goes over the general guidelines for the main backgrounds included in the distribution. Note : It is highly recommended and encouraged that a submission should be the highest resolution as noted below. See the note on minimum resolutions. General Theme : Each Rocky release has a codename, and thus is the general theme. Examples. Rocky 8: Green Obsidian - Submissions only to extras Rocky 9: Blue Onyx - This should be generally a blue theme/color scheme Required Resolution(s) for Normal Submissions : Resolution must not exceed nor fall below: 4092x3072 Allowed : Anything related to nature, mountains, rocks, and the like (generally fitting into the \"rocky\" idea) Anything related to the codename (eg. Blue Onyx) Anything minimalist/abstract is allowed References to the release number (like 9, and so on) are allowed Complementary colors should be allowed in the image within reason Contrasting colors should be allowed in the image within reason Photography + Manipulation should be allowed within reasonG Highly Encouraged : Day and Night versions of wallpapers Discouraged : Avoid using the Rocky logo, unless it fits with an abstract/minimalist idea for the background Plain backdrops with the rocky logo are not permitted","title":"Guidelines"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#minimum-resolutions","text":"For general submissions, we require the highest resolution to make things simpler, that way the user should be able to use a wallpaper without having to choose \"the right one\" for their monitor size. However, for the case case of extra backgrounds, this requirement is more relaxed. If a submitter wishes not to use the highest resolution but opts to make multiple resolutions instead, they should follow the below list: Minimum Required Resolutions : 16:9 (1920x1080) 16:10 (1920x1200) 5:4 (2048x1536) 4:3 (1280x1024) Additional (encouraged) allowed resolutions : 3440x1440 2560x1600 2560x1440 2560x1080 1800x1440 Portrait mode versions of the above are optional The placeholders in this commit shows an example of using the minimum resolutions.","title":"Minimum Resolutions"},{"location":"team/release_engineering/guidelines/rocky_logos_guidelines/#extras-package","text":"If a wallpaper does not make it to the main package (whether it doesn't meet guidelines or is simply just Rocky inspired), they should be able to be submitted for addition into the rocky-backgrounds-extras package.","title":"Extras Package"},{"location":"team/release_engineering/legacy/debrand_list/","text":"This is a list of packages that require changes to their material for acceptance in Rocky Linux. Usually this means there is some text or images in the package that reference upstream trademarks, and these must be swapped out before we can distribute them. The first items in this list are referenced from the excellent CentOS release notes here: https://wiki.centos.org/Manuals/ReleaseNotes/CentOS8.1905#Packages_modified_by_CentOS It is assumed that we will have to modify these same packages. It is also assumed that these changed packages might not necessarily be debranding. However, this list is incomplete. For example, the package Nginx does not appear on the list, and still has RHEL branding in the CentOS repos. We will need to investigate the rest of the package set and find any more packages like this that we must modify. One way to find said changes is to look for ?centos tags in the SPEC file, while also looking at the manual debranding if there was any for the c8 branches. There will be cases where a search and replace for ?centos to ?rocky will be sufficient. Current patches (for staging) are here . Packages that need debranding changes: \u00b6 Package Notes Work Status abrt See here DONE anaconda See here DONE apache-commons-net AppStream module with elevating branch names NO CHANGES REQUIRED ~~basesystem~~ (does not require debranding, it is a skeleton package) NO CHANGES REQUIRED cloud-init See here DONE - NEEDS REVIEW IN GITLAB (Rich Alloway) cockpit See here DONE ~~compat-glibc~~ NOT IN EL 8 dhcp See here DONE , NEEDS REVIEW IN GITLAB (Rich Alloway) firefox See here -- Still requires a distribution.ini ID MOSTLY DONE (Louis) fwupdate NOT STARTED glusterfs Changes don't appear to be required NO CHANGES REQUIRED gnome-settings-daemon No changes required for now. NO CHANGES REQUIRED grub2 (secureboot patches not done, just debrand) See here DONE , NEEDS REVIEW IN GITLAB AND SECUREBOOT (Rich Alloway) httpd See here DONE initial-setup See here DONE ipa This is a dual change: Logos and ipaplatform. Logos are taken care of in rocky-logos and the ipaplatform is taken care of here. See here DONE ~~kabi-yum-plugins~~ NOT IN EL 8 kernel See here for a potential example NOT STARTED ~~kde-settings~~ NOT IN EL 8 libreport See here DONE oscap-anaconda-addon See here DONE Requires install QA PackageKit See here DONE ~~pcs~~ NO CHANGES REQUIRED plymouth See here DONE ~~redhat-lsb~~ NO CHANGES REQUIRED redhat-rpm-config See here DONE scap-security-guide QA is likely required to test this package as it is NO CHANGES REQUIRED, QA REQUIRED shim NOT STARTED shim-signed NOT STARTED sos See here DONE subscription-manager See here DONE , NEEDS REVIEW ~~system-config-date~~ NOT IN EL8 ~~system-config-kdump~~ NOT IN EL8 thunderbird See here DONE ~~xulrunner~~ NOT IN EL 8 ~~yum~~ NO CHANGES REQUIRED (end of CentOS list) nginx Identified changes, in staging (ALMOST) DONE Packages that need to become other packages: \u00b6 We will want to create our own versions of these packages. The full \"lineage\" is shown, from RHEL -> CentOS -> Rocky (Where applicable) Package Notes redhat-indexhtml -> centos-indexhtml -> rocky-indexhtml Here redhat-logos -> centos-logos -> rocky-logos Here redhat-release-* -> centos-release -> rocky-release Here centos-backgrounds -> rocky-backgrounds Provided by logos centos-linux-repos -> rocky-repos Here centos-obsolete-packages Here Packages that Exist in RHEL, but not in CentOS \u00b6 For sake of complete information, here is a list of packages that are in RHEL 8, but do not exist in CentOS 8. We do not need to worry about these packages: insights-client Red_Hat_Enterprise_Linux-Release_Notes-8-* redhat-access-gui redhat-bookmarks subscription-manager-migration subscription-manager-migration-data","title":"Rocky Debrand Packages List"},{"location":"team/release_engineering/legacy/debrand_list/#packages-that-need-debranding-changes","text":"Package Notes Work Status abrt See here DONE anaconda See here DONE apache-commons-net AppStream module with elevating branch names NO CHANGES REQUIRED ~~basesystem~~ (does not require debranding, it is a skeleton package) NO CHANGES REQUIRED cloud-init See here DONE - NEEDS REVIEW IN GITLAB (Rich Alloway) cockpit See here DONE ~~compat-glibc~~ NOT IN EL 8 dhcp See here DONE , NEEDS REVIEW IN GITLAB (Rich Alloway) firefox See here -- Still requires a distribution.ini ID MOSTLY DONE (Louis) fwupdate NOT STARTED glusterfs Changes don't appear to be required NO CHANGES REQUIRED gnome-settings-daemon No changes required for now. NO CHANGES REQUIRED grub2 (secureboot patches not done, just debrand) See here DONE , NEEDS REVIEW IN GITLAB AND SECUREBOOT (Rich Alloway) httpd See here DONE initial-setup See here DONE ipa This is a dual change: Logos and ipaplatform. Logos are taken care of in rocky-logos and the ipaplatform is taken care of here. See here DONE ~~kabi-yum-plugins~~ NOT IN EL 8 kernel See here for a potential example NOT STARTED ~~kde-settings~~ NOT IN EL 8 libreport See here DONE oscap-anaconda-addon See here DONE Requires install QA PackageKit See here DONE ~~pcs~~ NO CHANGES REQUIRED plymouth See here DONE ~~redhat-lsb~~ NO CHANGES REQUIRED redhat-rpm-config See here DONE scap-security-guide QA is likely required to test this package as it is NO CHANGES REQUIRED, QA REQUIRED shim NOT STARTED shim-signed NOT STARTED sos See here DONE subscription-manager See here DONE , NEEDS REVIEW ~~system-config-date~~ NOT IN EL8 ~~system-config-kdump~~ NOT IN EL8 thunderbird See here DONE ~~xulrunner~~ NOT IN EL 8 ~~yum~~ NO CHANGES REQUIRED (end of CentOS list) nginx Identified changes, in staging (ALMOST) DONE","title":"Packages that need debranding changes:"},{"location":"team/release_engineering/legacy/debrand_list/#packages-that-need-to-become-other-packages","text":"We will want to create our own versions of these packages. The full \"lineage\" is shown, from RHEL -> CentOS -> Rocky (Where applicable) Package Notes redhat-indexhtml -> centos-indexhtml -> rocky-indexhtml Here redhat-logos -> centos-logos -> rocky-logos Here redhat-release-* -> centos-release -> rocky-release Here centos-backgrounds -> rocky-backgrounds Provided by logos centos-linux-repos -> rocky-repos Here centos-obsolete-packages Here","title":"Packages that need to become other packages:"},{"location":"team/release_engineering/legacy/debrand_list/#packages-that-exist-in-rhel-but-not-in-centos","text":"For sake of complete information, here is a list of packages that are in RHEL 8, but do not exist in CentOS 8. We do not need to worry about these packages: insights-client Red_Hat_Enterprise_Linux-Release_Notes-8-* redhat-access-gui redhat-bookmarks subscription-manager-migration subscription-manager-migration-data","title":"Packages that Exist in RHEL, but not in CentOS"},{"location":"team/release_engineering/legacy/koji_tagging/","text":"This document covers how the Rocky Linux Release Engineering Team handles the tagging for builds in Koji and how it affects the overall build process. Contact Information \u00b6 Owner Release Engineering Team Email Contact releng@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development What is Koji? \u00b6 Koji is the build system used for Rocky Linux, as well as CentOS, Fedora, and likely others. Red Hat is likely to use a variant of Koji called \"brew\" with similar functionality and usage. Koji uses mock, a common RPM building utility, to build RPMs in a chroot environment. Architecture of Koji \u00b6 Components \u00b6 Koji comprises of multiple components: koji-hub , which is the center of all Koji operations. It runs XML-RPC and relies on other components to call it for actions. This piece will also talk to the database and is one component that has write access to the filesystem. kojid , which is the daemon that runs on the builder nodes. It's responsibility is to talk to the hub for actions in which it can or has to perform, for example, building an RPM or install images. But that is not all that it can do. koji-web is a set of scripts that provides the web interface that anyone can see at our koji . koji is the command line utility that is commonly used - It is a wrapper of the various API commands that can be called. In our environment, it requires a login via kerberos. kojira is a component that ensures repodata is updated among the build tags. Tags \u00b6 Tags are the most important part of the koji ecosystem. With tags, you can have specific repository build roots for the entire distribution or just a simple subset of builds that should not polute the main build tags (for example, for SIGs where a package or two might be newer (or even older) than what's in BaseOS/AppStream. Using tags, you can setup what is called \"inheritance\". So for example. You can have a tag named dist-rocky8-build but it happens to inherit dist-rocky8-updates-build , which will likely have a newer set of packages than the former. Inheritance, in a way, can be considered setting \"dnf priorities\" if you've done that before. Another way to look at it is \"ordering\" and \"what comes first\". Targets call tags to send packages to build in, generally. Tag Strategy \u00b6 The question that we get is \"what's the difference between a build and an updates-build tag\" - It's all about the inheritance. For example, let's take a look at dist-rocky8-build dist-rocky8-build el8 dist-rocky8 build-modules . . . In this tag, you can see that this build tag inherits el8 packages first, and then the packages in dist-rocky8, and then build-modules. This is where \"base\" packages start out at, generally and a lot of them won't be updated or even change with the lifecycle of the version. dist-rocky8-updates-build el8 dist-rocky8-updates dist-rocky8 dist-rocky8-build build-modules This one is a bit different. Notice that it inherits el8 first, and then dist-rocky8-updates, which inherits dist-rocky8. And then it also pulls in dist-rocky8-build, the previous tag we were talking about. This tag is where updates for a minor release are sent to. dist-rocky8_4-updates-build el8_4 dist-rocky8-updates dist-rocky8 dist-rocky8-build el8 build-modules Here's a more interesting one. Notice something? It's pretty similar to the last one, but see how it's named el8_4 instead? This is where updates during 8.4 are basically sent to and that's how they get tagged as .el8_4 on the RPM's. The el8_4 tag contains a build macros package that instructs the %dist tag to be set that way. When 8.5 comes out, we'll basically have the same setup. At the end of the day, builds that happen in these updates-build tags get dropped in dist-rocky8-updates. What about modules? \u00b6 Modules are a bit tricky. We generally don't touch how MBS does its tags or what's going on there. When builds are being done with the modules, they do end up using the el8 packages in some manner or form. The modules are separated entirely from the main tags though, so they don't polute the main tags. You don't want a situation where say, you build the latest ruby, but something builds off the default version of ruby provided in el8 and now you're in trouble and get dnf filtering issues. How do we determine what is part of a compose? \u00b6 There are special tags that have a -compose suffix. These tags are used as a way to pull down packages for repository building during the pungi process.","title":"Koji Tagging Strategy"},{"location":"team/release_engineering/legacy/koji_tagging/#contact-information","text":"Owner Release Engineering Team Email Contact releng@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development","title":"Contact Information"},{"location":"team/release_engineering/legacy/koji_tagging/#what-is-koji","text":"Koji is the build system used for Rocky Linux, as well as CentOS, Fedora, and likely others. Red Hat is likely to use a variant of Koji called \"brew\" with similar functionality and usage. Koji uses mock, a common RPM building utility, to build RPMs in a chroot environment.","title":"What is Koji?"},{"location":"team/release_engineering/legacy/koji_tagging/#architecture-of-koji","text":"","title":"Architecture of Koji"},{"location":"team/release_engineering/legacy/koji_tagging/#components","text":"Koji comprises of multiple components: koji-hub , which is the center of all Koji operations. It runs XML-RPC and relies on other components to call it for actions. This piece will also talk to the database and is one component that has write access to the filesystem. kojid , which is the daemon that runs on the builder nodes. It's responsibility is to talk to the hub for actions in which it can or has to perform, for example, building an RPM or install images. But that is not all that it can do. koji-web is a set of scripts that provides the web interface that anyone can see at our koji . koji is the command line utility that is commonly used - It is a wrapper of the various API commands that can be called. In our environment, it requires a login via kerberos. kojira is a component that ensures repodata is updated among the build tags.","title":"Components"},{"location":"team/release_engineering/legacy/koji_tagging/#tags","text":"Tags are the most important part of the koji ecosystem. With tags, you can have specific repository build roots for the entire distribution or just a simple subset of builds that should not polute the main build tags (for example, for SIGs where a package or two might be newer (or even older) than what's in BaseOS/AppStream. Using tags, you can setup what is called \"inheritance\". So for example. You can have a tag named dist-rocky8-build but it happens to inherit dist-rocky8-updates-build , which will likely have a newer set of packages than the former. Inheritance, in a way, can be considered setting \"dnf priorities\" if you've done that before. Another way to look at it is \"ordering\" and \"what comes first\". Targets call tags to send packages to build in, generally.","title":"Tags"},{"location":"team/release_engineering/legacy/koji_tagging/#tag-strategy","text":"The question that we get is \"what's the difference between a build and an updates-build tag\" - It's all about the inheritance. For example, let's take a look at dist-rocky8-build dist-rocky8-build el8 dist-rocky8 build-modules . . . In this tag, you can see that this build tag inherits el8 packages first, and then the packages in dist-rocky8, and then build-modules. This is where \"base\" packages start out at, generally and a lot of them won't be updated or even change with the lifecycle of the version. dist-rocky8-updates-build el8 dist-rocky8-updates dist-rocky8 dist-rocky8-build build-modules This one is a bit different. Notice that it inherits el8 first, and then dist-rocky8-updates, which inherits dist-rocky8. And then it also pulls in dist-rocky8-build, the previous tag we were talking about. This tag is where updates for a minor release are sent to. dist-rocky8_4-updates-build el8_4 dist-rocky8-updates dist-rocky8 dist-rocky8-build el8 build-modules Here's a more interesting one. Notice something? It's pretty similar to the last one, but see how it's named el8_4 instead? This is where updates during 8.4 are basically sent to and that's how they get tagged as .el8_4 on the RPM's. The el8_4 tag contains a build macros package that instructs the %dist tag to be set that way. When 8.5 comes out, we'll basically have the same setup. At the end of the day, builds that happen in these updates-build tags get dropped in dist-rocky8-updates.","title":"Tag Strategy"},{"location":"team/release_engineering/legacy/koji_tagging/#what-about-modules","text":"Modules are a bit tricky. We generally don't touch how MBS does its tags or what's going on there. When builds are being done with the modules, they do end up using the el8 packages in some manner or form. The modules are separated entirely from the main tags though, so they don't polute the main tags. You don't want a situation where say, you build the latest ruby, but something builds off the default version of ruby provided in el8 and now you're in trouble and get dnf filtering issues.","title":"What about modules?"},{"location":"team/release_engineering/legacy/koji_tagging/#how-do-we-determine-what-is-part-of-a-compose","text":"There are special tags that have a -compose suffix. These tags are used as a way to pull down packages for repository building during the pungi process.","title":"How do we determine what is part of a compose?"},{"location":"team/release_engineering/rpm/","text":"This section is primarily for documentation and useful information as it pertains to package building and modularity. Use the menu on the left side to find the information you're looking for.","title":"RPM"},{"location":"team/release_engineering/rpm/local_module_builds/","text":"Within the Fedora and Red Hat ecosystem, modularity is unfortunately a piece that is a blessing and a curse. It might be more one way or the other. This page is primarily to talk about how to do local builds for modules, including the final formatting of the module yaml description that will have to be imported into the repo via modifyrepo_c . Note that the below is based on how lazybuilder performs module builds, which was made to be close to MBS+Koji and is not perfect. This is mostly used as a reference. Contact Information \u00b6 Owner Release Engineering Team Email Contact releng@rockylinux.org Email Contact infrastructure@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development Building Local Modules \u00b6 This section explains what it's like to build local modules, what you can do, and what you can expect. Module Source, \"transmodrification\", pulling sources \u00b6 The module source typically lives in a SOURCES directory in a module git repo with the name of modulemd.src.txt . This is a basic version that could be used to do a module build. Each package listed is a reference to the stream version for that particular module. document: modulemd version: 2 data: stream: 1.4 summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT dependencies: - buildrequires: nodejs: [10] platform: [el8] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: stream-1.4-rhel-8.4.0 arches: [aarch64, ppc64le, s390x, x86_64] Notice ref ? That's the reference point. When a \"transmodrification\" occurs, the process is supposed to look at each RPM repo in the components['rpms'] list. The branch name that this module data lives in will be the basis of how it determines what the new references will be. In this example, the branch name is r8-stream-1.4 so when we do the \"conversion\", it should become a git commit hash of the last commit in the branch r8-stream-1.4 for that particular rpm component. document: modulemd version: 2 data: stream: \"1.4\" summary: 389 Directory Server (base) description: 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT dependencies: - buildrequires: nodejs: - \"10\" platform: - el8 requires: platform: - el8 filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: - aarch64 - ppc64le - s390x - x86_64 See the reference now? It's now a commit hash that refers directly to 389-ds-base on branch r8-stream-1.4 , being the last commit/tag. See the glossary at the end of this page for more information, as it can be a commit hash, branch, or tag name. Configuring Macros and Contexts \u00b6 Traditionally within an MBS and Koji system, there are several macros that are created and are usually unique per module stream. There are certain components that work together to create a unique %dist tag based on several factors. To summarize, here's what generally happens: A module version is formed as M0m00YYYYMMDDhhmmss , which would be the major version, 0, minor version, 0, and then a timestamp. Select components are brought together and a sha1 hash is made, shortened to 8 characters for the context The runtime context is typically the \"dependencies\" section of the module source, calculated to sha1 The build context is the xmd['mbs']['buildrequires'] data that koji generates and is output into module.txt , calculated to sha1 The runtime and build contexts are combined BUILD:RUNTIME , a sha1 is calculated, and then shortened to 8 This context is typically the one that changes less often Select components are brought together and a sha1 hash is made, shortened to 8 characters for the dist tag The module name, stream, version, and context are all brought together as name.stream.version.context , calculated to sha1 The %dist tag is given a format of .module+elX.Y.Z+000+00000000 (note: fedora uses .module_fcXX+000+00000000 ) X is the major version, Y is the minor version, Z is typically 0. The second number is the iteration, aka the module number. If you've done 500 module builds, the next one would be 501, regardless of module. The last set is a context hash generated earlier in the step above Configuring the Macros \u00b6 In koji+MBS, a module macros package is made that defines the module macros. In lazybuilder, we skip that and define the macros directly. For example, in mock, we drop a file with all the macros we need. Here's an example of 389-ds. The file name is is macros.zz-modules to ensure these macros are picked up last and will have precendence and override macros of similar names, especially the %dist tag. rpmbuild# cat /etc/rpm/macros.zz-modules %dist .module_el8.4.0+636+837ee950 %modularitylabel 389-ds:1.4:8040020210810203142:866effaa %_module_build 1 %_module_name 389-ds %_module_stream 1.4 %_module_version 8040020210810203142 %_module_context 866effaa The the %dist tag honestly is the most important piece here. But all of these tags are required regardless. Build Opts Macros \u00b6 Some modules may have additional buildopts macros. Perl is a great example of this. When koji+MBS make their module macros package for the build, they combine the module macros and the build opts macros together into one file. It will be the same exact file name each time. rpmbuild# cat /etc/rpm/macros.zz-modules # Module macros %dist .module+el8.4.0+463+10533ad3 %modularitylabel perl:5.24:8040020210602173155:162f5753 %_module_build 1 %_module_name perl %_module_stream 5.24 %_module_version 8040020210602173155 %_module_context 162f5753 # Build Opts macros %_with_perl_enables_groff 1 %_without_perl_enables_syslog_test 1 %_with_perl_enables_systemtap 1 %_without_perl_enables_tcsh 1 %_without_perl_Compress_Bzip2_enables_optional_test 1 %_without_perl_CPAN_Meta_Requirements_enables_optional_test 1 %_without_perl_IPC_System_Simple_enables_optional_test 1 %_without_perl_LWP_MediaTypes_enables_mailcap 1 %_without_perl_Module_Build_enables_optional_test 1 %_without_perl_Perl_OSType_enables_optional_test 1 %_without_perl_Pod_Perldoc_enables_tk_test 1 %_without_perl_Software_License_enables_optional_test 1 %_without_perl_Sys_Syslog_enables_optional_test 1 %_without_perl_Test_Harness_enables_optional_test 1 %_without_perl_URI_enables_Business_ISBN 1 Built Module Example \u00b6 Let's break down an example of 389-ds - It's a simple module. Let's start with modulemd.txt , generated during a module build and before packages are built. Notice how it has xmd data. That is an integral part of making the context, though it's mostly information for koji and MBS and is generated on the fly and used throughout the build process for each arch. In the context of lazybuilder, it creates fake data to essentially fill the gap of not having MBS+Koji in the first place. The comments will point out what's used to make the contexts. --- document: modulemd version: 2 data: name: 389-ds stream: 1.4 version: 8040020210810203142 context: 866effaa summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT xmd: mbs: # This section xmd['mbs']['buildrequires'] is used to generate the build context # This is typically made before hand and is used with the dependencies section # to make the context listed above. buildrequires: nodejs: context: 30b713e6 filtered_rpms: [] koji_tag: module-nodejs-10-8030020210426100849-30b713e6 ref: 4589c1afe3ab66ffe6456b9b4af4cc981b1b7cdf stream: 10 version: 8030020210426100849 platform: context: 00000000 filtered_rpms: [] koji_tag: module-rocky-8.4.0-build ref: virtual stream: el8.4.0 stream_collision_modules: ursine_rpms: version: 2 commit: 53f7648dd6e54fb156b16302eb56bacf67a9024d mse: TRUE rpms: 389-ds-base: ref: efe94eb32d597765f49b7b1528ba9881e1f29327 scmurl: https://git.rockylinux.org/staging/modules/389-ds?#53f7648dd6e54fb156b16302eb56bacf67a9024d ursine_rpms: [] # Dependencies is part of the context combined with the xmd data. This data # is already in the source yaml pulled for the module build in the first place. # Note that in the source, it's usually `elX` rather than `elX.Y.Z` unless # explicitly configured that way. dependencies: - buildrequires: nodejs: [10] platform: [el8.4.0] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api repository: git+https://git.rockylinux.org/staging/rpms/389-ds-base cache: http://pkgs.fedoraproject.org/repo/pkgs/389-ds-base ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: [aarch64, ppc64le, s390x, x86_64] ... Below is a version meant to be imported into a repo. This is after the build's completion. You'll notice that some fields are either empty or missing from above or even from the git repo's source that we pulled from initially. You'll also notice that xmd is now an empty dictionary. This is on purpose. While it is optional in the repo module data, the build system typically gives it {} . --- document: modulemd version: 2 data: name: 389-ds stream: 1.4 version: 8040020210810203142 context: 866effaa arch: x86_64 summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT content: - GPLv3+ # This data is not an empty dictionary. It is required. xmd: {} dependencies: - buildrequires: nodejs: [10] platform: [el8.4.0] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: [aarch64, ppc64le, s390x, x86_64] artifacts: rpms: - 389-ds-base-0:1.4.3.16-19.module+el8.4.0+636+837ee950.src - 389-ds-base-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-debugsource-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-devel-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-legacy-tools-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-legacy-tools-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-libs-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-libs-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-snmp-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-snmp-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - python3-lib389-0:1.4.3.16-19.module+el8.4.0+636+837ee950.noarch ... The final \"repo\" of modules (per arch) is eventually made with a designation like: module-NAME-STREAM-VERSION-CONTEXT module-389-ds-1.4-8040020210810203142-866effaa This is what pungi and other utilities bring in and then combine into a single repo, generally, taking care of the module.yaml. Default Modules \u00b6 Most modules will have a set default that would be expected if a dnf install was called. For example, in EL8 if you said dnf install postgresql-server , the package that gets installed is version 10. If a module doesn't have a default set, a dnf install will traditionally not work. To ensure a module package will install without having to enable them and to use the default, you need default information. Here's the postgresql example. --- document: modulemd-defaults version: 1 data: module: postgresql stream: 10 profiles: 9.6: [server] 10: [server] 12: [server] 13: [server] ... Even if a module only has one stream, default module information is still needed to ensure that a package can be installed without enabling the module explicitly. Here's an example. --- document: modulemd-defaults version: 1 data: module: httpd stream: 2.4 profiles: 2.4: [common] ... This type of information is expected by pungi as a default modules repo that can be configured. These YAML's are not with the modules themselves. They are brought in when the repos are being created in the first place. In the context of lazybuilder, it checks for defaults if enabled and then the final repo that's made of the results will immediately have the information at the top. See the references below for the jinja template that lazybuilder uses to generate this information. As a final note, let's say an update comes in for postgresql and you want to ensure that the old version of postgresql 10 and the updated version of 10 can stay together. This is when the final module data is combined together and then it's added into the repo using modifyrepo_c . Note though, you do not have to have the modulemd-defaults provided again. You can have it once such as the first time you made the repo in the first place, and it will still work. Building the packages \u00b6 So we have an idea of how the module data itself is made and managed. All there is left to do is to do a chain build in mock. The kicker is you need to pay attention to the build order that is assigned to each package being built. If a build order isn't assigned, assume that it's group 0 and will be built first. This does not stop 0 being assigned, but just know that buildorder being omitted implies group 0. See below. components: rpms: first: rationale: core functions ref: 3.0 buildorder: 0 second: rationale: ui ref: latest buildorder: 0 third: rationale: front end ref: latest buildorder: 1 What this shows is that the packages in build group 0 can be built simultaneously in the context of Koji+MBS. For a local build, you'd just put them first in the list. Basically each of these groups have to be done, completed, and available right away for the next package or set of packages. For koji+mbs, they do this automatically since they have a tag/repo that gets updated on each completion and the builds are done in parallel. For mock, a chain build will always have an internal repo that it uses, so each completed package will have a final createrepo done on it before moving on to the next package in the list. It's not parallel like koji, but it's still consistent. Essentially a mock command would look like: mock -r module.cfg \\ --chain \\ --localrepo /var/lib/mock/modulename \\ first.src.rpm \\ second.src.rpm \\ third.src.rpm Making the final YAML and repo \u00b6 It's probably wise to have a template to make the module repo data off of. It's the same as having a script to \"transmodrify\" the module data properly to be used. Having a template will simplify a lot of things and will make it easier to convert the data from git and then the final build artifacts and data that makes the module data. The lazybuilder template is a good starting point, though it is a bit ugly, being made in jinja. It can be made better using python or even golang. Regardless, you should have it templated or scripted somehow. See the references in the next section. A note about virtual modules \u00b6 Virtual modules are weird. They do not have a module dist tag, and they are just built like... any other RPM. The difference here is that a virtual module while it will should have an api['rpms'] list, it will not have an artifacts section. A huge example of this is perl:5.26 in EL8. perl 5.26 is the default version. If you install perl-interpreter, you'll get perl-interpreter-5.26.3-419.el8_4.1.x86_64 . Notice how it doesn't have a module tag? That's because it wasn't built directly in MBS. There are not many virtual modules, but this is important to keep in mind that these do in fact exist. The module yaml itself will not have a list of packages to build, aka a \"components\" section. Here's the current EL8 perl 5.26 example. document: modulemd version: 2 data: summary: Practical Extraction and Report Language description: > Perl is a high-level programming language with roots in C, sed, awk and shell scripting. Perl is good at handling processes and files, and is especially good at handling text. Perl's hallmarks are practicality and efficiency. While it is used to do a lot of different things, Perl's most common applications are system administration utilities and web programming. license: module: [ MIT ] dependencies: - buildrequires: platform: [el8] requires: platform: [el8] references: community: https://docs.pagure.org/modularity/ profiles: common: description: Interpreter and all Perl modules bundled within upstream Perl. rpms: - perl minimal: description: Only the interpreter as a standalone executable. rpms: - perl-interpreter api: rpms: - perl - perl-Archive-Tar - perl-Attribute-Handlers - perl-autodie - perl-B-Debug - perl-bignum - perl-Carp - perl-Compress-Raw-Bzip2 - perl-Compress-Raw-Zlib - perl-Config-Perl-V - perl-constant - perl-CPAN - perl-CPAN-Meta - perl-CPAN-Meta-Requirements - perl-CPAN-Meta-YAML - perl-Data-Dumper - perl-DB_File - perl-devel - perl-Devel-Peek - perl-Devel-PPPort - perl-Devel-SelfStubber - perl-Digest - perl-Digest-MD5 - perl-Digest-SHA - perl-Encode - perl-Encode-devel - perl-encoding - perl-Env - perl-Errno - perl-experimental - perl-Exporter - perl-ExtUtils-CBuilder - perl-ExtUtils-Command - perl-ExtUtils-Embed - perl-ExtUtils-Install - perl-ExtUtils-MakeMaker - perl-ExtUtils-Manifest - perl-ExtUtils-Miniperl - perl-ExtUtils-MM-Utils - perl-ExtUtils-ParseXS - perl-File-Fetch - perl-File-Path - perl-File-Temp - perl-Filter - perl-Filter-Simple - perl-generators - perl-Getopt-Long - perl-HTTP-Tiny - perl-interpreter - perl-IO - perl-IO-Compress - perl-IO-Socket-IP - perl-IO-Zlib - perl-IPC-Cmd - perl-IPC-SysV - perl-JSON-PP - perl-libnet - perl-libnetcfg - perl-libs - perl-Locale-Codes - perl-Locale-Maketext - perl-Locale-Maketext-Simple - perl-macros - perl-Math-BigInt - perl-Math-BigInt-FastCalc - perl-Math-BigRat - perl-Math-Complex - perl-Memoize - perl-MIME-Base64 - perl-Module-CoreList - perl-Module-CoreList-tools - perl-Module-Load - perl-Module-Load-Conditional - perl-Module-Loaded - perl-Module-Metadata - perl-Net-Ping - perl-open - perl-Params-Check - perl-parent - perl-PathTools - perl-Perl-OSType - perl-perlfaq - perl-PerlIO-via-QuotedPrint - perl-Pod-Checker - perl-Pod-Escapes - perl-Pod-Html - perl-Pod-Parser - perl-Pod-Perldoc - perl-Pod-Simple - perl-Pod-Usage - perl-podlators - perl-Scalar-List-Utils - perl-SelfLoader - perl-Socket - perl-Storable - perl-Sys-Syslog - perl-Term-ANSIColor - perl-Term-Cap - perl-Test - perl-Test-Harness - perl-Test-Simple - perl-tests - perl-Text-Balanced - perl-Text-ParseWords - perl-Text-Tabs+Wrap - perl-Thread-Queue - perl-threads - perl-threads-shared - perl-Time-HiRes - perl-Time-Local - perl-Time-Piece - perl-Unicode-Collate - perl-Unicode-Normalize - perl-utils - perl-version # We do not build any packages because they are already available # in BaseOS or AppStream repository. We cannnot replace BaseOS # packages. #components: # rpms: Reference \u00b6 Below is a reference for what's in a module's data. Some keys are optional. There'll also be an example from lazybuilder, which uses jinja to template out the final data that is used in a repo. Module Template and Known Keys \u00b6 Below are the keys that are expected in the YAML for both defaults and the actual module build itself. Each item will have information on the type of value it is (eg, is it a string, list), if it's optional or mandatory, plus comments that may point out what's valid in source data rather than final repo data. Some of the data below may not be used in EL, but it's important to know what is possible and what could be expected. This information was copied from: Fedora Modularity # Document type identifier # `document: modulemd-defaults` describes the default stream and profiles for # a module. document: modulemd-defaults # Module metadata format version version: 1 data: # Module name that the defaults are for, required. module: foo # A 64-bit unsigned integer. Use YYYYMMDDHHMM to easily identify the last # modification time. Use UTC for consistency. # When merging, entries with a newer 'modified' value will override any # earlier values. (optional) modified: 201812071200 # Module stream that is the default for the module, optional. stream: \"x.y\" # Module profiles indexed by the stream name, optional # This is a dictionary of stream names to a list of default profiles to be # installed. profiles: 'x.y': [] bar: [baz, snafu] # System intents dictionary, optional. Indexed by the intent name. # Overrides stream/profiles for intent. intents: desktop: # Module stream that is the default for the module, required. # Overrides the above values for systems with this intent. stream: \"y.z\" # Module profiles indexed by the stream name, required # Overrides the above values for systems with this intent. # From the above, foo:x.y has \"other\" as the value and foo:bar has # no default profile. profiles: 'y.z': [blah] 'x.y': [other] server: # Module stream that is the default for the module, required. # Overrides the above values for systems with this intent. stream: \"x.y\" # Module profiles indexed by the stream name, required # Overrides the above values for systems with this intent. # From the above foo:x.y and foo:bar have no default profile. profiles: 'x.y': [] Note : The glossary explains this, but remember that AUTOMATIC means that it will typically not be in the module data itself, and will likely be in repo data itself. There are also spots where thare are things that are MANDATORY but also do not show up in a lot of modules, because the implicit/default option turns off that section. Note : There is a large chunk of these keys and values that state they are AUTOMATIC and they do show up in the module data as a result of the module data source and/or the build system doing work. An example of this is arch , among others. ############################################################################## # Glossary: # # # # build system: The process by which a module is built and packaged. In many # # cases, this will be the Module Build Service tool, but this term is used # # as a catch-all to describe any mechanism for producing a yum repository # # containing modular content from input module metadata files. # # # # # # == Attribute Types == # # # # MANDATORY: Attributes of this type must be filled in by the packager of # # this module. They must also be preserved and provided in the output # # metadata produced by the build system for inclusion into a repository. # # # # OPTIONAL: Attributes of this type may be provided by the packager of this # # module, when appropriate. If they are provided, they must also be # # preserved and provided in the output metadata produced by the build # # system for inclusion into a repository. # # # # AUTOMATIC: Attributes of this type must be present in the repository # # metadata, but they may be left unspecified by the packager. In this case, # # the build system is responsible for generating an appropriate value for # # the attribute and including it in the repository metadata. If the packager # # specifies this attribute explicitly, it must be preserved and provided in # # the output metadata for inclusion into a repository. # # # # The definitions above describe the expected behavior of the build system # # operating in its default configuration. It is permissible for the build # # system to override user-provided entries through non-default operating # # modes. If such changes are made, all items indicated as being required for # # the output repository must still be present. # ############################################################################## # Document type identifier # `document: modulemd` describes the contents of a module stream document: modulemd # Module metadata format version version: 2 data: # name: # The name of the module # Filled in by the build system, using the VCS repository name as the name # of the module. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. name: foo # stream: # Module update stream # Filled in by the buildsystem, using the VCS branch name as the name of # the stream. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. stream: \"latest\" # version: # Module version, 64-bit unsigned integer # If this value is unset (or set to zero), it will be filled in by the # buildsystem, using the VCS commit timestamp. Module version defines the # upgrade path for the particular update stream. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. version: 20160927144203 # context: # Module context flag # The context flag serves to distinguish module builds with the # same name, stream and version and plays an important role in # automatic module stream name expansion. # # If 'static_context' is unset or equal to FALSE: # Filled in by the buildsystem. A short hash of the module's name, # stream, version and its expanded runtime dependencies. The exact # mechanism for generating the hash is unspecified. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. # # If 'static_context' is set to True: # The context flag is a string of up to thirteen [a-zA-Z0-9_] characters # representing a build and runtime configuration for this stream. This # string is arbitrary but must be unique in this module stream. # # Type: MANDATORY static_context: false context: c0ffee43 # arch: # Module artifact architecture # Contains a string describing the module's artifacts' main hardware # architecture compatibility, distinguishing the module artifact, # e.g. a repository, from others with the same name, stream, version and # context. This is not a generic hardware family (i.e. basearch). # Examples: i386, i486, armv7hl, x86_64 # Filled in by the buildsystem during the compose stage. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. arch: x86_64 # summary: # A short summary describing the module # # Type: MANDATORY # # Mandatory for module metadata in a yum/dnf repository. summary: An example module # description: # A verbose description of the module # # Type: MANDATORY # # Mandatory for module metadata in a yum/dnf repository. description: >- A module for the demonstration of the metadata format. Also, the obligatory lorem ipsum dolor sit amet goes right here. # servicelevels: # Service levels # This is a dictionary of important dates (and possibly supplementary data # in the future) that describes the end point of certain functionality, # such as the date when the module will transition to \"security fixes only\" # or go completely end-of-life. # Filled in by the buildsystem. Service level names might have special # meaning to other systems. Defined externally. # # Type: AUTOMATIC servicelevels: rawhide: # EOL dates are the ISO 8601 format. eol: 2077-10-23 stable_api: eol: 2077-10-23 bug_fixes: eol: 2077-10-23 security_fixes: eol: 2077-10-23 # license: # Module and content licenses in the Fedora license identifier # format # # Type: MANDATORY license: # module: # Module license # This list covers licenses used for the module metadata and # possibly other files involved in the creation of this specific # module. # # Type: MANDATORY module: - MIT # content: # Content license # A list of licenses used by the packages in the module. # This should be populated by build tools, not the module author. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. content: - ASL 2.0 - GPL+ or Artistic # xmd: # Extensible metadata block # A dictionary of user-defined keys and values. # Defaults to an empty dictionary. # # Type: OPTIONAL xmd: some_key: some_data # dependencies: # Module dependencies, if any # A list of dictionaries describing build and runtime dependencies # of this module. Each list item describes a combination of dependencies # this module can be built or run against. # Dependency keys are module names, dependency values are lists of # required streams. The lists can be both inclusive (listing compatible # streams) or exclusive (accepting every stream except for those listed). # An empty list implies all active existing streams are supported. # Requiring multiple streams at build time will result in multiple # builds. Requiring multiple streams at runtime implies the module # is compatible with all of them. If the same module streams are listed # in both the build time and the runtime block, the build tools translate # the runtime block so that it matches the stream the module was built # against. Multiple builds result in multiple output modulemd files. # See below for an example. # The example below illustrates how to build the same module in four # different ways, with varying build time and runtime dependencies. # # Type: OPTIONAL dependencies: # Build on all available platforms except for f27, f28 and epel7 # After build, the runtime dependency will match the one used for # the build. - buildrequires: platform: [-f27, -f28, -epel7] requires: platform: [-f27, -f28, -epel7] # For platform:f27 perform two builds, one with buildtools:v1, another # with buildtools:v2 in the buildroot. Both will also utilize # compatible:v3. At runtime, buildtools isn't required and either # compatible:v3 or compatible:v4 can be installed. - buildrequires: platform: [f27] buildtools: [v1, v2] compatible: [v3] requires: platform: [f27] compatible: [v3, v4] # For platform:f28 builds, require either runtime:a or runtime:b at # runtime. Only one build is performed. - buildrequires: platform: [f28] requires: platform: [f28] runtime: [a, b] # For platform:epel7, build against against all available extras # streams and moreextras:foo and moreextras:bar. The number of builds # in this case will be 2 * <the number of extras streams available>. # At runtime, both extras and moreextras will match whatever stream was # used for build. - buildrequires: platform: [epel7] extras: [] moreextras: [foo, bar] requires: platform: [epel7] extras: [] moreextras: [foo, bar] # references: # References to external resources, typically upstream # # Type: OPTIONAL references: # community: # Upstream community website, if it exists # # Type: OPTIONAL community: http://www.example.com/ # documentation: # Upstream documentation, if it exists # # Type: OPTIONAL documentation: http://www.example.com/ # tracker: # Upstream bug tracker, if it exists # # Type: OPTIONAL tracker: http://www.example.com/ # profiles: # Profiles define the end user's use cases for the module. They consist of # package lists of components to be installed by default if the module is # enabled. The keys are the profile names and contain package lists by # component type. There are several profiles defined below. Suggested # behavior for package managers is to just enable repository for selected # module. Then users are able to install packages on their own. If they # select a specific profile, the package manager should install all # packages of that profile. # Defaults to no profile definitions. # # Type: OPTIONAL profiles: # An example profile that defines a set of packages which are meant to # be installed inside a container image artifact. # # Type: OPTIONAL container: rpms: - bar - bar-devel # An example profile that delivers a minimal set of packages to # provide this module's basic functionality. This is meant to be used # on target systems where size of the distribution is a real concern. # # Type: Optional minimal: # A verbose description of the module, optional description: Minimal profile installing only the bar package. rpms: - bar # buildroot: # This is a special reserved profile name. # # This provides a listing of packages that will be automatically # installed into the buildroot of all component builds that are started # after a component builds with its `buildroot: True` option set. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Specifically, it is used to flesh out the build group in koji. # # Type: OPTIONAL buildroot: rpms: - bar-devel # srpm-buildroot: # This is a special reserved profile name. # # This provides a listing of packages that will be automatically # installed into the buildroot of all component builds that are started # after a component builds with its `srpm-buildroot: True` option set. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Very similar to the buildroot profile above, this is used by the # build system to specify any additional packages which should be # installed during the buildSRPMfromSCM step in koji. # # Type: OPTIONAL srpm-buildroot: rpms: - bar-extras # api: # Module API # Defaults to no API. # # Type: OPTIONAL api: # rpms: # The module's public RPM-level API. # A list of binary RPM names that are considered to be the # main and stable feature of the module; binary RPMs not listed # here are considered \"unsupported\" or \"implementation details\". # In the example here we don't list the xyz package as it's only # included as a dependency of xxx. However, we list a subpackage # of bar, bar-extras. # Defaults to an empty list. # # Type: OPTIONAL rpms: - bar - bar-extras - bar-devel - baz - xxx # filter: # Module component filters # Defaults to no filters. # # Type: OPTIONAL filter: # rpms: # RPM names not to be included in the module. # By default, all built binary RPMs are included. In the example # we exclude a subpackage of bar, bar-nonfoo from our module. # Defaults to an empty list. # # Type: OPTIONAL rpms: - baz-nonfoo # demodularized: # Artifacts which became non-modular # Defaults to no demodularization. # Type: OPTIONAL demodularized: # rpms: # A list of binary RPM package names which where removed from # a module. This list explains to a package mananger that the packages # are not part of the module anymore and up-to-now same-named masked # non-modular packages should become available again. This enables # moving a package from a module to a set of non-modular packages. The # exact implementation of the demodularization (e.g. whether it # applies to all modules or only to this stream) is defined by the # package manager. # Defaults to an empty list. # # Type: OPTIONAL rpms: - bar-old # buildopts: # Component build options # Additional per component type module-wide build options. # # Type: OPTIONAL buildopts: # rpms: # RPM-specific build options # # Type: OPTIONAL rpms: # macros: # Additional macros that should be defined in the # RPM buildroot, appended to the default set. Care should be # taken so that the newlines are preserved. Literal style # block is recommended, with or without the trailing newline. # # Type: OPTIONAL macros: | %demomacro 1 %demomacro2 %{demomacro}23 # whitelist: # Explicit list of package build names this module will produce. # By default the build system only allows components listed under # data.components.rpms to be built as part of this module. # In case the expected RPM build names do not match the component # names, the list can be defined here. # This list overrides rather then just extends the default. # List of package build names without versions. # # Type: OPTIONAL whitelist: - fooscl-1-bar - fooscl-1-baz - xxx - xyz # arches: # Instructs the build system to only build the # module on this specific set of architectures. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Defaults to all available arches. # # Type: OPTIONAL arches: [i686, x86_64] # components: # Functional components of the module # # Type: OPTIONAL components: # rpms: # RPM content of the module # Keys are the VCS/SRPM names, values dictionaries holding # additional information. # # Type: OPTIONAL rpms: bar: # name: # The real name of the package, if it differs from the key in # this dictionary. Used when bootstrapping to build a # bootstrapping ref before building the package for real. # # Type: OPTIONAL name: bar-real # rationale: # Why is this component present. # A simple, free-form string. # # Type: MANDATORY rationale: We need this to demonstrate stuff. # repository: # Use this repository if it's different from the build # system configuration. # # Type: AUTOMATIC repository: https://pagure.io/bar.git # cache: # Use this lookaside cache if it's different from the # build system configuration. # # Type: AUTOMATIC cache: https://example.com/cache # ref: # Use this specific commit hash, branch name or tag for # the build. If ref is a branch name, the branch HEAD # will be used. If no ref is given, the master branch # is assumed. # # Type: AUTOMATIC ref: 26ca0c0 # buildafter: # Use the \"buildafter\" value to specify that this component # must be be ordered later than some other entries in this map. # The values of this array come from the keys of this map and # not the real component name to enable bootstrapping. # Use of both buildafter and buildorder in the same document is # prohibited, as they will conflict. # # Note: The use of buildafter is not currently supported by the # Fedora module build system. # # Type: AUTOMATIC # # buildafter: # - baz # buildonly: # Use the \"buildonly\" value to indicate that all artifacts # produced by this component are intended only for building # this component and should be automatically added to the # data.filter.rpms list after the build is complete. # Defaults to \"false\" if not specified. # # Type: AUTOMATIC buildonly: false # baz builds RPM macros for the other components to use baz: rationale: Demonstrate updating the buildroot contents. # buildroot: # If buildroot is set to True, the packages listed in this # module's 'buildroot' profile will be installed into the # buildroot of any component built in buildorder/buildafter # batches begun after this one, without requiring that those # packages are listed among BuildRequires. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Defaults to \"false\" if not specified. # # Type: OPTIONAL buildroot: true # srpm-buildroot: # If srpm-buildroot is set to True, the packages listed in this # module's 'srpm-buildroot' profile will be installed into the # buildroot of any component built in buildorder/buildafter # batches begun after this one, without requiring that those # packages are listed among BuildRequires. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Defaults to \"false\" if not specified. # # Type: OPTIONAL srpm-buildroot: true # See component xyz for a complete description of buildorder # # build this component before any others so that the macros it # creates are available to all of them. buildorder: -1 xxx: rationale: xxx demonstrates arches and multilib. # arches: # xxx is only available on the listed architectures. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Instructs the build system to only build the # component on this specific set of architectures. # If data.buildopts.arches is also specified, # this must be a subset of those architectures. # Defaults to all available arches. # # Type: AUTOMATIC arches: [i686, x86_64] # multilib: # A list of architectures with multilib # installs, i.e. both i686 and x86_64 # versions will be installed on x86_64. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Defaults to no multilib. # # Type: AUTOMATIC multilib: [x86_64] xyz: rationale: xyz is a bundled dependency of xxx. # buildorder: # Build order group # When building, components are sorted by build order tag # and built in batches grouped by their buildorder value. # Built batches are then re-tagged into the buildroot. # Multiple components can have the same buildorder index # to map them into build groups. # Defaults to zero. # Integer, from an interval [-(2^63), +2^63-1]. # In this example, bar, baz and xxx are built first in # no particular order, then tagged into the buildroot, # then, finally, xyz is built. # Use of both buildafter and buildorder in the same document is # prohibited, as they will conflict. # # Type: OPTIONAL buildorder: 10 # modules: # Module content of this module # Included modules are built in the shared buildroot, together with # other included content. Keys are module names, values additional # component information. Note this only includes components and their # properties from the referenced module and doesn't inherit any # additional module metadata such as the module's dependencies or # component buildopts. The included components are built in their # defined buildorder as sub-build groups. # # Type: OPTIONAL modules: includedmodule: # rationale: # Why is this module included? # # Type: MANDATORY rationale: Included in the stack, just because. # repository: # Link to VCS repository that contains the modulemd file # if it differs from the buildsystem default configuration. # # Type: AUTOMATIC repository: https://pagure.io/includedmodule.git # ref: # See the rpms ref. # # Type: AUTOMATIC ref: somecoolbranchname # buildorder: # See the rpms buildorder. # # Type: AUTOMATIC buildorder: 100 # artifacts: # Artifacts shipped with this module # This section lists binary artifacts shipped with the module, allowing # software management tools to handle module bundles. This section is # populated by the module build system. # # Type: AUTOMATIC artifacts: # rpms: # RPM artifacts shipped with this module # A set of NEVRAs associated with this module. An epoch number in the # NEVRA string is mandatory. # # Type: AUTOMATIC rpms: - bar-0:1.23-1.module_deadbeef.x86_64 - bar-devel-0:1.23-1.module_deadbeef.x86_64 - bar-extras-0:1.23-1.module_deadbeef.x86_64 - baz-0:42-42.module_deadbeef.x86_64 - xxx-0:1-1.module_deadbeef.x86_64 - xxx-0:1-1.module_deadbeef.i686 - xyz-0:1-1.module_deadbeef.x86_64 # rpm-map: # The rpm-map exists to link checksums from repomd to specific # artifacts produced by this module. Any item in this list must match # an entry in the data.artifacts.rpms section. # # Type: AUTOMATIC rpm-map: # The digest-type of this checksum. # # Type: MANDATORY sha256: # The checksum of the artifact being sought. # # Type: MANDATORY ee47083ed80146eb2c84e9a94d0836393912185dcda62b9d93ee0c2ea5dc795b: # name: # The RPM name. # # Type: Mandatory name: bar # epoch: # The RPM epoch. # A 32-bit unsigned integer. # # Type: OPTIONAL epoch: 0 # version: # The RPM version. # # Type: MANDATORY version: 1.23 # release: # The RPM release. # # Type: MANDATORY release: 1.module_deadbeef # arch: # The RPM architecture. # # Type: MANDATORY arch: x86_64 # nevra: # The complete RPM NEVRA. # # Type: MANDATORY nevra: bar-0:1.23-1.module_deadbeef.x86_64 Module Template and Keys using jinja \u00b6 {% if module_default_data is defined %} --- document: modulemd-defaults version: {{ module_default_data.version }} data: module: {{ module_default_data.data.module }} stream: {{ module_default_data.data.stream }} profiles: {% for k in module_default_data.data.profiles %} {{ k }}: [{{ module_default_data.data.profiles[k]|join(', ') }}] {% endfor %} ... {% endif %} --- document: {{ module_data.document }} version: {{ module_data.version }} data: name: {{ source_name | default(\"source\") }} stream: \"{{ module_data.data.stream }}\" version: {{ module_version | default(8040) }} context: {{ module_context | default('01010110') }} arch: {{ mock_arch | default(ansible_architecture) }} summary: {{ module_data.data.summary | wordwrap(width=79) | indent(width=4) }} description: {{ module_data.data.description | wordwrap(width=79) | indent(width=4) }} license: {% for (key, value) in module_data.data.license.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} xmd: {} {% if module_data.data.dependencies is defined %} dependencies: {% for l in module_data.data.dependencies %} {% for r in l.keys() %} {% if loop.index == 1 %} - {{ r }}: {% else %} {{ r }}: {% endif %} {% for (m, n) in l[r].items() %} {{ m }}: [{{ n | join(', ') }}] {% endfor %} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.filter is defined %} filter: {% for (key, value) in module_data.data.filter.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} {% if module_data.data.profiles is defined %} profiles: {% for (key, value) in module_data.data.profiles.items() %} {{ key }}: {% for (key, value) in value.items() %} {% if value is iterable and (value is not string and value is not mapping) %} {{ key | indent(width=6) }}: - {{ value | join('\\n - ') }} {% else %} {{ key | indent(width=6) }}: {{ value }} {% endif %} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.api is defined %} api: {% for (key, value) in module_data.data.api.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} {% if module_data.data.buildopts is defined %} buildopts: {% for (key, value) in module_data.data.buildopts.items() %} {{ key }}: {% for (key, value) in value.items() %} {{ key }}: | {{ value | indent(width=8) }} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.references is defined %} references: {% for (key, value) in module_data.data.references.items() %} {{ key }}: {{ value }} {% endfor %} {% endif %} {% if module_data.data.components is defined %} components: {% for (key, value) in module_data.data.components.items() %} {{ key }}: {% for (key, value) in value.items() %} {{ key }}: {% for (key, value) in value.items() %} {% if value is iterable and (value is not string and value is not mapping) %} {{ key | indent(width=8) }}: [{{ value | join(', ') }}] {% else %} {{ key | indent(width=8) }}: {{ value }} {% endif %} {% endfor %} {% endfor %} {% endfor %} {% endif %} {% if artifacts is defined %} artifacts: {% for (key, value) in artifacts.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} ...","title":"Local Module Builds"},{"location":"team/release_engineering/rpm/local_module_builds/#contact-information","text":"Owner Release Engineering Team Email Contact releng@rockylinux.org Email Contact infrastructure@rockylinux.org Mattermost Contacts @label @mustafa @neil @tgo Mattermost Channels ~Development","title":"Contact Information"},{"location":"team/release_engineering/rpm/local_module_builds/#building-local-modules","text":"This section explains what it's like to build local modules, what you can do, and what you can expect.","title":"Building Local Modules"},{"location":"team/release_engineering/rpm/local_module_builds/#module-source-transmodrification-pulling-sources","text":"The module source typically lives in a SOURCES directory in a module git repo with the name of modulemd.src.txt . This is a basic version that could be used to do a module build. Each package listed is a reference to the stream version for that particular module. document: modulemd version: 2 data: stream: 1.4 summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT dependencies: - buildrequires: nodejs: [10] platform: [el8] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: stream-1.4-rhel-8.4.0 arches: [aarch64, ppc64le, s390x, x86_64] Notice ref ? That's the reference point. When a \"transmodrification\" occurs, the process is supposed to look at each RPM repo in the components['rpms'] list. The branch name that this module data lives in will be the basis of how it determines what the new references will be. In this example, the branch name is r8-stream-1.4 so when we do the \"conversion\", it should become a git commit hash of the last commit in the branch r8-stream-1.4 for that particular rpm component. document: modulemd version: 2 data: stream: \"1.4\" summary: 389 Directory Server (base) description: 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT dependencies: - buildrequires: nodejs: - \"10\" platform: - el8 requires: platform: - el8 filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: - aarch64 - ppc64le - s390x - x86_64 See the reference now? It's now a commit hash that refers directly to 389-ds-base on branch r8-stream-1.4 , being the last commit/tag. See the glossary at the end of this page for more information, as it can be a commit hash, branch, or tag name.","title":"Module Source, \"transmodrification\", pulling sources"},{"location":"team/release_engineering/rpm/local_module_builds/#configuring-macros-and-contexts","text":"Traditionally within an MBS and Koji system, there are several macros that are created and are usually unique per module stream. There are certain components that work together to create a unique %dist tag based on several factors. To summarize, here's what generally happens: A module version is formed as M0m00YYYYMMDDhhmmss , which would be the major version, 0, minor version, 0, and then a timestamp. Select components are brought together and a sha1 hash is made, shortened to 8 characters for the context The runtime context is typically the \"dependencies\" section of the module source, calculated to sha1 The build context is the xmd['mbs']['buildrequires'] data that koji generates and is output into module.txt , calculated to sha1 The runtime and build contexts are combined BUILD:RUNTIME , a sha1 is calculated, and then shortened to 8 This context is typically the one that changes less often Select components are brought together and a sha1 hash is made, shortened to 8 characters for the dist tag The module name, stream, version, and context are all brought together as name.stream.version.context , calculated to sha1 The %dist tag is given a format of .module+elX.Y.Z+000+00000000 (note: fedora uses .module_fcXX+000+00000000 ) X is the major version, Y is the minor version, Z is typically 0. The second number is the iteration, aka the module number. If you've done 500 module builds, the next one would be 501, regardless of module. The last set is a context hash generated earlier in the step above","title":"Configuring Macros and Contexts"},{"location":"team/release_engineering/rpm/local_module_builds/#configuring-the-macros","text":"In koji+MBS, a module macros package is made that defines the module macros. In lazybuilder, we skip that and define the macros directly. For example, in mock, we drop a file with all the macros we need. Here's an example of 389-ds. The file name is is macros.zz-modules to ensure these macros are picked up last and will have precendence and override macros of similar names, especially the %dist tag. rpmbuild# cat /etc/rpm/macros.zz-modules %dist .module_el8.4.0+636+837ee950 %modularitylabel 389-ds:1.4:8040020210810203142:866effaa %_module_build 1 %_module_name 389-ds %_module_stream 1.4 %_module_version 8040020210810203142 %_module_context 866effaa The the %dist tag honestly is the most important piece here. But all of these tags are required regardless.","title":"Configuring the Macros"},{"location":"team/release_engineering/rpm/local_module_builds/#build-opts-macros","text":"Some modules may have additional buildopts macros. Perl is a great example of this. When koji+MBS make their module macros package for the build, they combine the module macros and the build opts macros together into one file. It will be the same exact file name each time. rpmbuild# cat /etc/rpm/macros.zz-modules # Module macros %dist .module+el8.4.0+463+10533ad3 %modularitylabel perl:5.24:8040020210602173155:162f5753 %_module_build 1 %_module_name perl %_module_stream 5.24 %_module_version 8040020210602173155 %_module_context 162f5753 # Build Opts macros %_with_perl_enables_groff 1 %_without_perl_enables_syslog_test 1 %_with_perl_enables_systemtap 1 %_without_perl_enables_tcsh 1 %_without_perl_Compress_Bzip2_enables_optional_test 1 %_without_perl_CPAN_Meta_Requirements_enables_optional_test 1 %_without_perl_IPC_System_Simple_enables_optional_test 1 %_without_perl_LWP_MediaTypes_enables_mailcap 1 %_without_perl_Module_Build_enables_optional_test 1 %_without_perl_Perl_OSType_enables_optional_test 1 %_without_perl_Pod_Perldoc_enables_tk_test 1 %_without_perl_Software_License_enables_optional_test 1 %_without_perl_Sys_Syslog_enables_optional_test 1 %_without_perl_Test_Harness_enables_optional_test 1 %_without_perl_URI_enables_Business_ISBN 1","title":"Build Opts Macros"},{"location":"team/release_engineering/rpm/local_module_builds/#built-module-example","text":"Let's break down an example of 389-ds - It's a simple module. Let's start with modulemd.txt , generated during a module build and before packages are built. Notice how it has xmd data. That is an integral part of making the context, though it's mostly information for koji and MBS and is generated on the fly and used throughout the build process for each arch. In the context of lazybuilder, it creates fake data to essentially fill the gap of not having MBS+Koji in the first place. The comments will point out what's used to make the contexts. --- document: modulemd version: 2 data: name: 389-ds stream: 1.4 version: 8040020210810203142 context: 866effaa summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT xmd: mbs: # This section xmd['mbs']['buildrequires'] is used to generate the build context # This is typically made before hand and is used with the dependencies section # to make the context listed above. buildrequires: nodejs: context: 30b713e6 filtered_rpms: [] koji_tag: module-nodejs-10-8030020210426100849-30b713e6 ref: 4589c1afe3ab66ffe6456b9b4af4cc981b1b7cdf stream: 10 version: 8030020210426100849 platform: context: 00000000 filtered_rpms: [] koji_tag: module-rocky-8.4.0-build ref: virtual stream: el8.4.0 stream_collision_modules: ursine_rpms: version: 2 commit: 53f7648dd6e54fb156b16302eb56bacf67a9024d mse: TRUE rpms: 389-ds-base: ref: efe94eb32d597765f49b7b1528ba9881e1f29327 scmurl: https://git.rockylinux.org/staging/modules/389-ds?#53f7648dd6e54fb156b16302eb56bacf67a9024d ursine_rpms: [] # Dependencies is part of the context combined with the xmd data. This data # is already in the source yaml pulled for the module build in the first place. # Note that in the source, it's usually `elX` rather than `elX.Y.Z` unless # explicitly configured that way. dependencies: - buildrequires: nodejs: [10] platform: [el8.4.0] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api repository: git+https://git.rockylinux.org/staging/rpms/389-ds-base cache: http://pkgs.fedoraproject.org/repo/pkgs/389-ds-base ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: [aarch64, ppc64le, s390x, x86_64] ... Below is a version meant to be imported into a repo. This is after the build's completion. You'll notice that some fields are either empty or missing from above or even from the git repo's source that we pulled from initially. You'll also notice that xmd is now an empty dictionary. This is on purpose. While it is optional in the repo module data, the build system typically gives it {} . --- document: modulemd version: 2 data: name: 389-ds stream: 1.4 version: 8040020210810203142 context: 866effaa arch: x86_64 summary: 389 Directory Server (base) description: >- 389 Directory Server is an LDAPv3 compliant server. The base package includes the LDAP server and command line utilities for server administration. license: module: - MIT content: - GPLv3+ # This data is not an empty dictionary. It is required. xmd: {} dependencies: - buildrequires: nodejs: [10] platform: [el8.4.0] requires: platform: [el8] filter: rpms: - cockpit-389-ds components: rpms: 389-ds-base: rationale: Package in api ref: efe94eb32d597765f49b7b1528ba9881e1f29327 arches: [aarch64, ppc64le, s390x, x86_64] artifacts: rpms: - 389-ds-base-0:1.4.3.16-19.module+el8.4.0+636+837ee950.src - 389-ds-base-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-debugsource-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-devel-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-legacy-tools-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-legacy-tools-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-libs-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-libs-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-snmp-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - 389-ds-base-snmp-debuginfo-0:1.4.3.16-19.module+el8.4.0+636+837ee950.x86_64 - python3-lib389-0:1.4.3.16-19.module+el8.4.0+636+837ee950.noarch ... The final \"repo\" of modules (per arch) is eventually made with a designation like: module-NAME-STREAM-VERSION-CONTEXT module-389-ds-1.4-8040020210810203142-866effaa This is what pungi and other utilities bring in and then combine into a single repo, generally, taking care of the module.yaml.","title":"Built Module Example"},{"location":"team/release_engineering/rpm/local_module_builds/#default-modules","text":"Most modules will have a set default that would be expected if a dnf install was called. For example, in EL8 if you said dnf install postgresql-server , the package that gets installed is version 10. If a module doesn't have a default set, a dnf install will traditionally not work. To ensure a module package will install without having to enable them and to use the default, you need default information. Here's the postgresql example. --- document: modulemd-defaults version: 1 data: module: postgresql stream: 10 profiles: 9.6: [server] 10: [server] 12: [server] 13: [server] ... Even if a module only has one stream, default module information is still needed to ensure that a package can be installed without enabling the module explicitly. Here's an example. --- document: modulemd-defaults version: 1 data: module: httpd stream: 2.4 profiles: 2.4: [common] ... This type of information is expected by pungi as a default modules repo that can be configured. These YAML's are not with the modules themselves. They are brought in when the repos are being created in the first place. In the context of lazybuilder, it checks for defaults if enabled and then the final repo that's made of the results will immediately have the information at the top. See the references below for the jinja template that lazybuilder uses to generate this information. As a final note, let's say an update comes in for postgresql and you want to ensure that the old version of postgresql 10 and the updated version of 10 can stay together. This is when the final module data is combined together and then it's added into the repo using modifyrepo_c . Note though, you do not have to have the modulemd-defaults provided again. You can have it once such as the first time you made the repo in the first place, and it will still work.","title":"Default Modules"},{"location":"team/release_engineering/rpm/local_module_builds/#building-the-packages","text":"So we have an idea of how the module data itself is made and managed. All there is left to do is to do a chain build in mock. The kicker is you need to pay attention to the build order that is assigned to each package being built. If a build order isn't assigned, assume that it's group 0 and will be built first. This does not stop 0 being assigned, but just know that buildorder being omitted implies group 0. See below. components: rpms: first: rationale: core functions ref: 3.0 buildorder: 0 second: rationale: ui ref: latest buildorder: 0 third: rationale: front end ref: latest buildorder: 1 What this shows is that the packages in build group 0 can be built simultaneously in the context of Koji+MBS. For a local build, you'd just put them first in the list. Basically each of these groups have to be done, completed, and available right away for the next package or set of packages. For koji+mbs, they do this automatically since they have a tag/repo that gets updated on each completion and the builds are done in parallel. For mock, a chain build will always have an internal repo that it uses, so each completed package will have a final createrepo done on it before moving on to the next package in the list. It's not parallel like koji, but it's still consistent. Essentially a mock command would look like: mock -r module.cfg \\ --chain \\ --localrepo /var/lib/mock/modulename \\ first.src.rpm \\ second.src.rpm \\ third.src.rpm","title":"Building the packages"},{"location":"team/release_engineering/rpm/local_module_builds/#making-the-final-yaml-and-repo","text":"It's probably wise to have a template to make the module repo data off of. It's the same as having a script to \"transmodrify\" the module data properly to be used. Having a template will simplify a lot of things and will make it easier to convert the data from git and then the final build artifacts and data that makes the module data. The lazybuilder template is a good starting point, though it is a bit ugly, being made in jinja. It can be made better using python or even golang. Regardless, you should have it templated or scripted somehow. See the references in the next section.","title":"Making the final YAML and repo"},{"location":"team/release_engineering/rpm/local_module_builds/#a-note-about-virtual-modules","text":"Virtual modules are weird. They do not have a module dist tag, and they are just built like... any other RPM. The difference here is that a virtual module while it will should have an api['rpms'] list, it will not have an artifacts section. A huge example of this is perl:5.26 in EL8. perl 5.26 is the default version. If you install perl-interpreter, you'll get perl-interpreter-5.26.3-419.el8_4.1.x86_64 . Notice how it doesn't have a module tag? That's because it wasn't built directly in MBS. There are not many virtual modules, but this is important to keep in mind that these do in fact exist. The module yaml itself will not have a list of packages to build, aka a \"components\" section. Here's the current EL8 perl 5.26 example. document: modulemd version: 2 data: summary: Practical Extraction and Report Language description: > Perl is a high-level programming language with roots in C, sed, awk and shell scripting. Perl is good at handling processes and files, and is especially good at handling text. Perl's hallmarks are practicality and efficiency. While it is used to do a lot of different things, Perl's most common applications are system administration utilities and web programming. license: module: [ MIT ] dependencies: - buildrequires: platform: [el8] requires: platform: [el8] references: community: https://docs.pagure.org/modularity/ profiles: common: description: Interpreter and all Perl modules bundled within upstream Perl. rpms: - perl minimal: description: Only the interpreter as a standalone executable. rpms: - perl-interpreter api: rpms: - perl - perl-Archive-Tar - perl-Attribute-Handlers - perl-autodie - perl-B-Debug - perl-bignum - perl-Carp - perl-Compress-Raw-Bzip2 - perl-Compress-Raw-Zlib - perl-Config-Perl-V - perl-constant - perl-CPAN - perl-CPAN-Meta - perl-CPAN-Meta-Requirements - perl-CPAN-Meta-YAML - perl-Data-Dumper - perl-DB_File - perl-devel - perl-Devel-Peek - perl-Devel-PPPort - perl-Devel-SelfStubber - perl-Digest - perl-Digest-MD5 - perl-Digest-SHA - perl-Encode - perl-Encode-devel - perl-encoding - perl-Env - perl-Errno - perl-experimental - perl-Exporter - perl-ExtUtils-CBuilder - perl-ExtUtils-Command - perl-ExtUtils-Embed - perl-ExtUtils-Install - perl-ExtUtils-MakeMaker - perl-ExtUtils-Manifest - perl-ExtUtils-Miniperl - perl-ExtUtils-MM-Utils - perl-ExtUtils-ParseXS - perl-File-Fetch - perl-File-Path - perl-File-Temp - perl-Filter - perl-Filter-Simple - perl-generators - perl-Getopt-Long - perl-HTTP-Tiny - perl-interpreter - perl-IO - perl-IO-Compress - perl-IO-Socket-IP - perl-IO-Zlib - perl-IPC-Cmd - perl-IPC-SysV - perl-JSON-PP - perl-libnet - perl-libnetcfg - perl-libs - perl-Locale-Codes - perl-Locale-Maketext - perl-Locale-Maketext-Simple - perl-macros - perl-Math-BigInt - perl-Math-BigInt-FastCalc - perl-Math-BigRat - perl-Math-Complex - perl-Memoize - perl-MIME-Base64 - perl-Module-CoreList - perl-Module-CoreList-tools - perl-Module-Load - perl-Module-Load-Conditional - perl-Module-Loaded - perl-Module-Metadata - perl-Net-Ping - perl-open - perl-Params-Check - perl-parent - perl-PathTools - perl-Perl-OSType - perl-perlfaq - perl-PerlIO-via-QuotedPrint - perl-Pod-Checker - perl-Pod-Escapes - perl-Pod-Html - perl-Pod-Parser - perl-Pod-Perldoc - perl-Pod-Simple - perl-Pod-Usage - perl-podlators - perl-Scalar-List-Utils - perl-SelfLoader - perl-Socket - perl-Storable - perl-Sys-Syslog - perl-Term-ANSIColor - perl-Term-Cap - perl-Test - perl-Test-Harness - perl-Test-Simple - perl-tests - perl-Text-Balanced - perl-Text-ParseWords - perl-Text-Tabs+Wrap - perl-Thread-Queue - perl-threads - perl-threads-shared - perl-Time-HiRes - perl-Time-Local - perl-Time-Piece - perl-Unicode-Collate - perl-Unicode-Normalize - perl-utils - perl-version # We do not build any packages because they are already available # in BaseOS or AppStream repository. We cannnot replace BaseOS # packages. #components: # rpms:","title":"A note about virtual modules"},{"location":"team/release_engineering/rpm/local_module_builds/#reference","text":"Below is a reference for what's in a module's data. Some keys are optional. There'll also be an example from lazybuilder, which uses jinja to template out the final data that is used in a repo.","title":"Reference"},{"location":"team/release_engineering/rpm/local_module_builds/#module-template-and-known-keys","text":"Below are the keys that are expected in the YAML for both defaults and the actual module build itself. Each item will have information on the type of value it is (eg, is it a string, list), if it's optional or mandatory, plus comments that may point out what's valid in source data rather than final repo data. Some of the data below may not be used in EL, but it's important to know what is possible and what could be expected. This information was copied from: Fedora Modularity # Document type identifier # `document: modulemd-defaults` describes the default stream and profiles for # a module. document: modulemd-defaults # Module metadata format version version: 1 data: # Module name that the defaults are for, required. module: foo # A 64-bit unsigned integer. Use YYYYMMDDHHMM to easily identify the last # modification time. Use UTC for consistency. # When merging, entries with a newer 'modified' value will override any # earlier values. (optional) modified: 201812071200 # Module stream that is the default for the module, optional. stream: \"x.y\" # Module profiles indexed by the stream name, optional # This is a dictionary of stream names to a list of default profiles to be # installed. profiles: 'x.y': [] bar: [baz, snafu] # System intents dictionary, optional. Indexed by the intent name. # Overrides stream/profiles for intent. intents: desktop: # Module stream that is the default for the module, required. # Overrides the above values for systems with this intent. stream: \"y.z\" # Module profiles indexed by the stream name, required # Overrides the above values for systems with this intent. # From the above, foo:x.y has \"other\" as the value and foo:bar has # no default profile. profiles: 'y.z': [blah] 'x.y': [other] server: # Module stream that is the default for the module, required. # Overrides the above values for systems with this intent. stream: \"x.y\" # Module profiles indexed by the stream name, required # Overrides the above values for systems with this intent. # From the above foo:x.y and foo:bar have no default profile. profiles: 'x.y': [] Note : The glossary explains this, but remember that AUTOMATIC means that it will typically not be in the module data itself, and will likely be in repo data itself. There are also spots where thare are things that are MANDATORY but also do not show up in a lot of modules, because the implicit/default option turns off that section. Note : There is a large chunk of these keys and values that state they are AUTOMATIC and they do show up in the module data as a result of the module data source and/or the build system doing work. An example of this is arch , among others. ############################################################################## # Glossary: # # # # build system: The process by which a module is built and packaged. In many # # cases, this will be the Module Build Service tool, but this term is used # # as a catch-all to describe any mechanism for producing a yum repository # # containing modular content from input module metadata files. # # # # # # == Attribute Types == # # # # MANDATORY: Attributes of this type must be filled in by the packager of # # this module. They must also be preserved and provided in the output # # metadata produced by the build system for inclusion into a repository. # # # # OPTIONAL: Attributes of this type may be provided by the packager of this # # module, when appropriate. If they are provided, they must also be # # preserved and provided in the output metadata produced by the build # # system for inclusion into a repository. # # # # AUTOMATIC: Attributes of this type must be present in the repository # # metadata, but they may be left unspecified by the packager. In this case, # # the build system is responsible for generating an appropriate value for # # the attribute and including it in the repository metadata. If the packager # # specifies this attribute explicitly, it must be preserved and provided in # # the output metadata for inclusion into a repository. # # # # The definitions above describe the expected behavior of the build system # # operating in its default configuration. It is permissible for the build # # system to override user-provided entries through non-default operating # # modes. If such changes are made, all items indicated as being required for # # the output repository must still be present. # ############################################################################## # Document type identifier # `document: modulemd` describes the contents of a module stream document: modulemd # Module metadata format version version: 2 data: # name: # The name of the module # Filled in by the build system, using the VCS repository name as the name # of the module. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. name: foo # stream: # Module update stream # Filled in by the buildsystem, using the VCS branch name as the name of # the stream. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. stream: \"latest\" # version: # Module version, 64-bit unsigned integer # If this value is unset (or set to zero), it will be filled in by the # buildsystem, using the VCS commit timestamp. Module version defines the # upgrade path for the particular update stream. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. version: 20160927144203 # context: # Module context flag # The context flag serves to distinguish module builds with the # same name, stream and version and plays an important role in # automatic module stream name expansion. # # If 'static_context' is unset or equal to FALSE: # Filled in by the buildsystem. A short hash of the module's name, # stream, version and its expanded runtime dependencies. The exact # mechanism for generating the hash is unspecified. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. # # If 'static_context' is set to True: # The context flag is a string of up to thirteen [a-zA-Z0-9_] characters # representing a build and runtime configuration for this stream. This # string is arbitrary but must be unique in this module stream. # # Type: MANDATORY static_context: false context: c0ffee43 # arch: # Module artifact architecture # Contains a string describing the module's artifacts' main hardware # architecture compatibility, distinguishing the module artifact, # e.g. a repository, from others with the same name, stream, version and # context. This is not a generic hardware family (i.e. basearch). # Examples: i386, i486, armv7hl, x86_64 # Filled in by the buildsystem during the compose stage. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. arch: x86_64 # summary: # A short summary describing the module # # Type: MANDATORY # # Mandatory for module metadata in a yum/dnf repository. summary: An example module # description: # A verbose description of the module # # Type: MANDATORY # # Mandatory for module metadata in a yum/dnf repository. description: >- A module for the demonstration of the metadata format. Also, the obligatory lorem ipsum dolor sit amet goes right here. # servicelevels: # Service levels # This is a dictionary of important dates (and possibly supplementary data # in the future) that describes the end point of certain functionality, # such as the date when the module will transition to \"security fixes only\" # or go completely end-of-life. # Filled in by the buildsystem. Service level names might have special # meaning to other systems. Defined externally. # # Type: AUTOMATIC servicelevels: rawhide: # EOL dates are the ISO 8601 format. eol: 2077-10-23 stable_api: eol: 2077-10-23 bug_fixes: eol: 2077-10-23 security_fixes: eol: 2077-10-23 # license: # Module and content licenses in the Fedora license identifier # format # # Type: MANDATORY license: # module: # Module license # This list covers licenses used for the module metadata and # possibly other files involved in the creation of this specific # module. # # Type: MANDATORY module: - MIT # content: # Content license # A list of licenses used by the packages in the module. # This should be populated by build tools, not the module author. # # Type: AUTOMATIC # # Mandatory for module metadata in a yum/dnf repository. content: - ASL 2.0 - GPL+ or Artistic # xmd: # Extensible metadata block # A dictionary of user-defined keys and values. # Defaults to an empty dictionary. # # Type: OPTIONAL xmd: some_key: some_data # dependencies: # Module dependencies, if any # A list of dictionaries describing build and runtime dependencies # of this module. Each list item describes a combination of dependencies # this module can be built or run against. # Dependency keys are module names, dependency values are lists of # required streams. The lists can be both inclusive (listing compatible # streams) or exclusive (accepting every stream except for those listed). # An empty list implies all active existing streams are supported. # Requiring multiple streams at build time will result in multiple # builds. Requiring multiple streams at runtime implies the module # is compatible with all of them. If the same module streams are listed # in both the build time and the runtime block, the build tools translate # the runtime block so that it matches the stream the module was built # against. Multiple builds result in multiple output modulemd files. # See below for an example. # The example below illustrates how to build the same module in four # different ways, with varying build time and runtime dependencies. # # Type: OPTIONAL dependencies: # Build on all available platforms except for f27, f28 and epel7 # After build, the runtime dependency will match the one used for # the build. - buildrequires: platform: [-f27, -f28, -epel7] requires: platform: [-f27, -f28, -epel7] # For platform:f27 perform two builds, one with buildtools:v1, another # with buildtools:v2 in the buildroot. Both will also utilize # compatible:v3. At runtime, buildtools isn't required and either # compatible:v3 or compatible:v4 can be installed. - buildrequires: platform: [f27] buildtools: [v1, v2] compatible: [v3] requires: platform: [f27] compatible: [v3, v4] # For platform:f28 builds, require either runtime:a or runtime:b at # runtime. Only one build is performed. - buildrequires: platform: [f28] requires: platform: [f28] runtime: [a, b] # For platform:epel7, build against against all available extras # streams and moreextras:foo and moreextras:bar. The number of builds # in this case will be 2 * <the number of extras streams available>. # At runtime, both extras and moreextras will match whatever stream was # used for build. - buildrequires: platform: [epel7] extras: [] moreextras: [foo, bar] requires: platform: [epel7] extras: [] moreextras: [foo, bar] # references: # References to external resources, typically upstream # # Type: OPTIONAL references: # community: # Upstream community website, if it exists # # Type: OPTIONAL community: http://www.example.com/ # documentation: # Upstream documentation, if it exists # # Type: OPTIONAL documentation: http://www.example.com/ # tracker: # Upstream bug tracker, if it exists # # Type: OPTIONAL tracker: http://www.example.com/ # profiles: # Profiles define the end user's use cases for the module. They consist of # package lists of components to be installed by default if the module is # enabled. The keys are the profile names and contain package lists by # component type. There are several profiles defined below. Suggested # behavior for package managers is to just enable repository for selected # module. Then users are able to install packages on their own. If they # select a specific profile, the package manager should install all # packages of that profile. # Defaults to no profile definitions. # # Type: OPTIONAL profiles: # An example profile that defines a set of packages which are meant to # be installed inside a container image artifact. # # Type: OPTIONAL container: rpms: - bar - bar-devel # An example profile that delivers a minimal set of packages to # provide this module's basic functionality. This is meant to be used # on target systems where size of the distribution is a real concern. # # Type: Optional minimal: # A verbose description of the module, optional description: Minimal profile installing only the bar package. rpms: - bar # buildroot: # This is a special reserved profile name. # # This provides a listing of packages that will be automatically # installed into the buildroot of all component builds that are started # after a component builds with its `buildroot: True` option set. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Specifically, it is used to flesh out the build group in koji. # # Type: OPTIONAL buildroot: rpms: - bar-devel # srpm-buildroot: # This is a special reserved profile name. # # This provides a listing of packages that will be automatically # installed into the buildroot of all component builds that are started # after a component builds with its `srpm-buildroot: True` option set. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Very similar to the buildroot profile above, this is used by the # build system to specify any additional packages which should be # installed during the buildSRPMfromSCM step in koji. # # Type: OPTIONAL srpm-buildroot: rpms: - bar-extras # api: # Module API # Defaults to no API. # # Type: OPTIONAL api: # rpms: # The module's public RPM-level API. # A list of binary RPM names that are considered to be the # main and stable feature of the module; binary RPMs not listed # here are considered \"unsupported\" or \"implementation details\". # In the example here we don't list the xyz package as it's only # included as a dependency of xxx. However, we list a subpackage # of bar, bar-extras. # Defaults to an empty list. # # Type: OPTIONAL rpms: - bar - bar-extras - bar-devel - baz - xxx # filter: # Module component filters # Defaults to no filters. # # Type: OPTIONAL filter: # rpms: # RPM names not to be included in the module. # By default, all built binary RPMs are included. In the example # we exclude a subpackage of bar, bar-nonfoo from our module. # Defaults to an empty list. # # Type: OPTIONAL rpms: - baz-nonfoo # demodularized: # Artifacts which became non-modular # Defaults to no demodularization. # Type: OPTIONAL demodularized: # rpms: # A list of binary RPM package names which where removed from # a module. This list explains to a package mananger that the packages # are not part of the module anymore and up-to-now same-named masked # non-modular packages should become available again. This enables # moving a package from a module to a set of non-modular packages. The # exact implementation of the demodularization (e.g. whether it # applies to all modules or only to this stream) is defined by the # package manager. # Defaults to an empty list. # # Type: OPTIONAL rpms: - bar-old # buildopts: # Component build options # Additional per component type module-wide build options. # # Type: OPTIONAL buildopts: # rpms: # RPM-specific build options # # Type: OPTIONAL rpms: # macros: # Additional macros that should be defined in the # RPM buildroot, appended to the default set. Care should be # taken so that the newlines are preserved. Literal style # block is recommended, with or without the trailing newline. # # Type: OPTIONAL macros: | %demomacro 1 %demomacro2 %{demomacro}23 # whitelist: # Explicit list of package build names this module will produce. # By default the build system only allows components listed under # data.components.rpms to be built as part of this module. # In case the expected RPM build names do not match the component # names, the list can be defined here. # This list overrides rather then just extends the default. # List of package build names without versions. # # Type: OPTIONAL whitelist: - fooscl-1-bar - fooscl-1-baz - xxx - xyz # arches: # Instructs the build system to only build the # module on this specific set of architectures. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Defaults to all available arches. # # Type: OPTIONAL arches: [i686, x86_64] # components: # Functional components of the module # # Type: OPTIONAL components: # rpms: # RPM content of the module # Keys are the VCS/SRPM names, values dictionaries holding # additional information. # # Type: OPTIONAL rpms: bar: # name: # The real name of the package, if it differs from the key in # this dictionary. Used when bootstrapping to build a # bootstrapping ref before building the package for real. # # Type: OPTIONAL name: bar-real # rationale: # Why is this component present. # A simple, free-form string. # # Type: MANDATORY rationale: We need this to demonstrate stuff. # repository: # Use this repository if it's different from the build # system configuration. # # Type: AUTOMATIC repository: https://pagure.io/bar.git # cache: # Use this lookaside cache if it's different from the # build system configuration. # # Type: AUTOMATIC cache: https://example.com/cache # ref: # Use this specific commit hash, branch name or tag for # the build. If ref is a branch name, the branch HEAD # will be used. If no ref is given, the master branch # is assumed. # # Type: AUTOMATIC ref: 26ca0c0 # buildafter: # Use the \"buildafter\" value to specify that this component # must be be ordered later than some other entries in this map. # The values of this array come from the keys of this map and # not the real component name to enable bootstrapping. # Use of both buildafter and buildorder in the same document is # prohibited, as they will conflict. # # Note: The use of buildafter is not currently supported by the # Fedora module build system. # # Type: AUTOMATIC # # buildafter: # - baz # buildonly: # Use the \"buildonly\" value to indicate that all artifacts # produced by this component are intended only for building # this component and should be automatically added to the # data.filter.rpms list after the build is complete. # Defaults to \"false\" if not specified. # # Type: AUTOMATIC buildonly: false # baz builds RPM macros for the other components to use baz: rationale: Demonstrate updating the buildroot contents. # buildroot: # If buildroot is set to True, the packages listed in this # module's 'buildroot' profile will be installed into the # buildroot of any component built in buildorder/buildafter # batches begun after this one, without requiring that those # packages are listed among BuildRequires. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Defaults to \"false\" if not specified. # # Type: OPTIONAL buildroot: true # srpm-buildroot: # If srpm-buildroot is set to True, the packages listed in this # module's 'srpm-buildroot' profile will be installed into the # buildroot of any component built in buildorder/buildafter # batches begun after this one, without requiring that those # packages are listed among BuildRequires. # # The primary purpose of this is for building RPMs that change # the build environment, such as those that provide new RPM # macro definitions that can be used by subsequent builds. # # Defaults to \"false\" if not specified. # # Type: OPTIONAL srpm-buildroot: true # See component xyz for a complete description of buildorder # # build this component before any others so that the macros it # creates are available to all of them. buildorder: -1 xxx: rationale: xxx demonstrates arches and multilib. # arches: # xxx is only available on the listed architectures. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Instructs the build system to only build the # component on this specific set of architectures. # If data.buildopts.arches is also specified, # this must be a subset of those architectures. # Defaults to all available arches. # # Type: AUTOMATIC arches: [i686, x86_64] # multilib: # A list of architectures with multilib # installs, i.e. both i686 and x86_64 # versions will be installed on x86_64. # Includes specific hardware architectures, not families. # See the data.arch field for details. # Defaults to no multilib. # # Type: AUTOMATIC multilib: [x86_64] xyz: rationale: xyz is a bundled dependency of xxx. # buildorder: # Build order group # When building, components are sorted by build order tag # and built in batches grouped by their buildorder value. # Built batches are then re-tagged into the buildroot. # Multiple components can have the same buildorder index # to map them into build groups. # Defaults to zero. # Integer, from an interval [-(2^63), +2^63-1]. # In this example, bar, baz and xxx are built first in # no particular order, then tagged into the buildroot, # then, finally, xyz is built. # Use of both buildafter and buildorder in the same document is # prohibited, as they will conflict. # # Type: OPTIONAL buildorder: 10 # modules: # Module content of this module # Included modules are built in the shared buildroot, together with # other included content. Keys are module names, values additional # component information. Note this only includes components and their # properties from the referenced module and doesn't inherit any # additional module metadata such as the module's dependencies or # component buildopts. The included components are built in their # defined buildorder as sub-build groups. # # Type: OPTIONAL modules: includedmodule: # rationale: # Why is this module included? # # Type: MANDATORY rationale: Included in the stack, just because. # repository: # Link to VCS repository that contains the modulemd file # if it differs from the buildsystem default configuration. # # Type: AUTOMATIC repository: https://pagure.io/includedmodule.git # ref: # See the rpms ref. # # Type: AUTOMATIC ref: somecoolbranchname # buildorder: # See the rpms buildorder. # # Type: AUTOMATIC buildorder: 100 # artifacts: # Artifacts shipped with this module # This section lists binary artifacts shipped with the module, allowing # software management tools to handle module bundles. This section is # populated by the module build system. # # Type: AUTOMATIC artifacts: # rpms: # RPM artifacts shipped with this module # A set of NEVRAs associated with this module. An epoch number in the # NEVRA string is mandatory. # # Type: AUTOMATIC rpms: - bar-0:1.23-1.module_deadbeef.x86_64 - bar-devel-0:1.23-1.module_deadbeef.x86_64 - bar-extras-0:1.23-1.module_deadbeef.x86_64 - baz-0:42-42.module_deadbeef.x86_64 - xxx-0:1-1.module_deadbeef.x86_64 - xxx-0:1-1.module_deadbeef.i686 - xyz-0:1-1.module_deadbeef.x86_64 # rpm-map: # The rpm-map exists to link checksums from repomd to specific # artifacts produced by this module. Any item in this list must match # an entry in the data.artifacts.rpms section. # # Type: AUTOMATIC rpm-map: # The digest-type of this checksum. # # Type: MANDATORY sha256: # The checksum of the artifact being sought. # # Type: MANDATORY ee47083ed80146eb2c84e9a94d0836393912185dcda62b9d93ee0c2ea5dc795b: # name: # The RPM name. # # Type: Mandatory name: bar # epoch: # The RPM epoch. # A 32-bit unsigned integer. # # Type: OPTIONAL epoch: 0 # version: # The RPM version. # # Type: MANDATORY version: 1.23 # release: # The RPM release. # # Type: MANDATORY release: 1.module_deadbeef # arch: # The RPM architecture. # # Type: MANDATORY arch: x86_64 # nevra: # The complete RPM NEVRA. # # Type: MANDATORY nevra: bar-0:1.23-1.module_deadbeef.x86_64","title":"Module Template and Known Keys"},{"location":"team/release_engineering/rpm/local_module_builds/#module-template-and-keys-using-jinja","text":"{% if module_default_data is defined %} --- document: modulemd-defaults version: {{ module_default_data.version }} data: module: {{ module_default_data.data.module }} stream: {{ module_default_data.data.stream }} profiles: {% for k in module_default_data.data.profiles %} {{ k }}: [{{ module_default_data.data.profiles[k]|join(', ') }}] {% endfor %} ... {% endif %} --- document: {{ module_data.document }} version: {{ module_data.version }} data: name: {{ source_name | default(\"source\") }} stream: \"{{ module_data.data.stream }}\" version: {{ module_version | default(8040) }} context: {{ module_context | default('01010110') }} arch: {{ mock_arch | default(ansible_architecture) }} summary: {{ module_data.data.summary | wordwrap(width=79) | indent(width=4) }} description: {{ module_data.data.description | wordwrap(width=79) | indent(width=4) }} license: {% for (key, value) in module_data.data.license.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} xmd: {} {% if module_data.data.dependencies is defined %} dependencies: {% for l in module_data.data.dependencies %} {% for r in l.keys() %} {% if loop.index == 1 %} - {{ r }}: {% else %} {{ r }}: {% endif %} {% for (m, n) in l[r].items() %} {{ m }}: [{{ n | join(', ') }}] {% endfor %} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.filter is defined %} filter: {% for (key, value) in module_data.data.filter.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} {% if module_data.data.profiles is defined %} profiles: {% for (key, value) in module_data.data.profiles.items() %} {{ key }}: {% for (key, value) in value.items() %} {% if value is iterable and (value is not string and value is not mapping) %} {{ key | indent(width=6) }}: - {{ value | join('\\n - ') }} {% else %} {{ key | indent(width=6) }}: {{ value }} {% endif %} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.api is defined %} api: {% for (key, value) in module_data.data.api.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} {% if module_data.data.buildopts is defined %} buildopts: {% for (key, value) in module_data.data.buildopts.items() %} {{ key }}: {% for (key, value) in value.items() %} {{ key }}: | {{ value | indent(width=8) }} {% endfor %} {% endfor %} {% endif %} {% if module_data.data.references is defined %} references: {% for (key, value) in module_data.data.references.items() %} {{ key }}: {{ value }} {% endfor %} {% endif %} {% if module_data.data.components is defined %} components: {% for (key, value) in module_data.data.components.items() %} {{ key }}: {% for (key, value) in value.items() %} {{ key }}: {% for (key, value) in value.items() %} {% if value is iterable and (value is not string and value is not mapping) %} {{ key | indent(width=8) }}: [{{ value | join(', ') }}] {% else %} {{ key | indent(width=8) }}: {{ value }} {% endif %} {% endfor %} {% endfor %} {% endfor %} {% endif %} {% if artifacts is defined %} artifacts: {% for (key, value) in artifacts.items() %} {{ key }}: - {{ value | join('\\n - ') }} {% endfor %} {% endif %} ...","title":"Module Template and Keys using jinja"},{"location":"team/testing/","text":"This section is primarily for documentation for the Testing Team. The testing team handles testing and QA for Rocky Linux. Members \u00b6 Role Name Email Mattermost Name IRC Name Testing Lead Trevor Cooper tcooper@rockylinux.org @tcooper Testing Lead Chris Stackpole stack@rockylinux.org @stack Testing Team Al @raktajino Testing Team Lukas Magauer @lumarel Additional Information Contact Disclaimer License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at info@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Team Members"},{"location":"team/testing/#members","text":"Role Name Email Mattermost Name IRC Name Testing Lead Trevor Cooper tcooper@rockylinux.org @tcooper Testing Lead Chris Stackpole stack@rockylinux.org @stack Testing Team Al @raktajino Testing Team Lukas Magauer @lumarel","title":"Members"},{"location":"team/testing/release_criteria/","text":"Final Release Objectives \u00b6 The objective of a release (major or minor) is to provide a solid Enterprise Linux release that is suitable to: Meet the needs of end users Meet the needs of enterprises big or small Final Release Requirements \u00b6 In order for Rocky Linux to be released to the general public, a compose must be able to meet all the following criteria as provided in this document. This is allows the decision process to be straightforward and as clear as possible. This document only contains \u201chard requirement\u201d items. Optional/nice to have items are not to be included in this list. There may cases where a requirement cannot be met but only in particular configurations. In these types of cases, the Release Engineering Team should use their judgement to determine whether or not the issue should be considered to block the release. They should consider the number of users likely to be affected by said issue, the severity of the case, if the issue can be avoided with ease (by both informed and uninformed users), and if the problem exists upstream in the current Red Hat Enterprise Linux that the release is based on. Release-blocking Server ...means bugs as it pertains to server functionality can be considered to block a release. This applies to any packages that provide a service such as httpd, nginx, etc. All architectures apply. Release-blocking Desktop ...means bugs as it pertains to desktop functionality (GNOME) can be considered to block a release. This applies to both x86_64 and aarch64. Additional desktops (as provided by EPEL or a SIG) are not considered blockers. Release-blocking Image ...means bugs as it pertains to the images built that can block a release. This applies to the DVD, minimal, and boot images on all architectures. Initialization Requirements \u00b6 Release-blocking images must boot \u00b6 Release-blocking installer images must boot when written to optical media or USB flash drive of appropriate sizes (if applicable) via officially supported methods. It is not the testing team\u2019s responsibility to test optical media, but they can and report back. If a bug is found, it is considered a blocker. Optical Media Requirements Release-blocking images must boot when written to optical media of an appropriate size. Current size requirements are: boot.iso = 789M, minimal.iso = 2.0G and dvd.iso = 10G. Officially supported USB flash drive writing methods The following methods of writing USB flash drives are officially support: dd The following methods of writing USB flash drives are not supported: rufus References Test cases: QA:Testcase Boot Methods Boot ISO QA:Testcase Boot Methods DVD QA:Testcase Media USB dd Basic Graphics Mode behaviors \u00b6 The generic video driver option (\u201cbasic graphics mode\u201d) on all release-blocking installers must function as intended. This means launching the installer or desktop and attempting to use a generic driver. There must be no bugs that prevent the installer from being reached in this configuration on all systems and classes of hardware supported by the enterprise linux kernel. References Test cases: QA:Testcase Basic Graphics Mode No Broken Packages \u00b6 Critical errors, such as undeclared conflicts, unresolved dependencies, or modules relying on packages from another stream will be considered an automatic blocker. There are potential exceptions to this (eg, freeradius cannot be installed on an older perl stream, this is a known issue upstream). References Test cases: QA:Testcase Media Repoclosure QA:Testcase Media File Conflicts Repositories Must Match Upstream \u00b6 Repositories and the packages within them should match upstream as closely as possible. Notable exceptions would be kmods, kpatch, or what is deemed as \u201cspyware\u201d like insights. Packages that are available from upstream should not have hard requirements on RHSM and packages that have it default built in should be patched out. References Test cases: QA:Testcase Repo Compare QA:Testcase Packages No Insights QA:Testcase Packages No RHSM Debranding \u00b6 Assets and functionality that are Red Hat specific should not be included. If they are not patched out, it will be considered an automatic blocker. References Test cases: QA:Testcase Debranding Installer Requirements \u00b6 Media Consistency Verification \u00b6 This means that the installer\u2019s mechanism for verifying the install medium is intact and must complete successfully, with the assumption that the medium was correctly written. It should return a failure message if this not the case. References Test cases: QA:Testcase TBD Packages and Installer Sources \u00b6 The installer must be able to use all supported local/remote packages and installer sources. References Test cases: QA:Testcase TBD NAS (Network Attached Storage)\" \u00b6 The installer must be able to detect and install to supported NAS devices (if possible and supported by the kernel). References Test cases: QA:Testcase TBD Installation Interfaces \u00b6 The installer must be able to complete an installation using all supported spokes. References Test cases: QA:Testcase TBD Minimal Installation \u00b6 A minimal installation (via network) must be able to install the minimal package set. References Test cases: QA:Testcase TBD Kickstart Installation \u00b6 A kickstart installation should succeed, whether from optical/USB media or via the network. References Test cases: QA:Testcase TBD Disk Layouts \u00b6 The installer must be able to create and install to any workable partition layout using any file system or format combination offered or supported by the installer. File systems that are not supported by the EL kernel is not tested here (this means btrfs, zfs, both of wish are not supported). References Test cases: QA:Testcase TBD Firmware RAID \u00b6 The installer must be able to detect and install to firmware RAID devices. Note that system-specific bugs do not count as blockers. It is likely that some hardware support might be broken or not available at all. DUDs (driver update disks) are not considered for this criteria. References Test cases: QA:Testcase TBD Bootloader Disk Selection \u00b6 The installer must allow the user to choose which disk the bootloader will be installed to or, if the user so chooses, not to install a bootloader. References Test cases: QA:Testcase TBD Storage Volume Resize \u00b6 Any installer mechanism for resizing storage volumes must correctly attempt the requested operation. This means that if the installer offers a way to resize storage volumes, then it must use the correct resizing tool with the correct parameters. However, it does not require the installer to disallow resizing of unformatted or volumes with an unknown filesystem type. References Test cases: QA:Testcase TBD Update Image \u00b6 The installer must be able to use an installer update image retrieved from removable media or a remote package source. This includes DUDs (driver update disks). References Test cases: QA:Testcase TBD Installer Help \u00b6 Any element in the installer which contains a \u201chelp\u201d text must display the appropriate help documentation when selected. References Test cases: QA:Testcase TBD Installer Translations \u00b6 The installer must correctly display all complete translations that are available for use. References Test cases: QA:Testcase TBD Cloud Image Requirements \u00b6 Images Published to Cloud Providers \u00b6 Release-blocking cloud disk images must be published to appropriate cloud providers (such as Amazon) and they must successfully boot. This also applies to KVM based instances, such as x86 and aarch64 systems. References Test cases: QA:Testcase TBD Post-Installation Requirements \u00b6 System Services \u00b6 All system services present after installation must start properly, with the exception of services that require hardware which is not present. Examples of such services would be: - sshd - firewalld - auditd - chronyd References Test cases: QA:Testcase TBD Keyboard Layout \u00b6 If a particular keyboard layout has been configured for the system, that layout must be used: - When unlocking storage volumes (encrypted by LUKS) - When logging in at a TTY console - When logging in via GDM - After logging into a GNOME desktop system, if the user does not have their own layout configuration set. References Test cases: QA:Testcase TBD SELinux Errors (Server) \u00b6 There must be no SELinux denial logs in /var/log/audit/audit.log References Test cases: QA:Testcase TBD SELinux and Crash Notifications (Desktop Only) \u00b6 There must be no SELinux denial notifications or crash notifications on boot, during installation, or during first login. References Test cases: QA:Testcase TBD Default Application Functionality (Desktop Only) \u00b6 Applications that can be launched within GNOME or on the command line must start successfully and withstand basic functionality tests. This includes: - Web browser - File manager - Package manager - Image/Document Viewers - Text editors (gedit, vim) - Archive manager - Terminal Emulator (gnome terminal) - Problem Reporter - Help Viewer - System Settings References Test cases: QA:Testcase TBD Default Panel Functionality (Desktop Only) \u00b6 All elements of GNOME should function properly in regular use. References Test cases: QA:Testcase TBD Dual Monitor Setup (Desktop Only) \u00b6 Computers using two monitors, the graphical output is correctly shown on both monitors. References Test cases: QA:Testcase TBD Artwork and Assets (Server and Desktop) \u00b6 Proposed final artwork (such as wallpapers and other assets) must be included. A wallpaper from this package should show up as a default for GDM and GNOME. References Test cases: QA:Testcase TBD Packages and Module Installation \u00b6 Packages (non-module) should be able to be installed without conflicts or dependent on repositories outside of Rocky Linux. - Default modules (as listed in dnf module list) should be installed without requiring them to be enabled. - Module streams should be able to be switched and those packages should be able to be installed without errors or unresolved dependencies. References Test cases: QA:Testcase TBD Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Release Requirements documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Release Criteria"},{"location":"team/testing/release_criteria/#final-release-objectives","text":"The objective of a release (major or minor) is to provide a solid Enterprise Linux release that is suitable to: Meet the needs of end users Meet the needs of enterprises big or small","title":"Final Release Objectives"},{"location":"team/testing/release_criteria/#final-release-requirements","text":"In order for Rocky Linux to be released to the general public, a compose must be able to meet all the following criteria as provided in this document. This is allows the decision process to be straightforward and as clear as possible. This document only contains \u201chard requirement\u201d items. Optional/nice to have items are not to be included in this list. There may cases where a requirement cannot be met but only in particular configurations. In these types of cases, the Release Engineering Team should use their judgement to determine whether or not the issue should be considered to block the release. They should consider the number of users likely to be affected by said issue, the severity of the case, if the issue can be avoided with ease (by both informed and uninformed users), and if the problem exists upstream in the current Red Hat Enterprise Linux that the release is based on. Release-blocking Server ...means bugs as it pertains to server functionality can be considered to block a release. This applies to any packages that provide a service such as httpd, nginx, etc. All architectures apply. Release-blocking Desktop ...means bugs as it pertains to desktop functionality (GNOME) can be considered to block a release. This applies to both x86_64 and aarch64. Additional desktops (as provided by EPEL or a SIG) are not considered blockers. Release-blocking Image ...means bugs as it pertains to the images built that can block a release. This applies to the DVD, minimal, and boot images on all architectures.","title":"Final Release Requirements"},{"location":"team/testing/release_criteria/#initialization-requirements","text":"","title":"Initialization Requirements"},{"location":"team/testing/release_criteria/#release-blocking-images-must-boot","text":"Release-blocking installer images must boot when written to optical media or USB flash drive of appropriate sizes (if applicable) via officially supported methods. It is not the testing team\u2019s responsibility to test optical media, but they can and report back. If a bug is found, it is considered a blocker. Optical Media Requirements Release-blocking images must boot when written to optical media of an appropriate size. Current size requirements are: boot.iso = 789M, minimal.iso = 2.0G and dvd.iso = 10G. Officially supported USB flash drive writing methods The following methods of writing USB flash drives are officially support: dd The following methods of writing USB flash drives are not supported: rufus References Test cases: QA:Testcase Boot Methods Boot ISO QA:Testcase Boot Methods DVD QA:Testcase Media USB dd","title":"Release-blocking images must boot"},{"location":"team/testing/release_criteria/#basic-graphics-mode-behaviors","text":"The generic video driver option (\u201cbasic graphics mode\u201d) on all release-blocking installers must function as intended. This means launching the installer or desktop and attempting to use a generic driver. There must be no bugs that prevent the installer from being reached in this configuration on all systems and classes of hardware supported by the enterprise linux kernel. References Test cases: QA:Testcase Basic Graphics Mode","title":"Basic Graphics Mode behaviors"},{"location":"team/testing/release_criteria/#no-broken-packages","text":"Critical errors, such as undeclared conflicts, unresolved dependencies, or modules relying on packages from another stream will be considered an automatic blocker. There are potential exceptions to this (eg, freeradius cannot be installed on an older perl stream, this is a known issue upstream). References Test cases: QA:Testcase Media Repoclosure QA:Testcase Media File Conflicts","title":"No Broken Packages"},{"location":"team/testing/release_criteria/#repositories-must-match-upstream","text":"Repositories and the packages within them should match upstream as closely as possible. Notable exceptions would be kmods, kpatch, or what is deemed as \u201cspyware\u201d like insights. Packages that are available from upstream should not have hard requirements on RHSM and packages that have it default built in should be patched out. References Test cases: QA:Testcase Repo Compare QA:Testcase Packages No Insights QA:Testcase Packages No RHSM","title":"Repositories Must Match Upstream"},{"location":"team/testing/release_criteria/#debranding","text":"Assets and functionality that are Red Hat specific should not be included. If they are not patched out, it will be considered an automatic blocker. References Test cases: QA:Testcase Debranding","title":"Debranding"},{"location":"team/testing/release_criteria/#installer-requirements","text":"","title":"Installer Requirements"},{"location":"team/testing/release_criteria/#media-consistency-verification","text":"This means that the installer\u2019s mechanism for verifying the install medium is intact and must complete successfully, with the assumption that the medium was correctly written. It should return a failure message if this not the case. References Test cases: QA:Testcase TBD","title":"Media Consistency Verification"},{"location":"team/testing/release_criteria/#packages-and-installer-sources","text":"The installer must be able to use all supported local/remote packages and installer sources. References Test cases: QA:Testcase TBD","title":"Packages and Installer Sources"},{"location":"team/testing/release_criteria/#nas-network-attached-storage","text":"The installer must be able to detect and install to supported NAS devices (if possible and supported by the kernel). References Test cases: QA:Testcase TBD","title":"NAS (Network Attached Storage)\""},{"location":"team/testing/release_criteria/#installation-interfaces","text":"The installer must be able to complete an installation using all supported spokes. References Test cases: QA:Testcase TBD","title":"Installation Interfaces"},{"location":"team/testing/release_criteria/#minimal-installation","text":"A minimal installation (via network) must be able to install the minimal package set. References Test cases: QA:Testcase TBD","title":"Minimal Installation"},{"location":"team/testing/release_criteria/#kickstart-installation","text":"A kickstart installation should succeed, whether from optical/USB media or via the network. References Test cases: QA:Testcase TBD","title":"Kickstart Installation"},{"location":"team/testing/release_criteria/#disk-layouts","text":"The installer must be able to create and install to any workable partition layout using any file system or format combination offered or supported by the installer. File systems that are not supported by the EL kernel is not tested here (this means btrfs, zfs, both of wish are not supported). References Test cases: QA:Testcase TBD","title":"Disk Layouts"},{"location":"team/testing/release_criteria/#firmware-raid","text":"The installer must be able to detect and install to firmware RAID devices. Note that system-specific bugs do not count as blockers. It is likely that some hardware support might be broken or not available at all. DUDs (driver update disks) are not considered for this criteria. References Test cases: QA:Testcase TBD","title":"Firmware RAID"},{"location":"team/testing/release_criteria/#bootloader-disk-selection","text":"The installer must allow the user to choose which disk the bootloader will be installed to or, if the user so chooses, not to install a bootloader. References Test cases: QA:Testcase TBD","title":"Bootloader Disk Selection"},{"location":"team/testing/release_criteria/#storage-volume-resize","text":"Any installer mechanism for resizing storage volumes must correctly attempt the requested operation. This means that if the installer offers a way to resize storage volumes, then it must use the correct resizing tool with the correct parameters. However, it does not require the installer to disallow resizing of unformatted or volumes with an unknown filesystem type. References Test cases: QA:Testcase TBD","title":"Storage Volume Resize"},{"location":"team/testing/release_criteria/#update-image","text":"The installer must be able to use an installer update image retrieved from removable media or a remote package source. This includes DUDs (driver update disks). References Test cases: QA:Testcase TBD","title":"Update Image"},{"location":"team/testing/release_criteria/#installer-help","text":"Any element in the installer which contains a \u201chelp\u201d text must display the appropriate help documentation when selected. References Test cases: QA:Testcase TBD","title":"Installer Help"},{"location":"team/testing/release_criteria/#installer-translations","text":"The installer must correctly display all complete translations that are available for use. References Test cases: QA:Testcase TBD","title":"Installer Translations"},{"location":"team/testing/release_criteria/#cloud-image-requirements","text":"","title":"Cloud Image Requirements"},{"location":"team/testing/release_criteria/#images-published-to-cloud-providers","text":"Release-blocking cloud disk images must be published to appropriate cloud providers (such as Amazon) and they must successfully boot. This also applies to KVM based instances, such as x86 and aarch64 systems. References Test cases: QA:Testcase TBD","title":"Images Published to Cloud Providers"},{"location":"team/testing/release_criteria/#post-installation-requirements","text":"","title":"Post-Installation Requirements"},{"location":"team/testing/release_criteria/#system-services","text":"All system services present after installation must start properly, with the exception of services that require hardware which is not present. Examples of such services would be: - sshd - firewalld - auditd - chronyd References Test cases: QA:Testcase TBD","title":"System Services"},{"location":"team/testing/release_criteria/#keyboard-layout","text":"If a particular keyboard layout has been configured for the system, that layout must be used: - When unlocking storage volumes (encrypted by LUKS) - When logging in at a TTY console - When logging in via GDM - After logging into a GNOME desktop system, if the user does not have their own layout configuration set. References Test cases: QA:Testcase TBD","title":"Keyboard Layout"},{"location":"team/testing/release_criteria/#selinux-errors-server","text":"There must be no SELinux denial logs in /var/log/audit/audit.log References Test cases: QA:Testcase TBD","title":"SELinux Errors (Server)"},{"location":"team/testing/release_criteria/#selinux-and-crash-notifications-desktop-only","text":"There must be no SELinux denial notifications or crash notifications on boot, during installation, or during first login. References Test cases: QA:Testcase TBD","title":"SELinux and Crash Notifications (Desktop Only)"},{"location":"team/testing/release_criteria/#default-application-functionality-desktop-only","text":"Applications that can be launched within GNOME or on the command line must start successfully and withstand basic functionality tests. This includes: - Web browser - File manager - Package manager - Image/Document Viewers - Text editors (gedit, vim) - Archive manager - Terminal Emulator (gnome terminal) - Problem Reporter - Help Viewer - System Settings References Test cases: QA:Testcase TBD","title":"Default Application Functionality (Desktop Only)"},{"location":"team/testing/release_criteria/#default-panel-functionality-desktop-only","text":"All elements of GNOME should function properly in regular use. References Test cases: QA:Testcase TBD","title":"Default Panel Functionality (Desktop Only)"},{"location":"team/testing/release_criteria/#dual-monitor-setup-desktop-only","text":"Computers using two monitors, the graphical output is correctly shown on both monitors. References Test cases: QA:Testcase TBD","title":"Dual Monitor Setup (Desktop Only)"},{"location":"team/testing/release_criteria/#artwork-and-assets-server-and-desktop","text":"Proposed final artwork (such as wallpapers and other assets) must be included. A wallpaper from this package should show up as a default for GDM and GNOME. References Test cases: QA:Testcase TBD","title":"Artwork and Assets (Server and Desktop)"},{"location":"team/testing/release_criteria/#packages-and-module-installation","text":"Packages (non-module) should be able to be installed without conflicts or dependent on repositories outside of Rocky Linux. - Default modules (as listed in dnf module list) should be installed without requiring them to be enabled. - Module streams should be able to be switched and those packages should be able to be installed without errors or unresolved dependencies. References Test cases: QA:Testcase TBD","title":"Packages and Module Installation"},{"location":"team/testing/QA/","text":"This page lists all test cases in work and who is working on them... Initialization Requirements \u00b6 Requirement Test Case Assignee Status Release-blocking images must boot QA:Testcase Boot Methods Boot ISO @tcooper template exists, openQA covered (ref) Release-blocking images must boot QA:Testcase Boot Methods DVD @tcooper template exists, openQA covered (ref) Basic Graphics Mode behaviors QA:Testcase Basic Graphics Mode @tcooper manual and/or new openQA TestCase No Broken Packages QA:Testcase Media Repoclosure QA:Testcase Media File Conflicts @tcooper manual using scripts or automated in CI Repositories Must Match Upstream QA:Testcase repocompare @tcooper manual using Skip's repocompare Debranding QA:Testcase Debranding Analysis @tcooper process TBD Installer Requirements \u00b6 Requirement Test Case Assignee Status Media Consistency Verification QA:Testcase TBD @tbd Packages and Installer Sources QA:Testcase TBD @tbd NAS (Network Attached Storage) QA:Testcase TBD @tbd Installation Interfaces QA:Testcase TBD @tbd Minimal Installation QA:Testcase TBD @tbd Kickstart Installation QA:Testcase TBD @tbd Disk Layouts QA:Testcase TBD @tbd Firmware RAID QA:Testcase TBD @tbd Bootloader Disk Selection QA:Testcase TBD @tbd Storage Volume Resize QA:Testcase TBD @tbd Update Image QA:Testcase TBD @tbd Installer Help QA:Testcase TBD @tbd Installer Translations QA:Testcase TBD @tbd Cloud Image Requirements \u00b6 Requirement Test Case Assignee Status Images Published to Cloud Providers QA:Testcase TBD @tbd Post-Installation Requirements \u00b6 Requirement Test Case Assignee Status System Services QA:Testcase TBD @tbd Keyboard Layout QA:Testcase TBD @tbd SELinux Errors (Server) QA:Testcase TBD @tbd SELinux and Crash Notifications (Desktop Only) QA:Testcase TBD @tbd Default Application Functionality (Desktop Only) QA:Testcase TBD @tbd Default Panel Functionality (Desktop Only) QA:Testcase TBD @tbd Dual Monitor Setup (Desktop Only) QA:Testcase TBD @tbd Artwork and Assets (Server and Desktop) QA:Testcase TBD @tbd Packages and Module Installation QA:Testcase TBD @tbd Additional Information Contact Disclaimer License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at info@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"Index"},{"location":"team/testing/QA/#initialization-requirements","text":"Requirement Test Case Assignee Status Release-blocking images must boot QA:Testcase Boot Methods Boot ISO @tcooper template exists, openQA covered (ref) Release-blocking images must boot QA:Testcase Boot Methods DVD @tcooper template exists, openQA covered (ref) Basic Graphics Mode behaviors QA:Testcase Basic Graphics Mode @tcooper manual and/or new openQA TestCase No Broken Packages QA:Testcase Media Repoclosure QA:Testcase Media File Conflicts @tcooper manual using scripts or automated in CI Repositories Must Match Upstream QA:Testcase repocompare @tcooper manual using Skip's repocompare Debranding QA:Testcase Debranding Analysis @tcooper process TBD","title":"Initialization Requirements"},{"location":"team/testing/QA/#installer-requirements","text":"Requirement Test Case Assignee Status Media Consistency Verification QA:Testcase TBD @tbd Packages and Installer Sources QA:Testcase TBD @tbd NAS (Network Attached Storage) QA:Testcase TBD @tbd Installation Interfaces QA:Testcase TBD @tbd Minimal Installation QA:Testcase TBD @tbd Kickstart Installation QA:Testcase TBD @tbd Disk Layouts QA:Testcase TBD @tbd Firmware RAID QA:Testcase TBD @tbd Bootloader Disk Selection QA:Testcase TBD @tbd Storage Volume Resize QA:Testcase TBD @tbd Update Image QA:Testcase TBD @tbd Installer Help QA:Testcase TBD @tbd Installer Translations QA:Testcase TBD @tbd","title":"Installer Requirements"},{"location":"team/testing/QA/#cloud-image-requirements","text":"Requirement Test Case Assignee Status Images Published to Cloud Providers QA:Testcase TBD @tbd","title":"Cloud Image Requirements"},{"location":"team/testing/QA/#post-installation-requirements","text":"Requirement Test Case Assignee Status System Services QA:Testcase TBD @tbd Keyboard Layout QA:Testcase TBD @tbd SELinux Errors (Server) QA:Testcase TBD @tbd SELinux and Crash Notifications (Desktop Only) QA:Testcase TBD @tbd Default Application Functionality (Desktop Only) QA:Testcase TBD @tbd Default Panel Functionality (Desktop Only) QA:Testcase TBD @tbd Dual Monitor Setup (Desktop Only) QA:Testcase TBD @tbd Artwork and Assets (Server and Desktop) QA:Testcase TBD @tbd Packages and Module Installation QA:Testcase TBD @tbd","title":"Post-Installation Requirements"},{"location":"team/testing/QA/Testcase_Basic_Graphics_Mode/","text":"REFERENCED RELEASE CRITERIA IS OVERLY GENERAL AND UNTESTABLE The associated release criteria, Release_Criteria#basic-graphics-mode-behaviors , for this test case is overly general and must be modified to specific enough to be testable. Associated release criterion This test case is associated with the Release_Criteria#basic-graphics-mode-behaviors release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This test case will verify that release-blocking installers function as intended using the generic video driver option (\u201cbasic graphics mode\u201d) on supported systems and classes of hardware. Supported Systems and Hardware Classes x86_64 aarch64 ppc64 s309x TBD TBD TBD TBD Setup \u00b6 Obtain access to supported system and hardware class to be installed. Prepare appropriate media for the selected ISO to be tested. Example: QA:Testcase Media USB dd How to test \u00b6 Boot the system from the prepared optical, USB media or virtual device attachment. Examples: QA:Testcase Boot Methods Boot ISO , QA:Testcase Boot Methods DVD In the boot menu select the appropriate option to boot the installer. In the installer select the appropriate option to intall in basic graphics mode. Proceed with installation on the test system. Depending on installer choices this MAY destroy all the data on the test system. DATA LOSS If you choose to complete the installation of the test system any/all data on the system may be lost. Please do not install on a system whose contents you need to keep. Expected Results \u00b6 Selection of basic graphics mode in the Anaconda installer is possible. Anaconda installer presents a usable graphical intallation environment. System under test can be installed normally. After reboot system boots into graphical environment. After login user is able to operate the graphical environment. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Basic Graphics Mode"},{"location":"team/testing/QA/Testcase_Basic_Graphics_Mode/#description","text":"This test case will verify that release-blocking installers function as intended using the generic video driver option (\u201cbasic graphics mode\u201d) on supported systems and classes of hardware.","title":"Description"},{"location":"team/testing/QA/Testcase_Basic_Graphics_Mode/#setup","text":"Obtain access to supported system and hardware class to be installed. Prepare appropriate media for the selected ISO to be tested. Example: QA:Testcase Media USB dd","title":"Setup"},{"location":"team/testing/QA/Testcase_Basic_Graphics_Mode/#how-to-test","text":"Boot the system from the prepared optical, USB media or virtual device attachment. Examples: QA:Testcase Boot Methods Boot ISO , QA:Testcase Boot Methods DVD In the boot menu select the appropriate option to boot the installer. In the installer select the appropriate option to intall in basic graphics mode. Proceed with installation on the test system. Depending on installer choices this MAY destroy all the data on the test system. DATA LOSS If you choose to complete the installation of the test system any/all data on the system may be lost. Please do not install on a system whose contents you need to keep.","title":"How to test"},{"location":"team/testing/QA/Testcase_Basic_Graphics_Mode/#expected-results","text":"Selection of basic graphics mode in the Anaconda installer is possible. Anaconda installer presents a usable graphical intallation environment. System under test can be installed normally. After reboot system boots into graphical environment. After login user is able to operate the graphical environment.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Boot_Methods_Boot_Iso/","text":"Associated release criterion This test case is associated with the Release_Criteria#initialization-requirements release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This is to verify that the Anaconda installer starts correctly when booting from the Rocky Linux boot.iso. Setup \u00b6 Prepare your system for booting the boot.iso image. This may involve writing the image to a USB key or burning it to an optical disk. Additionally, attaching the boot.iso to a virtual machine instance as a Virtual Optical Disk or mounting the boot.iso to server via baseboard management controller virtual media attach should be possible but is not expressly required. How to test \u00b6 Boot the system from the prepared optical, USB media or virtual device attachment. In the boot menu select the appropriate option to boot the installer. Expected Results \u00b6 Graphical boot menu is displayed for users to select install options. Navigating the menu and selecting entries must work. If no option is selected, the installer should load after a reasonable timeout. System boots into the Anaconda installer. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Boot Methods Boot Iso"},{"location":"team/testing/QA/Testcase_Boot_Methods_Boot_Iso/#description","text":"This is to verify that the Anaconda installer starts correctly when booting from the Rocky Linux boot.iso.","title":"Description"},{"location":"team/testing/QA/Testcase_Boot_Methods_Boot_Iso/#setup","text":"Prepare your system for booting the boot.iso image. This may involve writing the image to a USB key or burning it to an optical disk. Additionally, attaching the boot.iso to a virtual machine instance as a Virtual Optical Disk or mounting the boot.iso to server via baseboard management controller virtual media attach should be possible but is not expressly required.","title":"Setup"},{"location":"team/testing/QA/Testcase_Boot_Methods_Boot_Iso/#how-to-test","text":"Boot the system from the prepared optical, USB media or virtual device attachment. In the boot menu select the appropriate option to boot the installer.","title":"How to test"},{"location":"team/testing/QA/Testcase_Boot_Methods_Boot_Iso/#expected-results","text":"Graphical boot menu is displayed for users to select install options. Navigating the menu and selecting entries must work. If no option is selected, the installer should load after a reasonable timeout. System boots into the Anaconda installer.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Boot_Methods_Dvd/","text":"Associated release criterion This test case is associated with the Release_Criteria#initialization-requirements release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This is to verify that the Anaconda installer starts correctly when booting from DVD.iso. Setup \u00b6 Prepare your system for booting the DVD.iso image. This may involve writing the image to a USB key or burning it to an optical disk of sufficient capacity. Additionally, attaching the DVD.iso to a virtual machine instance as a Virtual Optical Disk or mounting the DVD.iso to server via baseboard management controller virtual media attach should be possible but is not expressly required. How to test \u00b6 Boot the system from the prepared optical, USB media or virtual device attachment. In the boot menu select the appropriate option to boot the installer. Expected Results \u00b6 Graphical boot menu is displayed for users to select install options. Navigating the menu and selecting entries must work. If no option is selected, the installer should load after a reasonable timeout. System boots into the Anaconda installer. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Boot Methods DVD"},{"location":"team/testing/QA/Testcase_Boot_Methods_Dvd/#description","text":"This is to verify that the Anaconda installer starts correctly when booting from DVD.iso.","title":"Description"},{"location":"team/testing/QA/Testcase_Boot_Methods_Dvd/#setup","text":"Prepare your system for booting the DVD.iso image. This may involve writing the image to a USB key or burning it to an optical disk of sufficient capacity. Additionally, attaching the DVD.iso to a virtual machine instance as a Virtual Optical Disk or mounting the DVD.iso to server via baseboard management controller virtual media attach should be possible but is not expressly required.","title":"Setup"},{"location":"team/testing/QA/Testcase_Boot_Methods_Dvd/#how-to-test","text":"Boot the system from the prepared optical, USB media or virtual device attachment. In the boot menu select the appropriate option to boot the installer.","title":"How to test"},{"location":"team/testing/QA/Testcase_Boot_Methods_Dvd/#expected-results","text":"Graphical boot menu is displayed for users to select install options. Navigating the menu and selecting entries must work. If no option is selected, the installer should load after a reasonable timeout. System boots into the Anaconda installer.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Debranding/","text":"Associated release criterion This test case is associated with the Release_Criteria - Debranding release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 Add a short description here for this Testcase. Setup \u00b6 Add steps for setup for this Testcase. How to test \u00b6 Do this first... Then do this... Expected Results \u00b6 This is what you should see/verify. You should also see/verify this. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Debranding"},{"location":"team/testing/QA/Testcase_Debranding/#description","text":"Add a short description here for this Testcase.","title":"Description"},{"location":"team/testing/QA/Testcase_Debranding/#setup","text":"Add steps for setup for this Testcase.","title":"Setup"},{"location":"team/testing/QA/Testcase_Debranding/#how-to-test","text":"Do this first... Then do this...","title":"How to test"},{"location":"team/testing/QA/Testcase_Debranding/#expected-results","text":"This is what you should see/verify. You should also see/verify this.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Media_File_Conflicts/","text":"Associated release criterion This test case is associated with the Release_Criteria#no-broken-packages release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This testcase will verify that the offline repository included on release blocking images will not contain any file conflicts between packages without explicit Conflicts: tag in the package metadata. Setup \u00b6 Obtain access to an environment with the dnf and python3 commands. Download the ISO to be tested to that machine. Download the potential_conflict.py script provided by Rocky Linux Testing Team. How to test \u00b6 Mount the ISO to be tested locally. Example: mount -o loop Rocky-8.5-x86_64-minimal.iso /media Determine the path to the repodata directory(ies) on the ISO. Example: find /media -name repodata Run the potential_conflict.py script on the mounted ISO. Example: python3 /vagrant/scripts/potential_conflict.py --repofrompath BaseOS,/media/BaseOS --repoid BaseOS --repofrompath Minimal,/media/Minimal --repoid Minimal Unmount the ISO. Example: umount /media Expected Results \u00b6 The potential_conflict.py script does not report any packages with non-declared conflicts. Sample Output Success Failure $ sudo mount -o loop Rocky-8.5-aarch64-minimal.iso /media mount: /media: WARNING: device write-protected, mounted read-only. $ python3 /vagrant/scripts/potential_conflict.py \\ --repofrompath BaseOS,/media/BaseOS --repoid BaseOS \\ --repofrompath Minimal,/media/Minimal --repoid Minimal Added BaseOS repo from /media/BaseOS Added Minimal repo from /media/Minimal Getting complete filelist for: file:///media/BaseOS file:///media/Minimal 168374 files found. Looking for duplicated filenames: 524 duplicates found. Doing more advanced checks to see if these are real conflicts: 10% complete ( 52/ 524, 1139/sec), 0 found - eta 0:00:00 35% complete ( 182/ 524, 1146/sec), 0 found - eta 0:00:00 45% complete ( 234/ 524, 1818/sec), 0 found - eta 0:00:00 50% complete ( 260/ 524, 592673/sec), 0 found - eta 0:00:00 55% complete ( 286/ 524, 778942/sec), 0 found - eta 0:00:00 60% complete ( 312/ 524, 801852/sec), 0 found - eta 0:00:00 79% complete ( 416/ 524, 234/sec), 0 found - eta 0:00:00 84% complete ( 442/ 524, 902/sec), 0 found - eta 0:00:00 89% complete ( 468/ 524, 935/sec), 0 found - eta 0:00:00 94% complete ( 494/ 524, 1616/sec), 0 found - eta 0:00:00 99% complete ( 520/ 524, 1114/sec), 0 found - eta 0:00:00 0 file conflicts found. 0 package conflicts found. == Package conflicts == == File conflicts, listed by conflicting packages == $ sudo umount /media $ sudo mount -o loop Rocky-8.5-x86_64-dvd1.iso /media mount: /media: WARNING: device write-protected, mounted read-only. $ python3 /vagrant/scripts/potential_conflict.py \\ --repofrompath AppStream,/media/AppStream --repoid AppStream \\ --repofrompath BaseOS,/media/BaseOS --repoid BaseOS Added AppStream repo from /media/AppStream Added BaseOS repo from /media/BaseOS Getting complete filelist for: file:///media/AppStream file:///media/BaseOS 851967 files found. Looking for duplicated filenames: 101865 duplicates found. Doing more advanced checks to see if these are real conflicts: 5% complete ( 5093/101865, 8713/sec), 0 found - eta 0:00:11 10% complete ( 10186/101865, 1787281/sec), 0 found - eta 0:00:05 15% complete ( 15279/101865, 2223312/sec), 0 found - eta 0:00:03 20% complete ( 20372/101865, 23614/sec), 0 found - eta 0:00:03 25% complete ( 25465/101865, 57188/sec), 0 found - eta 0:00:02 30% complete ( 30558/101865, 3831/sec), 0 found - eta 0:00:05 35% complete ( 35651/101865, 48455/sec), 0 found - eta 0:00:04 40% complete ( 40744/101865, 32067/sec), 0 found - eta 0:00:03 45% complete ( 45837/101865, 2136586/sec), 0 found - eta 0:00:03 50% complete ( 50930/101865, 72529/sec), 0 found - eta 0:00:02 55% complete ( 56023/101865, 176294/sec), 0 found - eta 0:00:02 60% complete ( 61116/101865, 68622/sec), 1 found - eta 0:00:01 65% complete ( 66209/101865, 155133/sec), 1 found - eta 0:00:01 70% complete ( 71302/101865, 13874/sec), 1 found - eta 0:00:01 75% complete ( 76395/101865, 10835/sec), 1 found - eta 0:00:01 80% complete ( 81488/101865, 27477/sec), 1 found - eta 0:00:00 85% complete ( 86581/101865, 9075/sec), 1 found - eta 0:00:00 90% complete ( 91674/101865, 14807/sec), 1 found - eta 0:00:00 95% complete ( 96767/101865, 197437/sec), 1 found - eta 0:00:00 100% complete (101860/101865, 38727/sec), 1 found - eta 0:00:00 1 file conflicts found. 11 package conflicts found. == Package conflicts == mariadb-server-utils-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-server-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 python3-mod_wsgi-4.6.4-4.el8.x86_64 python38-mod_wsgi-4.6.8-3.module+el8.4.0+570+c2eaf144.x86_64 python39-mod_wsgi-4.7.1-4.module+el8.4.0+574+843c4898.x86_64 libcmpiCppImpl0-2.0.3-15.el8.i686 tog-pegasus-libs-2:2.14.1-46.el8.i686 mariadb-connector-c-devel-3.1.11-2.el8_3.i686 mariadb-connector-c-devel-3.1.11-2.el8_3.x86_64 mariadb-devel-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-devel-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 mariadb-server-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-server-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 mariadb-test-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-test-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 mariadb-connector-c-devel-3.1.11-2.el8_3.i686 mariadb-connector-c-devel-3.1.11-2.el8_3.x86_64 mysql-devel-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 mariadb-devel-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-devel-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 mariadb-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 libcmpiCppImpl0-2.0.3-15.el8.x86_64 tog-pegasus-libs-2:2.14.1-46.el8.x86_64 libev-libevent-devel-4.24-6.el8.i686 libev-libevent-devel-4.24-6.el8.x86_64 libevent-devel-2.1.8-5.el8.i686 libevent-devel-2.1.8-5.el8.x86_64 == File conflicts, listed by conflicting packages == mariadb-server-3:10.3.28-1.module+el8.4.0+427+adf35707.x86_64 mysql-test-8.0.26-1.module+el8.4.0+652+6de068a7.x86_64 /usr/bin/mysqld_safe $ sudo umount /media Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Media File Conflicts"},{"location":"team/testing/QA/Testcase_Media_File_Conflicts/#description","text":"This testcase will verify that the offline repository included on release blocking images will not contain any file conflicts between packages without explicit Conflicts: tag in the package metadata.","title":"Description"},{"location":"team/testing/QA/Testcase_Media_File_Conflicts/#setup","text":"Obtain access to an environment with the dnf and python3 commands. Download the ISO to be tested to that machine. Download the potential_conflict.py script provided by Rocky Linux Testing Team.","title":"Setup"},{"location":"team/testing/QA/Testcase_Media_File_Conflicts/#how-to-test","text":"Mount the ISO to be tested locally. Example: mount -o loop Rocky-8.5-x86_64-minimal.iso /media Determine the path to the repodata directory(ies) on the ISO. Example: find /media -name repodata Run the potential_conflict.py script on the mounted ISO. Example: python3 /vagrant/scripts/potential_conflict.py --repofrompath BaseOS,/media/BaseOS --repoid BaseOS --repofrompath Minimal,/media/Minimal --repoid Minimal Unmount the ISO. Example: umount /media","title":"How to test"},{"location":"team/testing/QA/Testcase_Media_File_Conflicts/#expected-results","text":"The potential_conflict.py script does not report any packages with non-declared conflicts.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Media_Repoclosure/","text":"Associated release criterion This test case is associated with the Release_Criteria#no-broken-packages release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This testcase will verify that the offline repository included on release blocking images will not contain broken dependencies. Setup \u00b6 Obtain access to an environment with the dnf repoclosure command. Download the ISO to be tested to that machine. How to test \u00b6 Mount the ISO to be tested locally. Example: mount -o loop Rocky-8.5-x86_64-minimal.iso /media Determine the path to the repodata directory(ies) on the ISO. Example: find /media -name repodata Run the dnf repoclosure command on the mounted ISO. Example: dnf --verbose repoclosure --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath Minimal,/media/Minimal --repo Minimal Unmount the ISO. Example: umount /media Expected Results \u00b6 The dnf repoclosure command does not generate any errors. Sample Output Success Failure $ sudo mount -o loop Rocky-8.5-x86_64-minimal.iso /media mount: /media: WARNING: device write-protected, mounted read-only. [vagrant@localhost ~]$ dnf --refresh repoclosure \\ --repofrompath BaseOS,/media/BaseOS --repo BaseOS \\ --repofrompath Minimal,/media/Minimal --repo Minimal Added BaseOS repo from /media/BaseOS Added Minimal repo from /media/Minimal BaseOS 102 MB/s | 2.6 MB 00:00 Minimal 90 kB/s | 384 B 00:00 $ sudo umount /media NOTE: In this example the content of the Rocky-8.5-x86_64-minimal.iso was copied to /tmp then the BaseOS repository was modified to remove the setup-2.12.2-6.el8.noarch.rpm package and the repository metadata was regenerated. [vagrant@localhost ~]$ dnf --refresh repoclosure \\ --repofrompath BaseOS,/tmp/media/BaseOS --repo BaseOS \\ --repofrompath Minimal,/tmp/media/Minimal --repo Minimal Added BaseOS repo from /tmp/media/BaseOS Added Minimal repo from /tmp/media/Minimal BaseOS 3.7 MB/s | 3.8 kB 00:00 Minimal 3.7 MB/s | 3.8 kB 00:00 package: basesystem-11-5.el8.noarch from BaseOS unresolved deps: setup package: dump-1:0.4-0.36.b46.el8.x86_64 from BaseOS unresolved deps: setup package: filesystem-3.8-6.el8.x86_64 from BaseOS unresolved deps: setup package: initscripts-10.00.15-1.el8.x86_64 from BaseOS unresolved deps: setup package: rpcbind-1.2.5-8.el8.x86_64 from BaseOS unresolved deps: setup package: shadow-utils-2:4.6-14.el8.x86_64 from BaseOS unresolved deps: setup Error: Repoclosure ended with unresolved dependencies. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Media Repoclosure"},{"location":"team/testing/QA/Testcase_Media_Repoclosure/#description","text":"This testcase will verify that the offline repository included on release blocking images will not contain broken dependencies.","title":"Description"},{"location":"team/testing/QA/Testcase_Media_Repoclosure/#setup","text":"Obtain access to an environment with the dnf repoclosure command. Download the ISO to be tested to that machine.","title":"Setup"},{"location":"team/testing/QA/Testcase_Media_Repoclosure/#how-to-test","text":"Mount the ISO to be tested locally. Example: mount -o loop Rocky-8.5-x86_64-minimal.iso /media Determine the path to the repodata directory(ies) on the ISO. Example: find /media -name repodata Run the dnf repoclosure command on the mounted ISO. Example: dnf --verbose repoclosure --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath Minimal,/media/Minimal --repo Minimal Unmount the ISO. Example: umount /media","title":"How to test"},{"location":"team/testing/QA/Testcase_Media_Repoclosure/#expected-results","text":"The dnf repoclosure command does not generate any errors.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Media_USB_dd/","text":"Associated release criterion This test case is associated with the Release_Criteria#initialization-requirements release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This verifies that Rocky Linux ISO image can be written to USB media using dd command, and the resulting USB media successfully boots to the Anaconda Installer. DATA LOSS Any data on the USB stick used for this test is likely to be destroyed. Please do not use a stick whose contents you need to keep. Setup \u00b6 Provide a USB media device that is larger than the ISO image you wish to test and that it can be completely erased. Provide a Linux (or other *nix system) that has the dd command available and an unoccupied USB port. Download the Rocky Linux ISO image you wish to test onto the test system. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/Rocky-8.5-x86_64-boot.iso Download the CHECKSUM file that goes with the Rocky Linux ISO image that you wish to test. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/CHECKSUM Download the CHECKSUM.sig file that does with the CHECKSUM file. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/CHECKSUM.sig Download the Rocky Release Engineering GPG key. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/RPM-GPG-KEY-rockyofficial How to test \u00b6 Import the Rocky Release Engineering GPG key. Example command: gpg --import RPM-GPG-KEY-rockyofficial Verify the signature of the CHECKSUM file. Example command: gpg --verify-file CHECKSUM.sig Verify the CHECKSUM of the Rocky Linux ISO... Example command: shasum -a 256 --ignore-missing -c CHECKSUM Write the Rocky Linux ISO to the USB media using dd ... Example command: dd if=Rocky-8.5-x86_64-boot.iso of=/dev/sdX bs=16M status=progress oflag=direct ...where you replace sdX with the device identifier of your USB media. This will destroy all data on the disk. Boot the test system with the USB media. In the boot menu select the appropriate option to boot the installer. [OPTIONAL] Proceed with installation on the test system. Depending on installer choices this MAY destroy all the data on the test system. Expected Results \u00b6 The gpg signature on the CHECKSUM file is valid. The CHECKSUM of the Rocky Linux ISO is valid. The Rocky Linux ISO is written to the USB stick without errors. The USB stick boots without errors. The Anaconda Installer starts without errors. DATA LOSS If you choose to complete the installation of the test system any/all data on the system may be lost. Please do not install on a system whose contents you need to keep. [OPTIONALLY] 6. The installation finishes successfully and, if the minimal or DVD ISO were used, the package repository on the USB stick (not a network based repository) was used for the installation. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Media USB dd"},{"location":"team/testing/QA/Testcase_Media_USB_dd/#description","text":"This verifies that Rocky Linux ISO image can be written to USB media using dd command, and the resulting USB media successfully boots to the Anaconda Installer. DATA LOSS Any data on the USB stick used for this test is likely to be destroyed. Please do not use a stick whose contents you need to keep.","title":"Description"},{"location":"team/testing/QA/Testcase_Media_USB_dd/#setup","text":"Provide a USB media device that is larger than the ISO image you wish to test and that it can be completely erased. Provide a Linux (or other *nix system) that has the dd command available and an unoccupied USB port. Download the Rocky Linux ISO image you wish to test onto the test system. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/Rocky-8.5-x86_64-boot.iso Download the CHECKSUM file that goes with the Rocky Linux ISO image that you wish to test. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/CHECKSUM Download the CHECKSUM.sig file that does with the CHECKSUM file. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/8/isos/x86_64/CHECKSUM.sig Download the Rocky Release Engineering GPG key. Example command: curl -LOR http://dl.rockylinux.org/pub/rocky/RPM-GPG-KEY-rockyofficial","title":"Setup"},{"location":"team/testing/QA/Testcase_Media_USB_dd/#how-to-test","text":"Import the Rocky Release Engineering GPG key. Example command: gpg --import RPM-GPG-KEY-rockyofficial Verify the signature of the CHECKSUM file. Example command: gpg --verify-file CHECKSUM.sig Verify the CHECKSUM of the Rocky Linux ISO... Example command: shasum -a 256 --ignore-missing -c CHECKSUM Write the Rocky Linux ISO to the USB media using dd ... Example command: dd if=Rocky-8.5-x86_64-boot.iso of=/dev/sdX bs=16M status=progress oflag=direct ...where you replace sdX with the device identifier of your USB media. This will destroy all data on the disk. Boot the test system with the USB media. In the boot menu select the appropriate option to boot the installer. [OPTIONAL] Proceed with installation on the test system. Depending on installer choices this MAY destroy all the data on the test system.","title":"How to test"},{"location":"team/testing/QA/Testcase_Media_USB_dd/#expected-results","text":"The gpg signature on the CHECKSUM file is valid. The CHECKSUM of the Rocky Linux ISO is valid. The Rocky Linux ISO is written to the USB stick without errors. The USB stick boots without errors. The Anaconda Installer starts without errors. DATA LOSS If you choose to complete the installation of the test system any/all data on the system may be lost. Please do not install on a system whose contents you need to keep. [OPTIONALLY] 6. The installation finishes successfully and, if the minimal or DVD ISO were used, the package repository on the USB stick (not a network based repository) was used for the installation.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Packages_No_Insights/","text":"Associated release criterion This test case is associated with the Release_Criteria#repositories-must-match-upstream release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This test will verify that insights-client package is not declared be installed as part of a package group. Setup \u00b6 Obtain access to an environment with the dnf command. Download the ISO to be tested to that machine. How to test \u00b6 Mount the ISO to be tested locally. Determine the path to the comps file(s) on the ISO. Verify that insights-client is not declared to be installed automatically. Example 1: find /media -name \"*comps*.xml\" -exec grep -H \"insights-client\" '{}' \\; Example 2: dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream groupinfo base | grep -E \":|insights\" Unmount the ISO. Expected Results \u00b6 insights-client is not declared to be installed by default. Sample Output Success Failure UPDATE SAMPLE NOTE: This example needs to be refreshed when the 8.6 ISO has been produced. As seen in the Failure section below the Rocky-8.5-x86_64-dvd1.iso includes the insights-client as part of the base group. The package should be included on the DVD ISO but should not be installed automatically. $ sudo mount -o loop Rocky-8.5-aarch64-minimal.iso /media mount: /media: WARNING: device write-protected, mounted read-only. $ dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath Minimal,/media/Minimal --repo Minimal search insights-client Added BaseOS repo from /media/BaseOS Added Minimal repo from /media/Minimal BaseOS 3.8 MB/s | 3.9 kB 00:00 Minimal 3.7 MB/s | 3.8 kB 00:00 No matches found. $ find /media -name \"*comps*.xml\" -exec grep -H \"insights-client\" '{}' \\; $ dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath Minimal,/media/Minimal --repo Minimal groupinfo base | grep -E \":|insights\" BaseOS 3.8 MB/s | 3.9 kB 00:00 Minimal 3.7 MB/s | 3.8 kB 00:00 Group: Base Description: The standard installation of Rocky Linux. Mandatory Packages: Default Packages: Optional Packages: $ sudo umount /media $ sudo mount -o loop Rocky-8.5-x86_64-dvd1.iso /media mount: /media: WARNING: device write-protected, mounted read-only. $ dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream search insights-client Added BaseOS repo from /media/BaseOS Added AppStream repo from /media/AppStream BaseOS 3.8 MB/s | 3.9 kB 00:00 AppStream 4.2 MB/s | 4.3 kB 00:00 ================================= Name Exactly Matched: insights-client ================================== insights-client.noarch : Uploads Insights information to Red Hat on a periodic basis $ find /media -name \"*comps*.xml\" -exec grep -H \"insights-client\" '{}' \\; /media/AppStream/repodata/a6742e1300e1c786af91656b152d3b98bb7aff598e650509381417970e1f1b7e-comps-AppStream.x86_64.xml: <packagereq type=\"default\">insights-client</packagereq> /media/AppStream/repodata/a6742e1300e1c786af91656b152d3b98bb7aff598e650509381417970e1f1b7e-comps-AppStream.x86_64.xml: <packagereq type=\"default\">insights-client</packagereq> $ dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream groupinfo base | grep -E \":|insights\" BaseOS 3.8 MB/s | 3.9 kB 00:00 AppStream 4.2 MB/s | 4.3 kB 00:00 Group: Base Description: The standard installation of Rocky Linux. Mandatory Packages: Default Packages: insights-client Optional Packages: $ sudo umount /media Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Packages No Insights"},{"location":"team/testing/QA/Testcase_Packages_No_Insights/#description","text":"This test will verify that insights-client package is not declared be installed as part of a package group.","title":"Description"},{"location":"team/testing/QA/Testcase_Packages_No_Insights/#setup","text":"Obtain access to an environment with the dnf command. Download the ISO to be tested to that machine.","title":"Setup"},{"location":"team/testing/QA/Testcase_Packages_No_Insights/#how-to-test","text":"Mount the ISO to be tested locally. Determine the path to the comps file(s) on the ISO. Verify that insights-client is not declared to be installed automatically. Example 1: find /media -name \"*comps*.xml\" -exec grep -H \"insights-client\" '{}' \\; Example 2: dnf --refresh --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream groupinfo base | grep -E \":|insights\" Unmount the ISO.","title":"How to test"},{"location":"team/testing/QA/Testcase_Packages_No_Insights/#expected-results","text":"insights-client is not declared to be installed by default.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Packages_No_RHSM/","text":"Associated release criterion This test case is associated with the Release_Criteria#repositories-must-match-upstream release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This test will verify that packages that are availble from upstream do not have hard requirements on subscription-manager (RHSM). Setup \u00b6 Obtain access to an environment with the dnf command. Download the ISO to be tested to that machine. How to test \u00b6 Mount the ISO to be tested locally. Obtain a list of packages that have Requires: for subscription-manager Example: package_list=($(dnf --refresh repoquery --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream --whatrequires subscription-manager 2>/dev/null| grep el8)) Download the packages with explicity Requires: for subscription-manager Example: dnf --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream download \"${package_list[@]}\" Obtain the SOURCEPKG definition for the above packages Example: rpm -q --queryformat=\"%{NAME}|%{SOURCERPM}\\n\" subscription-manager*.rpm | column -s\\| -t Unmount the ISO. Expected Results \u00b6 No packages have an explicit requirement for subscription-manager . Sample Output Success Failure $ sudo mount -o loop Rocky-8.5-aarch64-minimal.iso /media mount: /media: WARNING: device write-protected, mounted read-only. $ package_list=($(dnf --refresh repoquery --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream --whatrequires subscription-manager 2>/dev/null| grep el8)) $ dnf --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream download \"${package_list[@]}\" Added BaseOS repo from /media/BaseOS Added AppStream repo from /media/AppStream Last metadata expiration check: 0:00:25 ago on Sun 24 Apr 2022 10:57:13 PM UTC. $ rpm -q --queryformat=\"%{NAME}|%{SOURCERPM}\\n\" subscription-manager*.rpm | column -s\\| -t subscription-manager-cockpit subscription-manager-1.28.21-3.el8.src.rpm subscription-manager-migration subscription-manager-1.28.21-3.el8.src.rpm subscription-manager-plugin-ostree subscription-manager-1.28.21-3.el8.src.rpm $ sudo umount /media TBD Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Packages No RHSM"},{"location":"team/testing/QA/Testcase_Packages_No_RHSM/#description","text":"This test will verify that packages that are availble from upstream do not have hard requirements on subscription-manager (RHSM).","title":"Description"},{"location":"team/testing/QA/Testcase_Packages_No_RHSM/#setup","text":"Obtain access to an environment with the dnf command. Download the ISO to be tested to that machine.","title":"Setup"},{"location":"team/testing/QA/Testcase_Packages_No_RHSM/#how-to-test","text":"Mount the ISO to be tested locally. Obtain a list of packages that have Requires: for subscription-manager Example: package_list=($(dnf --refresh repoquery --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream --whatrequires subscription-manager 2>/dev/null| grep el8)) Download the packages with explicity Requires: for subscription-manager Example: dnf --repofrompath BaseOS,/media/BaseOS --repo BaseOS --repofrompath AppStream,/media/AppStream --repo AppStream download \"${package_list[@]}\" Obtain the SOURCEPKG definition for the above packages Example: rpm -q --queryformat=\"%{NAME}|%{SOURCERPM}\\n\" subscription-manager*.rpm | column -s\\| -t Unmount the ISO.","title":"How to test"},{"location":"team/testing/QA/Testcase_Packages_No_RHSM/#expected-results","text":"No packages have an explicit requirement for subscription-manager .","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Repo_Compare/","text":"Associated release criterion This test case is associated with the Release_Criteria#repositories-must-match-upstream release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 This test case will verify that repositories and the packages within them match upstream as closely as possible. Setup \u00b6 Verify access to the Rocky Linux repocompare tooling. How to test \u00b6 Access Rocky Linux repocompare website . Verify similarity of Rocky Linux repositories with upstream content. Expected Results \u00b6 Rocky Linux repositories should match, as closely as possible, upstream repositories. The content of Rocky Linux packages should match, as closely as possible, upstream repositories. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Media Repo Compare"},{"location":"team/testing/QA/Testcase_Repo_Compare/#description","text":"This test case will verify that repositories and the packages within them match upstream as closely as possible.","title":"Description"},{"location":"team/testing/QA/Testcase_Repo_Compare/#setup","text":"Verify access to the Rocky Linux repocompare tooling.","title":"Setup"},{"location":"team/testing/QA/Testcase_Repo_Compare/#how-to-test","text":"Access Rocky Linux repocompare website . Verify similarity of Rocky Linux repositories with upstream content.","title":"How to test"},{"location":"team/testing/QA/Testcase_Repo_Compare/#expected-results","text":"Rocky Linux repositories should match, as closely as possible, upstream repositories. The content of Rocky Linux packages should match, as closely as possible, upstream repositories.","title":"Expected Results"},{"location":"team/testing/QA/Testcase_Template/","text":"Associated release criterion This test case is associated with the Release_Criteria#TBD release criterion. If you are doing release validation testing, a failure of this test case may be a breach of that release criterion. Description \u00b6 Add a short description here for this Testcase. Setup \u00b6 Add steps for setup for this Testcase. How to test \u00b6 Do this first... Then do this... Expected Results \u00b6 This is what you should see/verify. You should also see/verify this. Additional Information Contact Disclaimer Attribution License If you have questions with respect to this content or to report concerns regarding the use or misuse content please do not hesitate to contact us at testing@rockylinux.org . Rocky Linux and the Rocky Enterprise Software Foundation (RESF) does not make any express or implied warranties, including but not limited to the warranties of non-infringement of any third party intellectual property rights. RESF does not warrant that any pending trademark applications for trademarks of RESF will result in any granted trademark protection. RESF shall not be liable for any claims relating to user's activities falling within the scope of the permission and user hereby agrees to indemnify, defend and hold RESF and its contributors harmless against any such claim. This work is heavily inspired by the Fedora Quality Assurance documents which were made available under Attribution-Share Alike 4.0 International license unless otherwise noted. This content is licensed under under Attribution-Share Alike 4.0 International license unless otherwise noted.","title":"QA:Testcase Template"},{"location":"team/testing/QA/Testcase_Template/#description","text":"Add a short description here for this Testcase.","title":"Description"},{"location":"team/testing/QA/Testcase_Template/#setup","text":"Add steps for setup for this Testcase.","title":"Setup"},{"location":"team/testing/QA/Testcase_Template/#how-to-test","text":"Do this first... Then do this...","title":"How to test"},{"location":"team/testing/QA/Testcase_Template/#expected-results","text":"This is what you should see/verify. You should also see/verify this.","title":"Expected Results"}]}